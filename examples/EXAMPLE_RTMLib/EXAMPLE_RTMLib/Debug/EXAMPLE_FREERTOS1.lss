
EXAMPLE_FREERTOS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000720c  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004fc  20000000  0040720c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a288  200004fc  00407708  000204fc  2**2
                  ALLOC
  3 .stack        00003004  2000a784  00411990  000204fc  2**0
                  ALLOC
  4 .ARM.attributes 0000002e  00000000  00000000  000204fc  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002052a  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e5a9  00000000  00000000  00020583  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003fa4  00000000  00000000  0003eb2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007659  00000000  00000000  00042ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000eb0  00000000  00000000  0004a129  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000da0  00000000  00000000  0004afd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001da9f  00000000  00000000  0004bd79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013b1b  00000000  00000000  00069818  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072d1d  00000000  00000000  0007d333  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003aa0  00000000  00000000  000f0050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	88 d7 00 20 c5 53 40 00 35 53 40 00 35 53 40 00     ... .S@.5S@.5S@.
  400010:	35 53 40 00 35 53 40 00 35 53 40 00 00 00 00 00     5S@.5S@.5S@.....
	...
  40002c:	71 58 40 00 35 53 40 00 00 00 00 00 71 59 40 00     qX@.5S@.....qY@.
  40003c:	b9 59 40 00 35 53 40 00 35 53 40 00 35 53 40 00     .Y@.5S@.5S@.5S@.
  40004c:	35 53 40 00 35 53 40 00 35 53 40 00 35 53 40 00     5S@.5S@.5S@.5S@.
  40005c:	35 53 40 00 35 53 40 00 49 28 40 00 61 28 40 00     5S@.5S@.I(@.a(@.
  40006c:	79 28 40 00 91 28 40 00 a9 28 40 00 35 53 40 00     y(@..(@..(@.5S@.
  40007c:	35 53 40 00 35 53 40 00 35 53 40 00 35 53 40 00     5S@.5S@.5S@.5S@.
  40008c:	35 53 40 00 35 53 40 00 35 53 40 00 35 53 40 00     5S@.5S@.5S@.5S@.
  40009c:	35 53 40 00 35 53 40 00 35 53 40 00 35 53 40 00     5S@.5S@.5S@.5S@.
  4000ac:	35 53 40 00 35 53 40 00 35 53 40 00 35 53 40 00     5S@.5S@.5S@.5S@.
  4000bc:	35 53 40 00 35 53 40 00 35 53 40 00 35 53 40 00     5S@.5S@.5S@.5S@.
  4000cc:	d5 32 40 00 35 53 40 00 35 53 40 00 35 53 40 00     .2@.5S@.5S@.5S@.
  4000dc:	35 53 40 00 35 53 40 00 35 53 40 00 35 53 40 00     5S@.5S@.5S@.5S@.
  4000ec:	35 53 40 00 35 53 40 00 35 53 40 00                 5S@.5S@.5S@.

004000f8 <__do_global_dtors_aux>:
  4000f8:	b510      	push	{r4, lr}
  4000fa:	4c05      	ldr	r4, [pc, #20]	; (400110 <__do_global_dtors_aux+0x18>)
  4000fc:	7823      	ldrb	r3, [r4, #0]
  4000fe:	b933      	cbnz	r3, 40010e <__do_global_dtors_aux+0x16>
  400100:	4b04      	ldr	r3, [pc, #16]	; (400114 <__do_global_dtors_aux+0x1c>)
  400102:	b113      	cbz	r3, 40010a <__do_global_dtors_aux+0x12>
  400104:	4804      	ldr	r0, [pc, #16]	; (400118 <__do_global_dtors_aux+0x20>)
  400106:	f3af 8000 	nop.w
  40010a:	2301      	movs	r3, #1
  40010c:	7023      	strb	r3, [r4, #0]
  40010e:	bd10      	pop	{r4, pc}
  400110:	200004fc 	.word	0x200004fc
  400114:	00000000 	.word	0x00000000
  400118:	0040720c 	.word	0x0040720c

0040011c <frame_dummy>:
  40011c:	4b0c      	ldr	r3, [pc, #48]	; (400150 <frame_dummy+0x34>)
  40011e:	b143      	cbz	r3, 400132 <frame_dummy+0x16>
  400120:	480c      	ldr	r0, [pc, #48]	; (400154 <frame_dummy+0x38>)
  400122:	490d      	ldr	r1, [pc, #52]	; (400158 <frame_dummy+0x3c>)
  400124:	b510      	push	{r4, lr}
  400126:	f3af 8000 	nop.w
  40012a:	480c      	ldr	r0, [pc, #48]	; (40015c <frame_dummy+0x40>)
  40012c:	6803      	ldr	r3, [r0, #0]
  40012e:	b923      	cbnz	r3, 40013a <frame_dummy+0x1e>
  400130:	bd10      	pop	{r4, pc}
  400132:	480a      	ldr	r0, [pc, #40]	; (40015c <frame_dummy+0x40>)
  400134:	6803      	ldr	r3, [r0, #0]
  400136:	b933      	cbnz	r3, 400146 <frame_dummy+0x2a>
  400138:	4770      	bx	lr
  40013a:	4b09      	ldr	r3, [pc, #36]	; (400160 <frame_dummy+0x44>)
  40013c:	2b00      	cmp	r3, #0
  40013e:	d0f7      	beq.n	400130 <frame_dummy+0x14>
  400140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400144:	4718      	bx	r3
  400146:	4b06      	ldr	r3, [pc, #24]	; (400160 <frame_dummy+0x44>)
  400148:	2b00      	cmp	r3, #0
  40014a:	d0f5      	beq.n	400138 <frame_dummy+0x1c>
  40014c:	4718      	bx	r3
  40014e:	bf00      	nop
  400150:	00000000 	.word	0x00000000
  400154:	0040720c 	.word	0x0040720c
  400158:	20000500 	.word	0x20000500
  40015c:	0040720c 	.word	0x0040720c
  400160:	00000000 	.word	0x00000000

00400164 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400164:	b480      	push	{r7}
  400166:	b08b      	sub	sp, #44	; 0x2c
  400168:	af00      	add	r7, sp, #0
  40016a:	6078      	str	r0, [r7, #4]
  40016c:	460b      	mov	r3, r1
  40016e:	70fb      	strb	r3, [r7, #3]
  400170:	687b      	ldr	r3, [r7, #4]
  400172:	627b      	str	r3, [r7, #36]	; 0x24
  400174:	78fb      	ldrb	r3, [r7, #3]
  400176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40017a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40017c:	61fb      	str	r3, [r7, #28]
  40017e:	69fb      	ldr	r3, [r7, #28]
  400180:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400182:	69bb      	ldr	r3, [r7, #24]
  400184:	095b      	lsrs	r3, r3, #5
  400186:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400188:	697b      	ldr	r3, [r7, #20]
  40018a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40018e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400192:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400194:	613b      	str	r3, [r7, #16]

	if (level) {
  400196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40019a:	2b00      	cmp	r3, #0
  40019c:	d009      	beq.n	4001b2 <ioport_set_pin_level+0x4e>
  40019e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4001a0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4001a2:	68fb      	ldr	r3, [r7, #12]
  4001a4:	f003 031f 	and.w	r3, r3, #31
  4001a8:	2201      	movs	r2, #1
  4001aa:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001ac:	693b      	ldr	r3, [r7, #16]
  4001ae:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  4001b0:	e008      	b.n	4001c4 <ioport_set_pin_level+0x60>
  4001b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4001b4:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  4001b6:	68bb      	ldr	r3, [r7, #8]
  4001b8:	f003 031f 	and.w	r3, r3, #31
  4001bc:	2201      	movs	r2, #1
  4001be:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4001c0:	693b      	ldr	r3, [r7, #16]
  4001c2:	635a      	str	r2, [r3, #52]	; 0x34
  4001c4:	bf00      	nop
  4001c6:	372c      	adds	r7, #44	; 0x2c
  4001c8:	46bd      	mov	sp, r7
  4001ca:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001ce:	4770      	bx	lr

004001d0 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
  4001d0:	b580      	push	{r7, lr}
  4001d2:	af00      	add	r7, sp, #0
	LED_On(LED0);
  4001d4:	2100      	movs	r1, #0
  4001d6:	2076      	movs	r0, #118	; 0x76
  4001d8:	4b01      	ldr	r3, [pc, #4]	; (4001e0 <ui_init+0x10>)
  4001da:	4798      	blx	r3
}
  4001dc:	bf00      	nop
  4001de:	bd80      	pop	{r7, pc}
  4001e0:	00400165 	.word	0x00400165

004001e4 <ui_powerdown>:

void ui_powerdown(void)
{
  4001e4:	b580      	push	{r7, lr}
  4001e6:	af00      	add	r7, sp, #0
	LED_Off(LED0);
  4001e8:	2101      	movs	r1, #1
  4001ea:	2076      	movs	r0, #118	; 0x76
  4001ec:	4b01      	ldr	r3, [pc, #4]	; (4001f4 <ui_powerdown+0x10>)
  4001ee:	4798      	blx	r3
}
  4001f0:	bf00      	nop
  4001f2:	bd80      	pop	{r7, pc}
  4001f4:	00400165 	.word	0x00400165

004001f8 <ui_wakeup>:

void ui_wakeup(void)
{
  4001f8:	b580      	push	{r7, lr}
  4001fa:	af00      	add	r7, sp, #0
	LED_On(LED0);
  4001fc:	2100      	movs	r1, #0
  4001fe:	2076      	movs	r0, #118	; 0x76
  400200:	4b01      	ldr	r3, [pc, #4]	; (400208 <ui_wakeup+0x10>)
  400202:	4798      	blx	r3
}
  400204:	bf00      	nop
  400206:	bd80      	pop	{r7, pc}
  400208:	00400165 	.word	0x00400165

0040020c <ui_process>:
void ui_stop_write(void)
{
}

void ui_process(uint16_t framenumber)
{
  40020c:	b580      	push	{r7, lr}
  40020e:	b082      	sub	sp, #8
  400210:	af00      	add	r7, sp, #0
  400212:	4603      	mov	r3, r0
  400214:	80fb      	strh	r3, [r7, #6]
	if (0 == framenumber) {
  400216:	88fb      	ldrh	r3, [r7, #6]
  400218:	2b00      	cmp	r3, #0
  40021a:	d103      	bne.n	400224 <ui_process+0x18>
		LED_On(LED0);
  40021c:	2100      	movs	r1, #0
  40021e:	2076      	movs	r0, #118	; 0x76
  400220:	4b06      	ldr	r3, [pc, #24]	; (40023c <ui_process+0x30>)
  400222:	4798      	blx	r3
	}
	if (1000 == framenumber) {
  400224:	88fb      	ldrh	r3, [r7, #6]
  400226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  40022a:	d103      	bne.n	400234 <ui_process+0x28>
		LED_Off(LED0);
  40022c:	2101      	movs	r1, #1
  40022e:	2076      	movs	r0, #118	; 0x76
  400230:	4b02      	ldr	r3, [pc, #8]	; (40023c <ui_process+0x30>)
  400232:	4798      	blx	r3
	}
}
  400234:	bf00      	nop
  400236:	3708      	adds	r7, #8
  400238:	46bd      	mov	sp, r7
  40023a:	bd80      	pop	{r7, pc}
  40023c:	00400165 	.word	0x00400165

00400240 <virtual_test_unit_ready>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_test_unit_ready(void)
{
  400240:	b480      	push	{r7}
  400242:	af00      	add	r7, sp, #0
	return b_vmem_unloaded ? CTRL_NO_PRESENT : CTRL_GOOD;
  400244:	4b05      	ldr	r3, [pc, #20]	; (40025c <virtual_test_unit_ready+0x1c>)
  400246:	781b      	ldrb	r3, [r3, #0]
  400248:	2b00      	cmp	r3, #0
  40024a:	d001      	beq.n	400250 <virtual_test_unit_ready+0x10>
  40024c:	2302      	movs	r3, #2
  40024e:	e000      	b.n	400252 <virtual_test_unit_ready+0x12>
  400250:	2300      	movs	r3, #0
}
  400252:	4618      	mov	r0, r3
  400254:	46bd      	mov	sp, r7
  400256:	f85d 7b04 	ldr.w	r7, [sp], #4
  40025a:	4770      	bx	lr
  40025c:	20006518 	.word	0x20006518

00400260 <virtual_read_capacity>:
//!   It is ready                ->    CTRL_GOOD
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
Ctrl_status virtual_read_capacity(uint32_t *uint32_t_nb_sector)
{
  400260:	b480      	push	{r7}
  400262:	b083      	sub	sp, #12
  400264:	af00      	add	r7, sp, #0
  400266:	6078      	str	r0, [r7, #4]
	if (b_vmem_unloaded) {
  400268:	4b07      	ldr	r3, [pc, #28]	; (400288 <virtual_read_capacity+0x28>)
  40026a:	781b      	ldrb	r3, [r3, #0]
  40026c:	2b00      	cmp	r3, #0
  40026e:	d001      	beq.n	400274 <virtual_read_capacity+0x14>
		return CTRL_NO_PRESENT;
  400270:	2302      	movs	r3, #2
  400272:	e003      	b.n	40027c <virtual_read_capacity+0x1c>
	}

	if (VMEM_NB_SECTOR<8) {
		*uint32_t_nb_sector = 8-1;
	} else {
		*uint32_t_nb_sector = VMEM_NB_SECTOR- 1;
  400274:	687b      	ldr	r3, [r7, #4]
  400276:	222f      	movs	r2, #47	; 0x2f
  400278:	601a      	str	r2, [r3, #0]
	}
	return CTRL_GOOD;
  40027a:	2300      	movs	r3, #0
}
  40027c:	4618      	mov	r0, r3
  40027e:	370c      	adds	r7, #12
  400280:	46bd      	mov	sp, r7
  400282:	f85d 7b04 	ldr.w	r7, [sp], #4
  400286:	4770      	bx	lr
  400288:	20006518 	.word	0x20006518

0040028c <virtual_wr_protect>:
//! This function returns the write-protected mode
//!
//! @return true if the memory is protected
//!
bool virtual_wr_protect(void)
{
  40028c:	b480      	push	{r7}
  40028e:	af00      	add	r7, sp, #0
	return false;
  400290:	2300      	movs	r3, #0
}
  400292:	4618      	mov	r0, r3
  400294:	46bd      	mov	sp, r7
  400296:	f85d 7b04 	ldr.w	r7, [sp], #4
  40029a:	4770      	bx	lr

0040029c <virtual_removal>:
//! This function informs about the memory type
//!
//! @return true if the memory is removable
//!
bool virtual_removal(void)
{
  40029c:	b480      	push	{r7}
  40029e:	af00      	add	r7, sp, #0
	return true;
  4002a0:	2301      	movs	r3, #1
}
  4002a2:	4618      	mov	r0, r3
  4002a4:	46bd      	mov	sp, r7
  4002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002aa:	4770      	bx	lr

004002ac <virtual_unload>:
//! This function unloads/loads the memory
//!
//! @return true if the memory is unloaded
//!
bool virtual_unload(bool unload)
{
  4002ac:	b480      	push	{r7}
  4002ae:	b083      	sub	sp, #12
  4002b0:	af00      	add	r7, sp, #0
  4002b2:	4603      	mov	r3, r0
  4002b4:	71fb      	strb	r3, [r7, #7]
	b_vmem_unloaded = unload;
  4002b6:	4a05      	ldr	r2, [pc, #20]	; (4002cc <virtual_unload+0x20>)
  4002b8:	79fb      	ldrb	r3, [r7, #7]
  4002ba:	7013      	strb	r3, [r2, #0]
	return true;
  4002bc:	2301      	movs	r3, #1
}
  4002be:	4618      	mov	r0, r3
  4002c0:	370c      	adds	r7, #12
  4002c2:	46bd      	mov	sp, r7
  4002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
  4002c8:	4770      	bx	lr
  4002ca:	bf00      	nop
  4002cc:	20006518 	.word	0x20006518

004002d0 <virtual_usb_trans>:
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
static Ctrl_status virtual_usb_trans(uint32_t addr, uint16_t nb_sector,
		bool b_read)
{
  4002d0:	b590      	push	{r4, r7, lr}
  4002d2:	b085      	sub	sp, #20
  4002d4:	af00      	add	r7, sp, #0
  4002d6:	6078      	str	r0, [r7, #4]
  4002d8:	460b      	mov	r3, r1
  4002da:	807b      	strh	r3, [r7, #2]
  4002dc:	4613      	mov	r3, r2
  4002de:	707b      	strb	r3, [r7, #1]
	}
#else
	uint8_t *ptr_cram;
	uint8_t nb_sector_trans;

	if ((addr > VMEM_NB_SECTOR) ||  (addr + nb_sector > VMEM_NB_SECTOR)) {
  4002e0:	687b      	ldr	r3, [r7, #4]
  4002e2:	2b30      	cmp	r3, #48	; 0x30
  4002e4:	d804      	bhi.n	4002f0 <virtual_usb_trans+0x20>
  4002e6:	887a      	ldrh	r2, [r7, #2]
  4002e8:	687b      	ldr	r3, [r7, #4]
  4002ea:	4413      	add	r3, r2
  4002ec:	2b30      	cmp	r3, #48	; 0x30
  4002ee:	d925      	bls.n	40033c <virtual_usb_trans+0x6c>
		return CTRL_FAIL;
  4002f0:	2301      	movs	r3, #1
  4002f2:	e027      	b.n	400344 <virtual_usb_trans+0x74>
	}

	while (nb_sector) {
		// udi_msc_trans_block() is limited to 64KB
		nb_sector_trans = min(nb_sector, 64*(1024/VMEM_SECTOR_SIZE));
  4002f4:	887b      	ldrh	r3, [r7, #2]
  4002f6:	2b7f      	cmp	r3, #127	; 0x7f
  4002f8:	d802      	bhi.n	400300 <virtual_usb_trans+0x30>
  4002fa:	887b      	ldrh	r3, [r7, #2]
  4002fc:	b2db      	uxtb	r3, r3
  4002fe:	e000      	b.n	400302 <virtual_usb_trans+0x32>
  400300:	2380      	movs	r3, #128	; 0x80
  400302:	73fb      	strb	r3, [r7, #15]
		ptr_cram = &vmem_data[addr++ * VMEM_SECTOR_SIZE];
  400304:	687b      	ldr	r3, [r7, #4]
  400306:	1c5a      	adds	r2, r3, #1
  400308:	607a      	str	r2, [r7, #4]
  40030a:	025b      	lsls	r3, r3, #9
  40030c:	4a0f      	ldr	r2, [pc, #60]	; (40034c <virtual_usb_trans+0x7c>)
  40030e:	4413      	add	r3, r2
  400310:	60bb      	str	r3, [r7, #8]
		if (!udi_msc_trans_block( b_read, ptr_cram,
				nb_sector_trans*VMEM_SECTOR_SIZE, NULL)) {
  400312:	7bfb      	ldrb	r3, [r7, #15]
  400314:	025b      	lsls	r3, r3, #9
		if (!udi_msc_trans_block( b_read, ptr_cram,
  400316:	461a      	mov	r2, r3
  400318:	7878      	ldrb	r0, [r7, #1]
  40031a:	2300      	movs	r3, #0
  40031c:	68b9      	ldr	r1, [r7, #8]
  40031e:	4c0c      	ldr	r4, [pc, #48]	; (400350 <virtual_usb_trans+0x80>)
  400320:	47a0      	blx	r4
  400322:	4603      	mov	r3, r0
  400324:	f083 0301 	eor.w	r3, r3, #1
  400328:	b2db      	uxtb	r3, r3
  40032a:	2b00      	cmp	r3, #0
  40032c:	d001      	beq.n	400332 <virtual_usb_trans+0x62>
			return CTRL_FAIL; // transfer aborted
  40032e:	2301      	movs	r3, #1
  400330:	e008      	b.n	400344 <virtual_usb_trans+0x74>
		}
		nb_sector -= nb_sector_trans;
  400332:	7bfb      	ldrb	r3, [r7, #15]
  400334:	b29b      	uxth	r3, r3
  400336:	887a      	ldrh	r2, [r7, #2]
  400338:	1ad3      	subs	r3, r2, r3
  40033a:	807b      	strh	r3, [r7, #2]
	while (nb_sector) {
  40033c:	887b      	ldrh	r3, [r7, #2]
  40033e:	2b00      	cmp	r3, #0
  400340:	d1d8      	bne.n	4002f4 <virtual_usb_trans+0x24>
	}
#endif

	return CTRL_GOOD;
  400342:	2300      	movs	r3, #0
}
  400344:	4618      	mov	r0, r3
  400346:	3714      	adds	r7, #20
  400348:	46bd      	mov	sp, r7
  40034a:	bd90      	pop	{r4, r7, pc}
  40034c:	20000518 	.word	0x20000518
  400350:	00401711 	.word	0x00401711

00400354 <virtual_usb_read_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_read_10(uint32_t addr, uint16_t nb_sector)
{
  400354:	b580      	push	{r7, lr}
  400356:	b082      	sub	sp, #8
  400358:	af00      	add	r7, sp, #0
  40035a:	6078      	str	r0, [r7, #4]
  40035c:	460b      	mov	r3, r1
  40035e:	807b      	strh	r3, [r7, #2]
	return virtual_usb_trans(addr, nb_sector, true);
  400360:	887b      	ldrh	r3, [r7, #2]
  400362:	2201      	movs	r2, #1
  400364:	4619      	mov	r1, r3
  400366:	6878      	ldr	r0, [r7, #4]
  400368:	4b03      	ldr	r3, [pc, #12]	; (400378 <virtual_usb_read_10+0x24>)
  40036a:	4798      	blx	r3
  40036c:	4603      	mov	r3, r0
}
  40036e:	4618      	mov	r0, r3
  400370:	3708      	adds	r7, #8
  400372:	46bd      	mov	sp, r7
  400374:	bd80      	pop	{r7, pc}
  400376:	bf00      	nop
  400378:	004002d1 	.word	0x004002d1

0040037c <virtual_usb_write_10>:
//!   Memory unplug              ->    CTRL_NO_PRESENT
//!   Not initialized or changed ->    CTRL_BUSY
//!   An error occurred          ->    CTRL_FAIL
//!
Ctrl_status virtual_usb_write_10(uint32_t addr, uint16_t nb_sector)
{
  40037c:	b580      	push	{r7, lr}
  40037e:	b082      	sub	sp, #8
  400380:	af00      	add	r7, sp, #0
  400382:	6078      	str	r0, [r7, #4]
  400384:	460b      	mov	r3, r1
  400386:	807b      	strh	r3, [r7, #2]
	return virtual_usb_trans(addr, nb_sector, false);
  400388:	887b      	ldrh	r3, [r7, #2]
  40038a:	2200      	movs	r2, #0
  40038c:	4619      	mov	r1, r3
  40038e:	6878      	ldr	r0, [r7, #4]
  400390:	4b03      	ldr	r3, [pc, #12]	; (4003a0 <virtual_usb_write_10+0x24>)
  400392:	4798      	blx	r3
  400394:	4603      	mov	r3, r0
}
  400396:	4618      	mov	r0, r3
  400398:	3708      	adds	r7, #8
  40039a:	46bd      	mov	sp, r7
  40039c:	bd80      	pop	{r7, pc}
  40039e:	bf00      	nop
  4003a0:	004002d1 	.word	0x004002d1

004003a4 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ      BOARD_FREQ_MAINCK_XTAL    //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ    BOARD_FREQ_MAINCK_BYPASS  //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  4003a4:	b580      	push	{r7, lr}
  4003a6:	b082      	sub	sp, #8
  4003a8:	af00      	add	r7, sp, #0
  4003aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4003ac:	687b      	ldr	r3, [r7, #4]
  4003ae:	2b07      	cmp	r3, #7
  4003b0:	d831      	bhi.n	400416 <osc_enable+0x72>
  4003b2:	a201      	add	r2, pc, #4	; (adr r2, 4003b8 <osc_enable+0x14>)
  4003b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4003b8:	00400415 	.word	0x00400415
  4003bc:	004003d9 	.word	0x004003d9
  4003c0:	004003e1 	.word	0x004003e1
  4003c4:	004003e9 	.word	0x004003e9
  4003c8:	004003f1 	.word	0x004003f1
  4003cc:	004003f9 	.word	0x004003f9
  4003d0:	00400401 	.word	0x00400401
  4003d4:	0040040b 	.word	0x0040040b
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  4003d8:	2000      	movs	r0, #0
  4003da:	4b11      	ldr	r3, [pc, #68]	; (400420 <osc_enable+0x7c>)
  4003dc:	4798      	blx	r3
		break;
  4003de:	e01a      	b.n	400416 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  4003e0:	2001      	movs	r0, #1
  4003e2:	4b0f      	ldr	r3, [pc, #60]	; (400420 <osc_enable+0x7c>)
  4003e4:	4798      	blx	r3
		break;
  4003e6:	e016      	b.n	400416 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  4003e8:	2000      	movs	r0, #0
  4003ea:	4b0e      	ldr	r3, [pc, #56]	; (400424 <osc_enable+0x80>)
  4003ec:	4798      	blx	r3
		break;
  4003ee:	e012      	b.n	400416 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  4003f0:	2010      	movs	r0, #16
  4003f2:	4b0c      	ldr	r3, [pc, #48]	; (400424 <osc_enable+0x80>)
  4003f4:	4798      	blx	r3
		break;
  4003f6:	e00e      	b.n	400416 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  4003f8:	2020      	movs	r0, #32
  4003fa:	4b0a      	ldr	r3, [pc, #40]	; (400424 <osc_enable+0x80>)
  4003fc:	4798      	blx	r3
		break;
  4003fe:	e00a      	b.n	400416 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400400:	213e      	movs	r1, #62	; 0x3e
  400402:	2000      	movs	r0, #0
  400404:	4b08      	ldr	r3, [pc, #32]	; (400428 <osc_enable+0x84>)
  400406:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400408:	e005      	b.n	400416 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40040a:	213e      	movs	r1, #62	; 0x3e
  40040c:	2001      	movs	r0, #1
  40040e:	4b06      	ldr	r3, [pc, #24]	; (400428 <osc_enable+0x84>)
  400410:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400412:	e000      	b.n	400416 <osc_enable+0x72>
		break;
  400414:	bf00      	nop
	}
}
  400416:	bf00      	nop
  400418:	3708      	adds	r7, #8
  40041a:	46bd      	mov	sp, r7
  40041c:	bd80      	pop	{r7, pc}
  40041e:	bf00      	nop
  400420:	00402945 	.word	0x00402945
  400424:	004029b1 	.word	0x004029b1
  400428:	00402a21 	.word	0x00402a21

0040042c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  40042c:	b580      	push	{r7, lr}
  40042e:	b082      	sub	sp, #8
  400430:	af00      	add	r7, sp, #0
  400432:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400434:	687b      	ldr	r3, [r7, #4]
  400436:	2b07      	cmp	r3, #7
  400438:	d826      	bhi.n	400488 <osc_is_ready+0x5c>
  40043a:	a201      	add	r2, pc, #4	; (adr r2, 400440 <osc_is_ready+0x14>)
  40043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400440:	00400461 	.word	0x00400461
  400444:	00400465 	.word	0x00400465
  400448:	00400465 	.word	0x00400465
  40044c:	00400477 	.word	0x00400477
  400450:	00400477 	.word	0x00400477
  400454:	00400477 	.word	0x00400477
  400458:	00400477 	.word	0x00400477
  40045c:	00400477 	.word	0x00400477
	case OSC_SLCK_32K_RC:
		return 1;
  400460:	2301      	movs	r3, #1
  400462:	e012      	b.n	40048a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  400464:	4b0b      	ldr	r3, [pc, #44]	; (400494 <osc_is_ready+0x68>)
  400466:	4798      	blx	r3
  400468:	4603      	mov	r3, r0
  40046a:	2b00      	cmp	r3, #0
  40046c:	bf14      	ite	ne
  40046e:	2301      	movne	r3, #1
  400470:	2300      	moveq	r3, #0
  400472:	b2db      	uxtb	r3, r3
  400474:	e009      	b.n	40048a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400476:	4b08      	ldr	r3, [pc, #32]	; (400498 <osc_is_ready+0x6c>)
  400478:	4798      	blx	r3
  40047a:	4603      	mov	r3, r0
  40047c:	2b00      	cmp	r3, #0
  40047e:	bf14      	ite	ne
  400480:	2301      	movne	r3, #1
  400482:	2300      	moveq	r3, #0
  400484:	b2db      	uxtb	r3, r3
  400486:	e000      	b.n	40048a <osc_is_ready+0x5e>
	}

	return 0;
  400488:	2300      	movs	r3, #0
}
  40048a:	4618      	mov	r0, r3
  40048c:	3708      	adds	r7, #8
  40048e:	46bd      	mov	sp, r7
  400490:	bd80      	pop	{r7, pc}
  400492:	bf00      	nop
  400494:	0040297d 	.word	0x0040297d
  400498:	00402a99 	.word	0x00402a99

0040049c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  40049c:	b480      	push	{r7}
  40049e:	b083      	sub	sp, #12
  4004a0:	af00      	add	r7, sp, #0
  4004a2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4004a4:	687b      	ldr	r3, [r7, #4]
  4004a6:	2b07      	cmp	r3, #7
  4004a8:	d825      	bhi.n	4004f6 <osc_get_rate+0x5a>
  4004aa:	a201      	add	r2, pc, #4	; (adr r2, 4004b0 <osc_get_rate+0x14>)
  4004ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4004b0:	004004d1 	.word	0x004004d1
  4004b4:	004004d7 	.word	0x004004d7
  4004b8:	004004dd 	.word	0x004004dd
  4004bc:	004004e3 	.word	0x004004e3
  4004c0:	004004e7 	.word	0x004004e7
  4004c4:	004004eb 	.word	0x004004eb
  4004c8:	004004ef 	.word	0x004004ef
  4004cc:	004004f3 	.word	0x004004f3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4004d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4004d4:	e010      	b.n	4004f8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4004d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4004da:	e00d      	b.n	4004f8 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4004dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4004e0:	e00a      	b.n	4004f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4004e2:	4b08      	ldr	r3, [pc, #32]	; (400504 <osc_get_rate+0x68>)
  4004e4:	e008      	b.n	4004f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  4004e6:	4b08      	ldr	r3, [pc, #32]	; (400508 <osc_get_rate+0x6c>)
  4004e8:	e006      	b.n	4004f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  4004ea:	4b08      	ldr	r3, [pc, #32]	; (40050c <osc_get_rate+0x70>)
  4004ec:	e004      	b.n	4004f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  4004ee:	4b07      	ldr	r3, [pc, #28]	; (40050c <osc_get_rate+0x70>)
  4004f0:	e002      	b.n	4004f8 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  4004f2:	4b06      	ldr	r3, [pc, #24]	; (40050c <osc_get_rate+0x70>)
  4004f4:	e000      	b.n	4004f8 <osc_get_rate+0x5c>
	}

	return 0;
  4004f6:	2300      	movs	r3, #0
}
  4004f8:	4618      	mov	r0, r3
  4004fa:	370c      	adds	r7, #12
  4004fc:	46bd      	mov	sp, r7
  4004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400502:	4770      	bx	lr
  400504:	003d0900 	.word	0x003d0900
  400508:	007a1200 	.word	0x007a1200
  40050c:	00b71b00 	.word	0x00b71b00

00400510 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400510:	b580      	push	{r7, lr}
  400512:	b082      	sub	sp, #8
  400514:	af00      	add	r7, sp, #0
  400516:	4603      	mov	r3, r0
  400518:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40051a:	bf00      	nop
  40051c:	79fb      	ldrb	r3, [r7, #7]
  40051e:	4618      	mov	r0, r3
  400520:	4b05      	ldr	r3, [pc, #20]	; (400538 <osc_wait_ready+0x28>)
  400522:	4798      	blx	r3
  400524:	4603      	mov	r3, r0
  400526:	f083 0301 	eor.w	r3, r3, #1
  40052a:	b2db      	uxtb	r3, r3
  40052c:	2b00      	cmp	r3, #0
  40052e:	d1f5      	bne.n	40051c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  400530:	bf00      	nop
  400532:	3708      	adds	r7, #8
  400534:	46bd      	mov	sp, r7
  400536:	bd80      	pop	{r7, pc}
  400538:	0040042d 	.word	0x0040042d

0040053c <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40053c:	b580      	push	{r7, lr}
  40053e:	b086      	sub	sp, #24
  400540:	af00      	add	r7, sp, #0
  400542:	60f8      	str	r0, [r7, #12]
  400544:	607a      	str	r2, [r7, #4]
  400546:	603b      	str	r3, [r7, #0]
  400548:	460b      	mov	r3, r1
  40054a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  40054c:	7afb      	ldrb	r3, [r7, #11]
  40054e:	4618      	mov	r0, r3
  400550:	4b0d      	ldr	r3, [pc, #52]	; (400588 <pll_config_init+0x4c>)
  400552:	4798      	blx	r3
  400554:	4602      	mov	r2, r0
  400556:	687b      	ldr	r3, [r7, #4]
  400558:	fbb2 f3f3 	udiv	r3, r2, r3
  40055c:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  40055e:	697b      	ldr	r3, [r7, #20]
  400560:	683a      	ldr	r2, [r7, #0]
  400562:	fb02 f303 	mul.w	r3, r2, r3
  400566:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | \
  400568:	683b      	ldr	r3, [r7, #0]
  40056a:	3b01      	subs	r3, #1
  40056c:	041a      	lsls	r2, r3, #16
  40056e:	4b07      	ldr	r3, [pc, #28]	; (40058c <pll_config_init+0x50>)
  400570:	4013      	ands	r3, r2
  400572:	687a      	ldr	r2, [r7, #4]
  400574:	b2d2      	uxtb	r2, r2
  400576:	4313      	orrs	r3, r2
  400578:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  40057c:	68fb      	ldr	r3, [r7, #12]
  40057e:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
}
  400580:	bf00      	nop
  400582:	3718      	adds	r7, #24
  400584:	46bd      	mov	sp, r7
  400586:	bd80      	pop	{r7, pc}
  400588:	0040049d 	.word	0x0040049d
  40058c:	07ff0000 	.word	0x07ff0000

00400590 <pll_enable>:
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400590:	b580      	push	{r7, lr}
  400592:	b082      	sub	sp, #8
  400594:	af00      	add	r7, sp, #0
  400596:	6078      	str	r0, [r7, #4]
  400598:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  40059a:	683b      	ldr	r3, [r7, #0]
  40059c:	2b00      	cmp	r3, #0
  40059e:	d107      	bne.n	4005b0 <pll_enable+0x20>
		pmc_disable_pllack(); // Always stop PLL first!
  4005a0:	4b05      	ldr	r3, [pc, #20]	; (4005b8 <pll_enable+0x28>)
  4005a2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4005a4:	4a05      	ldr	r2, [pc, #20]	; (4005bc <pll_enable+0x2c>)
  4005a6:	687b      	ldr	r3, [r7, #4]
  4005a8:	681b      	ldr	r3, [r3, #0]
  4005aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  4005ae:	6293      	str	r3, [r2, #40]	; 0x28
	}
}
  4005b0:	bf00      	nop
  4005b2:	3708      	adds	r7, #8
  4005b4:	46bd      	mov	sp, r7
  4005b6:	bd80      	pop	{r7, pc}
  4005b8:	00402ab5 	.word	0x00402ab5
  4005bc:	400e0400 	.word	0x400e0400

004005c0 <pll_is_locked>:
		pmc_disable_pllack();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  4005c0:	b580      	push	{r7, lr}
  4005c2:	b082      	sub	sp, #8
  4005c4:	af00      	add	r7, sp, #0
  4005c6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	UNUSED(ul_pll_id);
	return pmc_is_locked_pllack();
  4005c8:	4b03      	ldr	r3, [pc, #12]	; (4005d8 <pll_is_locked+0x18>)
  4005ca:	4798      	blx	r3
  4005cc:	4603      	mov	r3, r0
}
  4005ce:	4618      	mov	r0, r3
  4005d0:	3708      	adds	r7, #8
  4005d2:	46bd      	mov	sp, r7
  4005d4:	bd80      	pop	{r7, pc}
  4005d6:	bf00      	nop
  4005d8:	00402ad1 	.word	0x00402ad1

004005dc <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  4005dc:	b580      	push	{r7, lr}
  4005de:	b082      	sub	sp, #8
  4005e0:	af00      	add	r7, sp, #0
  4005e2:	4603      	mov	r3, r0
  4005e4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  4005e6:	79fb      	ldrb	r3, [r7, #7]
  4005e8:	3b03      	subs	r3, #3
  4005ea:	2b04      	cmp	r3, #4
  4005ec:	d808      	bhi.n	400600 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  4005ee:	79fb      	ldrb	r3, [r7, #7]
  4005f0:	4618      	mov	r0, r3
  4005f2:	4b06      	ldr	r3, [pc, #24]	; (40060c <pll_enable_source+0x30>)
  4005f4:	4798      	blx	r3
		osc_wait_ready(e_src);
  4005f6:	79fb      	ldrb	r3, [r7, #7]
  4005f8:	4618      	mov	r0, r3
  4005fa:	4b05      	ldr	r3, [pc, #20]	; (400610 <pll_enable_source+0x34>)
  4005fc:	4798      	blx	r3
		break;
  4005fe:	e000      	b.n	400602 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  400600:	bf00      	nop
	}
}
  400602:	bf00      	nop
  400604:	3708      	adds	r7, #8
  400606:	46bd      	mov	sp, r7
  400608:	bd80      	pop	{r7, pc}
  40060a:	bf00      	nop
  40060c:	004003a5 	.word	0x004003a5
  400610:	00400511 	.word	0x00400511

00400614 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  400614:	b580      	push	{r7, lr}
  400616:	b082      	sub	sp, #8
  400618:	af00      	add	r7, sp, #0
  40061a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40061c:	bf00      	nop
  40061e:	6878      	ldr	r0, [r7, #4]
  400620:	4b04      	ldr	r3, [pc, #16]	; (400634 <pll_wait_for_lock+0x20>)
  400622:	4798      	blx	r3
  400624:	4603      	mov	r3, r0
  400626:	2b00      	cmp	r3, #0
  400628:	d0f9      	beq.n	40061e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  40062a:	2300      	movs	r3, #0
}
  40062c:	4618      	mov	r0, r3
  40062e:	3708      	adds	r7, #8
  400630:	46bd      	mov	sp, r7
  400632:	bd80      	pop	{r7, pc}
  400634:	004005c1 	.word	0x004005c1

00400638 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400638:	b580      	push	{r7, lr}
  40063a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  40063c:	2006      	movs	r0, #6
  40063e:	4b03      	ldr	r3, [pc, #12]	; (40064c <sysclk_get_main_hz+0x14>)
  400640:	4798      	blx	r3
  400642:	4603      	mov	r3, r0
  400644:	011b      	lsls	r3, r3, #4

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400646:	4618      	mov	r0, r3
  400648:	bd80      	pop	{r7, pc}
  40064a:	bf00      	nop
  40064c:	0040049d 	.word	0x0040049d

00400650 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400650:	b580      	push	{r7, lr}
  400652:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400654:	4b02      	ldr	r3, [pc, #8]	; (400660 <sysclk_get_cpu_hz+0x10>)
  400656:	4798      	blx	r3
  400658:	4603      	mov	r3, r0
  40065a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  40065c:	4618      	mov	r0, r3
  40065e:	bd80      	pop	{r7, pc}
  400660:	00400639 	.word	0x00400639

00400664 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
  400664:	b590      	push	{r4, r7, lr}
  400666:	b083      	sub	sp, #12
  400668:	af00      	add	r7, sp, #0

#ifdef CONFIG_PLL0_SOURCE
	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_PLL0) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  40066a:	2006      	movs	r0, #6
  40066c:	4b0c      	ldr	r3, [pc, #48]	; (4006a0 <sysclk_enable_usb+0x3c>)
  40066e:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400670:	1d38      	adds	r0, r7, #4
  400672:	2310      	movs	r3, #16
  400674:	2201      	movs	r2, #1
  400676:	2106      	movs	r1, #6
  400678:	4c0a      	ldr	r4, [pc, #40]	; (4006a4 <sysclk_enable_usb+0x40>)
  40067a:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  40067c:	1d3b      	adds	r3, r7, #4
  40067e:	2100      	movs	r1, #0
  400680:	4618      	mov	r0, r3
  400682:	4b09      	ldr	r3, [pc, #36]	; (4006a8 <sysclk_enable_usb+0x44>)
  400684:	4798      	blx	r3
		pll_wait_for_lock(0);
  400686:	2000      	movs	r0, #0
  400688:	4b08      	ldr	r3, [pc, #32]	; (4006ac <sysclk_enable_usb+0x48>)
  40068a:	4798      	blx	r3
		pmc_switch_udpck_to_pllack(CONFIG_USBCLK_DIV - 1);
  40068c:	2003      	movs	r0, #3
  40068e:	4b08      	ldr	r3, [pc, #32]	; (4006b0 <sysclk_enable_usb+0x4c>)
  400690:	4798      	blx	r3
		pmc_enable_udpck();
  400692:	4b08      	ldr	r3, [pc, #32]	; (4006b4 <sysclk_enable_usb+0x50>)
  400694:	4798      	blx	r3
		return;
  400696:	bf00      	nop
	}
#endif
}
  400698:	370c      	adds	r7, #12
  40069a:	46bd      	mov	sp, r7
  40069c:	bd90      	pop	{r4, r7, pc}
  40069e:	bf00      	nop
  4006a0:	004005dd 	.word	0x004005dd
  4006a4:	0040053d 	.word	0x0040053d
  4006a8:	00400591 	.word	0x00400591
  4006ac:	00400615 	.word	0x00400615
  4006b0:	00402bf5 	.word	0x00402bf5
  4006b4:	00402c19 	.word	0x00402c19

004006b8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4006b8:	b590      	push	{r4, r7, lr}
  4006ba:	b083      	sub	sp, #12
  4006bc:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4006be:	4811      	ldr	r0, [pc, #68]	; (400704 <sysclk_init+0x4c>)
  4006c0:	4b11      	ldr	r3, [pc, #68]	; (400708 <sysclk_init+0x50>)
  4006c2:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  4006c4:	2006      	movs	r0, #6
  4006c6:	4b11      	ldr	r3, [pc, #68]	; (40070c <sysclk_init+0x54>)
  4006c8:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  4006ca:	1d38      	adds	r0, r7, #4
  4006cc:	2310      	movs	r3, #16
  4006ce:	2201      	movs	r2, #1
  4006d0:	2106      	movs	r1, #6
  4006d2:	4c0f      	ldr	r4, [pc, #60]	; (400710 <sysclk_init+0x58>)
  4006d4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  4006d6:	1d3b      	adds	r3, r7, #4
  4006d8:	2100      	movs	r1, #0
  4006da:	4618      	mov	r0, r3
  4006dc:	4b0d      	ldr	r3, [pc, #52]	; (400714 <sysclk_init+0x5c>)
  4006de:	4798      	blx	r3
		pll_wait_for_lock(0);
  4006e0:	2000      	movs	r0, #0
  4006e2:	4b0d      	ldr	r3, [pc, #52]	; (400718 <sysclk_init+0x60>)
  4006e4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4006e6:	2010      	movs	r0, #16
  4006e8:	4b0c      	ldr	r3, [pc, #48]	; (40071c <sysclk_init+0x64>)
  4006ea:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4006ec:	4b0c      	ldr	r3, [pc, #48]	; (400720 <sysclk_init+0x68>)
  4006ee:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4006f0:	4b0c      	ldr	r3, [pc, #48]	; (400724 <sysclk_init+0x6c>)
  4006f2:	4798      	blx	r3
  4006f4:	4603      	mov	r3, r0
  4006f6:	4618      	mov	r0, r3
  4006f8:	4b03      	ldr	r3, [pc, #12]	; (400708 <sysclk_init+0x50>)
  4006fa:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  4006fc:	bf00      	nop
  4006fe:	370c      	adds	r7, #12
  400700:	46bd      	mov	sp, r7
  400702:	bd90      	pop	{r4, r7, pc}
  400704:	07270e00 	.word	0x07270e00
  400708:	004055dd 	.word	0x004055dd
  40070c:	004005dd 	.word	0x004005dd
  400710:	0040053d 	.word	0x0040053d
  400714:	00400591 	.word	0x00400591
  400718:	00400615 	.word	0x00400615
  40071c:	004028c1 	.word	0x004028c1
  400720:	00405475 	.word	0x00405475
  400724:	00400651 	.word	0x00400651

00400728 <ctrl_access_init>:


#ifdef FREERTOS_USED

bool ctrl_access_init(void)
{
  400728:	b598      	push	{r3, r4, r7, lr}
  40072a:	af00      	add	r7, sp, #0
  // If the handle to the protecting semaphore is not valid,
  if (!ctrl_access_semphr)
  40072c:	4b0f      	ldr	r3, [pc, #60]	; (40076c <ctrl_access_init+0x44>)
  40072e:	681b      	ldr	r3, [r3, #0]
  400730:	2b00      	cmp	r3, #0
  400732:	d118      	bne.n	400766 <ctrl_access_init+0x3e>
  {
    // try to create the semaphore.
    vSemaphoreCreateBinary(ctrl_access_semphr);
  400734:	2203      	movs	r2, #3
  400736:	2100      	movs	r1, #0
  400738:	2001      	movs	r0, #1
  40073a:	4b0d      	ldr	r3, [pc, #52]	; (400770 <ctrl_access_init+0x48>)
  40073c:	4798      	blx	r3
  40073e:	4602      	mov	r2, r0
  400740:	4b0a      	ldr	r3, [pc, #40]	; (40076c <ctrl_access_init+0x44>)
  400742:	601a      	str	r2, [r3, #0]
  400744:	4b09      	ldr	r3, [pc, #36]	; (40076c <ctrl_access_init+0x44>)
  400746:	681b      	ldr	r3, [r3, #0]
  400748:	2b00      	cmp	r3, #0
  40074a:	d006      	beq.n	40075a <ctrl_access_init+0x32>
  40074c:	4b07      	ldr	r3, [pc, #28]	; (40076c <ctrl_access_init+0x44>)
  40074e:	6818      	ldr	r0, [r3, #0]
  400750:	2300      	movs	r3, #0
  400752:	2200      	movs	r2, #0
  400754:	2100      	movs	r1, #0
  400756:	4c07      	ldr	r4, [pc, #28]	; (400774 <ctrl_access_init+0x4c>)
  400758:	47a0      	blx	r4

    // If the semaphore could not be created, there is no backup solution.
    if (!ctrl_access_semphr) return false;
  40075a:	4b04      	ldr	r3, [pc, #16]	; (40076c <ctrl_access_init+0x44>)
  40075c:	681b      	ldr	r3, [r3, #0]
  40075e:	2b00      	cmp	r3, #0
  400760:	d101      	bne.n	400766 <ctrl_access_init+0x3e>
  400762:	2300      	movs	r3, #0
  400764:	e000      	b.n	400768 <ctrl_access_init+0x40>
  }

  return true;
  400766:	2301      	movs	r3, #1
}
  400768:	4618      	mov	r0, r3
  40076a:	bd98      	pop	{r3, r4, r7, pc}
  40076c:	2000651c 	.word	0x2000651c
  400770:	00405ba1 	.word	0x00405ba1
  400774:	00405c45 	.word	0x00405c45

00400778 <ctrl_access_lock>:
/*! \brief Locks accesses to LUNs.
 *
 * \return \c true if the access was successfully locked, else \c false.
 */
static bool ctrl_access_lock(void)
{
  400778:	b580      	push	{r7, lr}
  40077a:	af00      	add	r7, sp, #0
  // If the semaphore could not be created, there is no backup solution.
  if (!ctrl_access_semphr) return false;
  40077c:	4b09      	ldr	r3, [pc, #36]	; (4007a4 <ctrl_access_lock+0x2c>)
  40077e:	681b      	ldr	r3, [r3, #0]
  400780:	2b00      	cmp	r3, #0
  400782:	d101      	bne.n	400788 <ctrl_access_lock+0x10>
  400784:	2300      	movs	r3, #0
  400786:	e00b      	b.n	4007a0 <ctrl_access_lock+0x28>

  // Wait for the semaphore.
  while (!xSemaphoreTake(ctrl_access_semphr, portMAX_DELAY));
  400788:	bf00      	nop
  40078a:	4b06      	ldr	r3, [pc, #24]	; (4007a4 <ctrl_access_lock+0x2c>)
  40078c:	681b      	ldr	r3, [r3, #0]
  40078e:	f04f 31ff 	mov.w	r1, #4294967295
  400792:	4618      	mov	r0, r3
  400794:	4b04      	ldr	r3, [pc, #16]	; (4007a8 <ctrl_access_lock+0x30>)
  400796:	4798      	blx	r3
  400798:	4603      	mov	r3, r0
  40079a:	2b00      	cmp	r3, #0
  40079c:	d0f5      	beq.n	40078a <ctrl_access_lock+0x12>

  return true;
  40079e:	2301      	movs	r3, #1
}
  4007a0:	4618      	mov	r0, r3
  4007a2:	bd80      	pop	{r7, pc}
  4007a4:	2000651c 	.word	0x2000651c
  4007a8:	00405e71 	.word	0x00405e71

004007ac <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
  4007ac:	b480      	push	{r7}
  4007ae:	af00      	add	r7, sp, #0

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
  4007b0:	2301      	movs	r3, #1
#endif
}
  4007b2:	4618      	mov	r0, r3
  4007b4:	46bd      	mov	sp, r7
  4007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4007ba:	4770      	bx	lr

004007bc <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
  4007bc:	b590      	push	{r4, r7, lr}
  4007be:	b085      	sub	sp, #20
  4007c0:	af00      	add	r7, sp, #0
  4007c2:	4603      	mov	r3, r0
  4007c4:	71fb      	strb	r3, [r7, #7]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;
  4007c6:	4b11      	ldr	r3, [pc, #68]	; (40080c <mem_test_unit_ready+0x50>)
  4007c8:	4798      	blx	r3
  4007ca:	4603      	mov	r3, r0
  4007cc:	f083 0301 	eor.w	r3, r3, #1
  4007d0:	b2db      	uxtb	r3, r3
  4007d2:	2b00      	cmp	r3, #0
  4007d4:	d001      	beq.n	4007da <mem_test_unit_ready+0x1e>
  4007d6:	2301      	movs	r3, #1
  4007d8:	e014      	b.n	400804 <mem_test_unit_ready+0x48>

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
  4007da:	79fb      	ldrb	r3, [r7, #7]
  4007dc:	2b00      	cmp	r3, #0
  4007de:	d107      	bne.n	4007f0 <mem_test_unit_ready+0x34>
  4007e0:	79fb      	ldrb	r3, [r7, #7]
  4007e2:	4a0b      	ldr	r2, [pc, #44]	; (400810 <mem_test_unit_ready+0x54>)
  4007e4:	015b      	lsls	r3, r3, #5
  4007e6:	4413      	add	r3, r2
  4007e8:	681b      	ldr	r3, [r3, #0]
  4007ea:	4798      	blx	r3
  4007ec:	4603      	mov	r3, r0
  4007ee:	e000      	b.n	4007f2 <mem_test_unit_ready+0x36>
  4007f0:	2301      	movs	r3, #1
  status =
  4007f2:	73fb      	strb	r3, [r7, #15]
                             Lun_usb_test_unit_ready(lun - LUN_ID_USB);
#else
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();
  4007f4:	4b07      	ldr	r3, [pc, #28]	; (400814 <mem_test_unit_ready+0x58>)
  4007f6:	6818      	ldr	r0, [r3, #0]
  4007f8:	2300      	movs	r3, #0
  4007fa:	2200      	movs	r2, #0
  4007fc:	2100      	movs	r1, #0
  4007fe:	4c06      	ldr	r4, [pc, #24]	; (400818 <mem_test_unit_ready+0x5c>)
  400800:	47a0      	blx	r4

  return status;
  400802:	7bfb      	ldrb	r3, [r7, #15]
}
  400804:	4618      	mov	r0, r3
  400806:	3714      	adds	r7, #20
  400808:	46bd      	mov	sp, r7
  40080a:	bd90      	pop	{r4, r7, pc}
  40080c:	00400779 	.word	0x00400779
  400810:	0040719c 	.word	0x0040719c
  400814:	2000651c 	.word	0x2000651c
  400818:	00405c45 	.word	0x00405c45

0040081c <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
  40081c:	b590      	push	{r4, r7, lr}
  40081e:	b085      	sub	sp, #20
  400820:	af00      	add	r7, sp, #0
  400822:	4603      	mov	r3, r0
  400824:	6039      	str	r1, [r7, #0]
  400826:	71fb      	strb	r3, [r7, #7]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;
  400828:	4b12      	ldr	r3, [pc, #72]	; (400874 <mem_read_capacity+0x58>)
  40082a:	4798      	blx	r3
  40082c:	4603      	mov	r3, r0
  40082e:	f083 0301 	eor.w	r3, r3, #1
  400832:	b2db      	uxtb	r3, r3
  400834:	2b00      	cmp	r3, #0
  400836:	d001      	beq.n	40083c <mem_read_capacity+0x20>
  400838:	2301      	movs	r3, #1
  40083a:	e016      	b.n	40086a <mem_read_capacity+0x4e>

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
  40083c:	79fb      	ldrb	r3, [r7, #7]
  40083e:	2b00      	cmp	r3, #0
  400840:	d109      	bne.n	400856 <mem_read_capacity+0x3a>
  400842:	79fb      	ldrb	r3, [r7, #7]
  400844:	4a0c      	ldr	r2, [pc, #48]	; (400878 <mem_read_capacity+0x5c>)
  400846:	015b      	lsls	r3, r3, #5
  400848:	4413      	add	r3, r2
  40084a:	3304      	adds	r3, #4
  40084c:	681b      	ldr	r3, [r3, #0]
  40084e:	6838      	ldr	r0, [r7, #0]
  400850:	4798      	blx	r3
  400852:	4603      	mov	r3, r0
  400854:	e000      	b.n	400858 <mem_read_capacity+0x3c>
  400856:	2301      	movs	r3, #1
  status =
  400858:	73fb      	strb	r3, [r7, #15]
                             Lun_usb_read_capacity(lun - LUN_ID_USB, u32_nb_sector);
#else
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();
  40085a:	4b08      	ldr	r3, [pc, #32]	; (40087c <mem_read_capacity+0x60>)
  40085c:	6818      	ldr	r0, [r3, #0]
  40085e:	2300      	movs	r3, #0
  400860:	2200      	movs	r2, #0
  400862:	2100      	movs	r1, #0
  400864:	4c06      	ldr	r4, [pc, #24]	; (400880 <mem_read_capacity+0x64>)
  400866:	47a0      	blx	r4

  return status;
  400868:	7bfb      	ldrb	r3, [r7, #15]
}
  40086a:	4618      	mov	r0, r3
  40086c:	3714      	adds	r7, #20
  40086e:	46bd      	mov	sp, r7
  400870:	bd90      	pop	{r4, r7, pc}
  400872:	bf00      	nop
  400874:	00400779 	.word	0x00400779
  400878:	0040719c 	.word	0x0040719c
  40087c:	2000651c 	.word	0x2000651c
  400880:	00405c45 	.word	0x00405c45

00400884 <mem_unload>:
  return sector_size;
}


bool mem_unload(U8 lun, bool unload)
{
  400884:	b590      	push	{r4, r7, lr}
  400886:	b085      	sub	sp, #20
  400888:	af00      	add	r7, sp, #0
  40088a:	4603      	mov	r3, r0
  40088c:	460a      	mov	r2, r1
  40088e:	71fb      	strb	r3, [r7, #7]
  400890:	4613      	mov	r3, r2
  400892:	71bb      	strb	r3, [r7, #6]
  bool unloaded;
#if !MAX_LUN || !defined(Lun_usb_unload)
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return false;
  400894:	4b1f      	ldr	r3, [pc, #124]	; (400914 <mem_unload+0x90>)
  400896:	4798      	blx	r3
  400898:	4603      	mov	r3, r0
  40089a:	f083 0301 	eor.w	r3, r3, #1
  40089e:	b2db      	uxtb	r3, r3
  4008a0:	2b00      	cmp	r3, #0
  4008a2:	d001      	beq.n	4008a8 <mem_unload+0x24>
  4008a4:	2300      	movs	r3, #0
  4008a6:	e031      	b.n	40090c <mem_unload+0x88>

  unloaded =
#if MAX_LUN
          (lun < MAX_LUN) ?
              (lun_desc[lun].unload ?
                  lun_desc[lun].unload(unload) : !unload) :
  4008a8:	79fb      	ldrb	r3, [r7, #7]
  4008aa:	2b00      	cmp	r3, #0
  4008ac:	d124      	bne.n	4008f8 <mem_unload+0x74>
              (lun_desc[lun].unload ?
  4008ae:	79fb      	ldrb	r3, [r7, #7]
  4008b0:	4a19      	ldr	r2, [pc, #100]	; (400918 <mem_unload+0x94>)
  4008b2:	015b      	lsls	r3, r3, #5
  4008b4:	4413      	add	r3, r2
  4008b6:	3308      	adds	r3, #8
  4008b8:	681b      	ldr	r3, [r3, #0]
                  lun_desc[lun].unload(unload) : !unload) :
  4008ba:	2b00      	cmp	r3, #0
  4008bc:	d00f      	beq.n	4008de <mem_unload+0x5a>
  4008be:	79fb      	ldrb	r3, [r7, #7]
  4008c0:	4a15      	ldr	r2, [pc, #84]	; (400918 <mem_unload+0x94>)
  4008c2:	015b      	lsls	r3, r3, #5
  4008c4:	4413      	add	r3, r2
  4008c6:	3308      	adds	r3, #8
  4008c8:	681b      	ldr	r3, [r3, #0]
  4008ca:	79ba      	ldrb	r2, [r7, #6]
  4008cc:	4610      	mov	r0, r2
  4008ce:	4798      	blx	r3
  4008d0:	4603      	mov	r3, r0
  4008d2:	2b00      	cmp	r3, #0
  4008d4:	bf14      	ite	ne
  4008d6:	2301      	movne	r3, #1
  4008d8:	2300      	moveq	r3, #0
  4008da:	b2db      	uxtb	r3, r3
  4008dc:	e00d      	b.n	4008fa <mem_unload+0x76>
              Lun_usb_unload(lun - LUN_ID_USB, unload);
# else
              !unload; /* Can not unload: load success, unload fail */
# endif
#else
              false; /* No mem, unload/load fail */
  4008de:	79bb      	ldrb	r3, [r7, #6]
  4008e0:	2b00      	cmp	r3, #0
  4008e2:	bf14      	ite	ne
  4008e4:	2301      	movne	r3, #1
  4008e6:	2300      	moveq	r3, #0
  4008e8:	b2db      	uxtb	r3, r3
  4008ea:	f083 0301 	eor.w	r3, r3, #1
  4008ee:	b2db      	uxtb	r3, r3
                  lun_desc[lun].unload(unload) : !unload) :
  4008f0:	f003 0301 	and.w	r3, r3, #1
  4008f4:	b2db      	uxtb	r3, r3
  4008f6:	e000      	b.n	4008fa <mem_unload+0x76>
  4008f8:	2300      	movs	r3, #0
  unloaded =
  4008fa:	73fb      	strb	r3, [r7, #15]
#endif

  Ctrl_access_unlock();
  4008fc:	4b07      	ldr	r3, [pc, #28]	; (40091c <mem_unload+0x98>)
  4008fe:	6818      	ldr	r0, [r3, #0]
  400900:	2300      	movs	r3, #0
  400902:	2200      	movs	r2, #0
  400904:	2100      	movs	r1, #0
  400906:	4c06      	ldr	r4, [pc, #24]	; (400920 <mem_unload+0x9c>)
  400908:	47a0      	blx	r4

  return unloaded;
  40090a:	7bfb      	ldrb	r3, [r7, #15]
}
  40090c:	4618      	mov	r0, r3
  40090e:	3714      	adds	r7, #20
  400910:	46bd      	mov	sp, r7
  400912:	bd90      	pop	{r4, r7, pc}
  400914:	00400779 	.word	0x00400779
  400918:	0040719c 	.word	0x0040719c
  40091c:	2000651c 	.word	0x2000651c
  400920:	00405c45 	.word	0x00405c45

00400924 <mem_wr_protect>:

bool mem_wr_protect(U8 lun)
{
  400924:	b590      	push	{r4, r7, lr}
  400926:	b085      	sub	sp, #20
  400928:	af00      	add	r7, sp, #0
  40092a:	4603      	mov	r3, r0
  40092c:	71fb      	strb	r3, [r7, #7]
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;
  40092e:	4b13      	ldr	r3, [pc, #76]	; (40097c <mem_wr_protect+0x58>)
  400930:	4798      	blx	r3
  400932:	4603      	mov	r3, r0
  400934:	f083 0301 	eor.w	r3, r3, #1
  400938:	b2db      	uxtb	r3, r3
  40093a:	2b00      	cmp	r3, #0
  40093c:	d001      	beq.n	400942 <mem_wr_protect+0x1e>
  40093e:	2301      	movs	r3, #1
  400940:	e018      	b.n	400974 <mem_wr_protect+0x50>

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
  400942:	79fb      	ldrb	r3, [r7, #7]
  400944:	2b00      	cmp	r3, #0
  400946:	d109      	bne.n	40095c <mem_wr_protect+0x38>
  400948:	79fb      	ldrb	r3, [r7, #7]
  40094a:	4a0d      	ldr	r2, [pc, #52]	; (400980 <mem_wr_protect+0x5c>)
  40094c:	015b      	lsls	r3, r3, #5
  40094e:	4413      	add	r3, r2
  400950:	330c      	adds	r3, #12
  400952:	681b      	ldr	r3, [r3, #0]
  400954:	4798      	blx	r3
  400956:	4603      	mov	r3, r0
  400958:	2b00      	cmp	r3, #0
  40095a:	d001      	beq.n	400960 <mem_wr_protect+0x3c>
  40095c:	2301      	movs	r3, #1
  40095e:	e000      	b.n	400962 <mem_wr_protect+0x3e>
  400960:	2300      	movs	r3, #0
  wr_protect =
  400962:	73fb      	strb	r3, [r7, #15]
                                 Lun_usb_wr_protect(lun - LUN_ID_USB);
#else
                                 true;
#endif

  Ctrl_access_unlock();
  400964:	4b07      	ldr	r3, [pc, #28]	; (400984 <mem_wr_protect+0x60>)
  400966:	6818      	ldr	r0, [r3, #0]
  400968:	2300      	movs	r3, #0
  40096a:	2200      	movs	r2, #0
  40096c:	2100      	movs	r1, #0
  40096e:	4c06      	ldr	r4, [pc, #24]	; (400988 <mem_wr_protect+0x64>)
  400970:	47a0      	blx	r4

  return wr_protect;
  400972:	7bfb      	ldrb	r3, [r7, #15]
}
  400974:	4618      	mov	r0, r3
  400976:	3714      	adds	r7, #20
  400978:	46bd      	mov	sp, r7
  40097a:	bd90      	pop	{r4, r7, pc}
  40097c:	00400779 	.word	0x00400779
  400980:	0040719c 	.word	0x0040719c
  400984:	2000651c 	.word	0x2000651c
  400988:	00405c45 	.word	0x00405c45

0040098c <mem_removal>:


bool mem_removal(U8 lun)
{
  40098c:	b590      	push	{r4, r7, lr}
  40098e:	b085      	sub	sp, #20
  400990:	af00      	add	r7, sp, #0
  400992:	4603      	mov	r3, r0
  400994:	71fb      	strb	r3, [r7, #7]
  bool removal;
#if MAX_LUN==0
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return true;
  400996:	4b13      	ldr	r3, [pc, #76]	; (4009e4 <mem_removal+0x58>)
  400998:	4798      	blx	r3
  40099a:	4603      	mov	r3, r0
  40099c:	f083 0301 	eor.w	r3, r3, #1
  4009a0:	b2db      	uxtb	r3, r3
  4009a2:	2b00      	cmp	r3, #0
  4009a4:	d001      	beq.n	4009aa <mem_removal+0x1e>
  4009a6:	2301      	movs	r3, #1
  4009a8:	e018      	b.n	4009dc <mem_removal+0x50>

  removal =
#if MAX_LUN
          (lun < MAX_LUN) ? lun_desc[lun].removal() :
  4009aa:	79fb      	ldrb	r3, [r7, #7]
  4009ac:	2b00      	cmp	r3, #0
  4009ae:	d109      	bne.n	4009c4 <mem_removal+0x38>
  4009b0:	79fb      	ldrb	r3, [r7, #7]
  4009b2:	4a0d      	ldr	r2, [pc, #52]	; (4009e8 <mem_removal+0x5c>)
  4009b4:	015b      	lsls	r3, r3, #5
  4009b6:	4413      	add	r3, r2
  4009b8:	3310      	adds	r3, #16
  4009ba:	681b      	ldr	r3, [r3, #0]
  4009bc:	4798      	blx	r3
  4009be:	4603      	mov	r3, r0
  4009c0:	2b00      	cmp	r3, #0
  4009c2:	d001      	beq.n	4009c8 <mem_removal+0x3c>
  4009c4:	2301      	movs	r3, #1
  4009c6:	e000      	b.n	4009ca <mem_removal+0x3e>
  4009c8:	2300      	movs	r3, #0
  removal =
  4009ca:	73fb      	strb	r3, [r7, #15]
                              Lun_usb_removal();
#else
                              true;
#endif

  Ctrl_access_unlock();
  4009cc:	4b07      	ldr	r3, [pc, #28]	; (4009ec <mem_removal+0x60>)
  4009ce:	6818      	ldr	r0, [r3, #0]
  4009d0:	2300      	movs	r3, #0
  4009d2:	2200      	movs	r2, #0
  4009d4:	2100      	movs	r1, #0
  4009d6:	4c06      	ldr	r4, [pc, #24]	; (4009f0 <mem_removal+0x64>)
  4009d8:	47a0      	blx	r4

  return removal;
  4009da:	7bfb      	ldrb	r3, [r7, #15]
}
  4009dc:	4618      	mov	r0, r3
  4009de:	3714      	adds	r7, #20
  4009e0:	46bd      	mov	sp, r7
  4009e2:	bd90      	pop	{r4, r7, pc}
  4009e4:	00400779 	.word	0x00400779
  4009e8:	0040719c 	.word	0x0040719c
  4009ec:	2000651c 	.word	0x2000651c
  4009f0:	00405c45 	.word	0x00405c45

004009f4 <mem_name>:


const char *mem_name(U8 lun)
{
  4009f4:	b480      	push	{r7}
  4009f6:	b083      	sub	sp, #12
  4009f8:	af00      	add	r7, sp, #0
  4009fa:	4603      	mov	r3, r0
  4009fc:	71fb      	strb	r3, [r7, #7]
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
#if MAX_LUN
       (lun < MAX_LUN) ? lun_desc[lun].name :
  4009fe:	79fb      	ldrb	r3, [r7, #7]
  400a00:	2b00      	cmp	r3, #0
  400a02:	d101      	bne.n	400a08 <mem_name+0x14>
  400a04:	4b04      	ldr	r3, [pc, #16]	; (400a18 <mem_name+0x24>)
  400a06:	e000      	b.n	400a0a <mem_name+0x16>
  400a08:	2300      	movs	r3, #0
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
  400a0a:	4618      	mov	r0, r3
  400a0c:	370c      	adds	r7, #12
  400a0e:	46bd      	mov	sp, r7
  400a10:	f85d 7b04 	ldr.w	r7, [sp], #4
  400a14:	4770      	bx	lr
  400a16:	bf00      	nop
  400a18:	00407180 	.word	0x00407180

00400a1c <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
  400a1c:	b580      	push	{r7, lr}
  400a1e:	b082      	sub	sp, #8
  400a20:	af00      	add	r7, sp, #0
	uint8_t lun;
	udi_msc_b_trans_req = false;
  400a22:	4b1f      	ldr	r3, [pc, #124]	; (400aa0 <udi_msc_enable+0x84>)
  400a24:	2200      	movs	r2, #0
  400a26:	701a      	strb	r2, [r3, #0]
	udi_msc_b_cbw_invalid = false;
  400a28:	4b1e      	ldr	r3, [pc, #120]	; (400aa4 <udi_msc_enable+0x88>)
  400a2a:	2200      	movs	r2, #0
  400a2c:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
  400a2e:	4b1e      	ldr	r3, [pc, #120]	; (400aa8 <udi_msc_enable+0x8c>)
  400a30:	2201      	movs	r2, #1
  400a32:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = true;
  400a34:	4b1d      	ldr	r3, [pc, #116]	; (400aac <udi_msc_enable+0x90>)
  400a36:	2201      	movs	r2, #1
  400a38:	701a      	strb	r2, [r3, #0]
	udi_msc_nb_lun = get_nb_lun();
  400a3a:	4b1d      	ldr	r3, [pc, #116]	; (400ab0 <udi_msc_enable+0x94>)
  400a3c:	4798      	blx	r3
  400a3e:	4603      	mov	r3, r0
  400a40:	461a      	mov	r2, r3
  400a42:	4b1c      	ldr	r3, [pc, #112]	; (400ab4 <udi_msc_enable+0x98>)
  400a44:	701a      	strb	r2, [r3, #0]
	if (0 == udi_msc_nb_lun)
  400a46:	4b1b      	ldr	r3, [pc, #108]	; (400ab4 <udi_msc_enable+0x98>)
  400a48:	781b      	ldrb	r3, [r3, #0]
  400a4a:	2b00      	cmp	r3, #0
  400a4c:	d101      	bne.n	400a52 <udi_msc_enable+0x36>
		return false; // No lun available, then not authorize to enable interface
  400a4e:	2300      	movs	r3, #0
  400a50:	e022      	b.n	400a98 <udi_msc_enable+0x7c>
	udi_msc_nb_lun--;
  400a52:	4b18      	ldr	r3, [pc, #96]	; (400ab4 <udi_msc_enable+0x98>)
  400a54:	781b      	ldrb	r3, [r3, #0]
  400a56:	3b01      	subs	r3, #1
  400a58:	b2da      	uxtb	r2, r3
  400a5a:	4b16      	ldr	r3, [pc, #88]	; (400ab4 <udi_msc_enable+0x98>)
  400a5c:	701a      	strb	r2, [r3, #0]
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
  400a5e:	4b16      	ldr	r3, [pc, #88]	; (400ab8 <udi_msc_enable+0x9c>)
  400a60:	4798      	blx	r3
  400a62:	4603      	mov	r3, r0
  400a64:	f083 0301 	eor.w	r3, r3, #1
  400a68:	b2db      	uxtb	r3, r3
  400a6a:	2b00      	cmp	r3, #0
  400a6c:	d001      	beq.n	400a72 <udi_msc_enable+0x56>
		return false;
  400a6e:	2300      	movs	r3, #0
  400a70:	e012      	b.n	400a98 <udi_msc_enable+0x7c>
	// Load the medium on each LUN
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
  400a72:	2300      	movs	r3, #0
  400a74:	71fb      	strb	r3, [r7, #7]
  400a76:	e007      	b.n	400a88 <udi_msc_enable+0x6c>
		mem_unload(lun, false);
  400a78:	79fb      	ldrb	r3, [r7, #7]
  400a7a:	2100      	movs	r1, #0
  400a7c:	4618      	mov	r0, r3
  400a7e:	4b0f      	ldr	r3, [pc, #60]	; (400abc <udi_msc_enable+0xa0>)
  400a80:	4798      	blx	r3
	for (lun = 0; lun <= udi_msc_nb_lun; lun ++) {
  400a82:	79fb      	ldrb	r3, [r7, #7]
  400a84:	3301      	adds	r3, #1
  400a86:	71fb      	strb	r3, [r7, #7]
  400a88:	4b0a      	ldr	r3, [pc, #40]	; (400ab4 <udi_msc_enable+0x98>)
  400a8a:	781b      	ldrb	r3, [r3, #0]
  400a8c:	79fa      	ldrb	r2, [r7, #7]
  400a8e:	429a      	cmp	r2, r3
  400a90:	d9f2      	bls.n	400a78 <udi_msc_enable+0x5c>
	}
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
  400a92:	4b0b      	ldr	r3, [pc, #44]	; (400ac0 <udi_msc_enable+0xa4>)
  400a94:	4798      	blx	r3
	return true;
  400a96:	2301      	movs	r3, #1
}
  400a98:	4618      	mov	r0, r3
  400a9a:	3708      	adds	r7, #8
  400a9c:	46bd      	mov	sp, r7
  400a9e:	bd80      	pop	{r7, pc}
  400aa0:	20006557 	.word	0x20006557
  400aa4:	20006556 	.word	0x20006556
  400aa8:	20000021 	.word	0x20000021
  400aac:	20000022 	.word	0x20000022
  400ab0:	004007ad 	.word	0x004007ad
  400ab4:	20006540 	.word	0x20006540
  400ab8:	00406dfd 	.word	0x00406dfd
  400abc:	00400885 	.word	0x00400885
  400ac0:	00400c35 	.word	0x00400c35

00400ac4 <udi_msc_disable>:


void udi_msc_disable(void)
{
  400ac4:	b580      	push	{r7, lr}
  400ac6:	af00      	add	r7, sp, #0
	udi_msc_b_trans_req = false;
  400ac8:	4b06      	ldr	r3, [pc, #24]	; (400ae4 <udi_msc_disable+0x20>)
  400aca:	2200      	movs	r2, #0
  400acc:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
  400ace:	4b06      	ldr	r3, [pc, #24]	; (400ae8 <udi_msc_disable+0x24>)
  400ad0:	2201      	movs	r2, #1
  400ad2:	701a      	strb	r2, [r3, #0]
	udi_msc_b_reset_trans = true;
  400ad4:	4b05      	ldr	r3, [pc, #20]	; (400aec <udi_msc_disable+0x28>)
  400ad6:	2201      	movs	r2, #1
  400ad8:	701a      	strb	r2, [r3, #0]
	UDI_MSC_DISABLE_EXT();
  400ada:	4b05      	ldr	r3, [pc, #20]	; (400af0 <udi_msc_disable+0x2c>)
  400adc:	4798      	blx	r3
}
  400ade:	bf00      	nop
  400ae0:	bd80      	pop	{r7, pc}
  400ae2:	bf00      	nop
  400ae4:	20006557 	.word	0x20006557
  400ae8:	20000021 	.word	0x20000021
  400aec:	20000022 	.word	0x20000022
  400af0:	00406e19 	.word	0x00406e19

00400af4 <udi_msc_setup>:


bool udi_msc_setup(void)
{
  400af4:	b580      	push	{r7, lr}
  400af6:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
  400af8:	4b28      	ldr	r3, [pc, #160]	; (400b9c <udi_msc_setup+0xa8>)
  400afa:	781b      	ldrb	r3, [r3, #0]
  400afc:	b25b      	sxtb	r3, r3
  400afe:	2b00      	cmp	r3, #0
  400b00:	da1d      	bge.n	400b3e <udi_msc_setup+0x4a>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400b02:	4b26      	ldr	r3, [pc, #152]	; (400b9c <udi_msc_setup+0xa8>)
  400b04:	781b      	ldrb	r3, [r3, #0]
  400b06:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400b0a:	2b20      	cmp	r3, #32
  400b0c:	d117      	bne.n	400b3e <udi_msc_setup+0x4a>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
  400b0e:	4b23      	ldr	r3, [pc, #140]	; (400b9c <udi_msc_setup+0xa8>)
  400b10:	785b      	ldrb	r3, [r3, #1]
  400b12:	2bfe      	cmp	r3, #254	; 0xfe
  400b14:	d113      	bne.n	400b3e <udi_msc_setup+0x4a>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
  400b16:	4b21      	ldr	r3, [pc, #132]	; (400b9c <udi_msc_setup+0xa8>)
  400b18:	88db      	ldrh	r3, [r3, #6]
  400b1a:	2b01      	cmp	r3, #1
  400b1c:	d001      	beq.n	400b22 <udi_msc_setup+0x2e>
					return false;	// Error for USB host
  400b1e:	2300      	movs	r3, #0
  400b20:	e039      	b.n	400b96 <udi_msc_setup+0xa2>
				if (0 != udd_g_ctrlreq.req.wValue)
  400b22:	4b1e      	ldr	r3, [pc, #120]	; (400b9c <udi_msc_setup+0xa8>)
  400b24:	885b      	ldrh	r3, [r3, #2]
  400b26:	2b00      	cmp	r3, #0
  400b28:	d001      	beq.n	400b2e <udi_msc_setup+0x3a>
					return false;
  400b2a:	2300      	movs	r3, #0
  400b2c:	e033      	b.n	400b96 <udi_msc_setup+0xa2>
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
  400b2e:	4b1b      	ldr	r3, [pc, #108]	; (400b9c <udi_msc_setup+0xa8>)
  400b30:	4a1b      	ldr	r2, [pc, #108]	; (400ba0 <udi_msc_setup+0xac>)
  400b32:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
  400b34:	4b19      	ldr	r3, [pc, #100]	; (400b9c <udi_msc_setup+0xa8>)
  400b36:	2201      	movs	r2, #1
  400b38:	819a      	strh	r2, [r3, #12]
				return true;
  400b3a:	2301      	movs	r3, #1
  400b3c:	e02b      	b.n	400b96 <udi_msc_setup+0xa2>
			}
		}
	}
	if (Udd_setup_is_out()) {
  400b3e:	4b17      	ldr	r3, [pc, #92]	; (400b9c <udi_msc_setup+0xa8>)
  400b40:	781b      	ldrb	r3, [r3, #0]
  400b42:	b25b      	sxtb	r3, r3
  400b44:	2b00      	cmp	r3, #0
  400b46:	db25      	blt.n	400b94 <udi_msc_setup+0xa0>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
  400b48:	4b14      	ldr	r3, [pc, #80]	; (400b9c <udi_msc_setup+0xa8>)
  400b4a:	781b      	ldrb	r3, [r3, #0]
  400b4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
  400b50:	2b20      	cmp	r3, #32
  400b52:	d11f      	bne.n	400b94 <udi_msc_setup+0xa0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
  400b54:	4b11      	ldr	r3, [pc, #68]	; (400b9c <udi_msc_setup+0xa8>)
  400b56:	785b      	ldrb	r3, [r3, #1]
  400b58:	2bff      	cmp	r3, #255	; 0xff
  400b5a:	d11b      	bne.n	400b94 <udi_msc_setup+0xa0>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
  400b5c:	4b0f      	ldr	r3, [pc, #60]	; (400b9c <udi_msc_setup+0xa8>)
  400b5e:	88db      	ldrh	r3, [r3, #6]
  400b60:	2b00      	cmp	r3, #0
  400b62:	d001      	beq.n	400b68 <udi_msc_setup+0x74>
					return false;
  400b64:	2300      	movs	r3, #0
  400b66:	e016      	b.n	400b96 <udi_msc_setup+0xa2>
				if (0 != udd_g_ctrlreq.req.wValue)
  400b68:	4b0c      	ldr	r3, [pc, #48]	; (400b9c <udi_msc_setup+0xa8>)
  400b6a:	885b      	ldrh	r3, [r3, #2]
  400b6c:	2b00      	cmp	r3, #0
  400b6e:	d001      	beq.n	400b74 <udi_msc_setup+0x80>
					return false;
  400b70:	2300      	movs	r3, #0
  400b72:	e010      	b.n	400b96 <udi_msc_setup+0xa2>
				udi_msc_b_cbw_invalid = false;
  400b74:	4b0b      	ldr	r3, [pc, #44]	; (400ba4 <udi_msc_setup+0xb0>)
  400b76:	2200      	movs	r2, #0
  400b78:	701a      	strb	r2, [r3, #0]
				udi_msc_b_trans_req = false;
  400b7a:	4b0b      	ldr	r3, [pc, #44]	; (400ba8 <udi_msc_setup+0xb4>)
  400b7c:	2200      	movs	r2, #0
  400b7e:	701a      	strb	r2, [r3, #0]
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
  400b80:	2002      	movs	r0, #2
  400b82:	4b0a      	ldr	r3, [pc, #40]	; (400bac <udi_msc_setup+0xb8>)
  400b84:	4798      	blx	r3
				udd_ep_abort(UDI_MSC_EP_IN);
  400b86:	2081      	movs	r0, #129	; 0x81
  400b88:	4b08      	ldr	r3, [pc, #32]	; (400bac <udi_msc_setup+0xb8>)
  400b8a:	4798      	blx	r3
				// Restart by CBW wait
				udi_msc_cbw_wait();
  400b8c:	4b08      	ldr	r3, [pc, #32]	; (400bb0 <udi_msc_setup+0xbc>)
  400b8e:	4798      	blx	r3
				return true;
  400b90:	2301      	movs	r3, #1
  400b92:	e000      	b.n	400b96 <udi_msc_setup+0xa2>
			}
		}
	}
	return false;	// Not supported request
  400b94:	2300      	movs	r3, #0
}
  400b96:	4618      	mov	r0, r3
  400b98:	bd80      	pop	{r7, pc}
  400b9a:	bf00      	nop
  400b9c:	2000a748 	.word	0x2000a748
  400ba0:	20006540 	.word	0x20006540
  400ba4:	20006556 	.word	0x20006556
  400ba8:	20006557 	.word	0x20006557
  400bac:	00403cd5 	.word	0x00403cd5
  400bb0:	00400c35 	.word	0x00400c35

00400bb4 <udi_msc_getsetting>:

uint8_t udi_msc_getsetting(void)
{
  400bb4:	b480      	push	{r7}
  400bb6:	af00      	add	r7, sp, #0
	return 0;	// MSC don't have multiple alternate setting
  400bb8:	2300      	movs	r3, #0
}
  400bba:	4618      	mov	r0, r3
  400bbc:	46bd      	mov	sp, r7
  400bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
  400bc2:	4770      	bx	lr

00400bc4 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
  400bc4:	b580      	push	{r7, lr}
  400bc6:	af00      	add	r7, sp, #0
	if (!udi_msc_b_cbw_invalid)
  400bc8:	4b08      	ldr	r3, [pc, #32]	; (400bec <udi_msc_cbw_invalid+0x28>)
  400bca:	781b      	ldrb	r3, [r3, #0]
  400bcc:	f083 0301 	eor.w	r3, r3, #1
  400bd0:	b2db      	uxtb	r3, r3
  400bd2:	2b00      	cmp	r3, #0
  400bd4:	d107      	bne.n	400be6 <udi_msc_cbw_invalid+0x22>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
  400bd6:	2002      	movs	r0, #2
  400bd8:	4b05      	ldr	r3, [pc, #20]	; (400bf0 <udi_msc_cbw_invalid+0x2c>)
  400bda:	4798      	blx	r3
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
  400bdc:	4905      	ldr	r1, [pc, #20]	; (400bf4 <udi_msc_cbw_invalid+0x30>)
  400bde:	2002      	movs	r0, #2
  400be0:	4b05      	ldr	r3, [pc, #20]	; (400bf8 <udi_msc_cbw_invalid+0x34>)
  400be2:	4798      	blx	r3
  400be4:	e000      	b.n	400be8 <udi_msc_cbw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
  400be6:	bf00      	nop
}
  400be8:	bd80      	pop	{r7, pc}
  400bea:	bf00      	nop
  400bec:	20006556 	.word	0x20006556
  400bf0:	0040395d 	.word	0x0040395d
  400bf4:	00400bc5 	.word	0x00400bc5
  400bf8:	00403ef1 	.word	0x00403ef1

00400bfc <udi_msc_csw_invalid>:

static void udi_msc_csw_invalid(void)
{
  400bfc:	b580      	push	{r7, lr}
  400bfe:	af00      	add	r7, sp, #0
	if (!udi_msc_b_cbw_invalid)
  400c00:	4b08      	ldr	r3, [pc, #32]	; (400c24 <udi_msc_csw_invalid+0x28>)
  400c02:	781b      	ldrb	r3, [r3, #0]
  400c04:	f083 0301 	eor.w	r3, r3, #1
  400c08:	b2db      	uxtb	r3, r3
  400c0a:	2b00      	cmp	r3, #0
  400c0c:	d107      	bne.n	400c1e <udi_msc_csw_invalid+0x22>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
  400c0e:	2081      	movs	r0, #129	; 0x81
  400c10:	4b05      	ldr	r3, [pc, #20]	; (400c28 <udi_msc_csw_invalid+0x2c>)
  400c12:	4798      	blx	r3
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
  400c14:	4905      	ldr	r1, [pc, #20]	; (400c2c <udi_msc_csw_invalid+0x30>)
  400c16:	2081      	movs	r0, #129	; 0x81
  400c18:	4b05      	ldr	r3, [pc, #20]	; (400c30 <udi_msc_csw_invalid+0x34>)
  400c1a:	4798      	blx	r3
  400c1c:	e000      	b.n	400c20 <udi_msc_csw_invalid+0x24>
		return;	// Don't re-stall endpoint if error reseted by setup
  400c1e:	bf00      	nop
}
  400c20:	bd80      	pop	{r7, pc}
  400c22:	bf00      	nop
  400c24:	20006556 	.word	0x20006556
  400c28:	0040395d 	.word	0x0040395d
  400c2c:	00400bfd 	.word	0x00400bfd
  400c30:	00403ef1 	.word	0x00403ef1

00400c34 <udi_msc_cbw_wait>:

static void udi_msc_cbw_wait(void)
{
  400c34:	b590      	push	{r4, r7, lr}
  400c36:	b083      	sub	sp, #12
  400c38:	af02      	add	r7, sp, #8
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
  400c3a:	4b0b      	ldr	r3, [pc, #44]	; (400c68 <udi_msc_cbw_wait+0x34>)
  400c3c:	9300      	str	r3, [sp, #0]
  400c3e:	231f      	movs	r3, #31
  400c40:	4a0a      	ldr	r2, [pc, #40]	; (400c6c <udi_msc_cbw_wait+0x38>)
  400c42:	2101      	movs	r1, #1
  400c44:	2002      	movs	r0, #2
  400c46:	4c0a      	ldr	r4, [pc, #40]	; (400c70 <udi_msc_cbw_wait+0x3c>)
  400c48:	47a0      	blx	r4
  400c4a:	4603      	mov	r3, r0
  400c4c:	f083 0301 	eor.w	r3, r3, #1
  400c50:	b2db      	uxtb	r3, r3
  400c52:	2b00      	cmp	r3, #0
  400c54:	d003      	beq.n	400c5e <udi_msc_cbw_wait+0x2a>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
  400c56:	4907      	ldr	r1, [pc, #28]	; (400c74 <udi_msc_cbw_wait+0x40>)
  400c58:	2002      	movs	r0, #2
  400c5a:	4b07      	ldr	r3, [pc, #28]	; (400c78 <udi_msc_cbw_wait+0x44>)
  400c5c:	4798      	blx	r3
	}
}
  400c5e:	bf00      	nop
  400c60:	3704      	adds	r7, #4
  400c62:	46bd      	mov	sp, r7
  400c64:	bd90      	pop	{r4, r7, pc}
  400c66:	bf00      	nop
  400c68:	00400c7d 	.word	0x00400c7d
  400c6c:	20006520 	.word	0x20006520
  400c70:	00403b7d 	.word	0x00403b7d
  400c74:	00400c35 	.word	0x00400c35
  400c78:	00403ef1 	.word	0x00403ef1

00400c7c <udi_msc_cbw_received>:


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
  400c7c:	b580      	push	{r7, lr}
  400c7e:	b082      	sub	sp, #8
  400c80:	af00      	add	r7, sp, #0
  400c82:	4603      	mov	r3, r0
  400c84:	6039      	str	r1, [r7, #0]
  400c86:	71fb      	strb	r3, [r7, #7]
  400c88:	4613      	mov	r3, r2
  400c8a:	71bb      	strb	r3, [r7, #6]
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
  400c8c:	79fb      	ldrb	r3, [r7, #7]
  400c8e:	2b00      	cmp	r3, #0
  400c90:	f040 8111 	bne.w	400eb6 <udi_msc_cbw_received+0x23a>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
  400c94:	683b      	ldr	r3, [r7, #0]
  400c96:	2b1f      	cmp	r3, #31
  400c98:	d104      	bne.n	400ca4 <udi_msc_cbw_received+0x28>
			|| (udi_msc_cbw.dCBWSignature !=
  400c9a:	4b89      	ldr	r3, [pc, #548]	; (400ec0 <udi_msc_cbw_received+0x244>)
  400c9c:	681b      	ldr	r3, [r3, #0]
  400c9e:	4a89      	ldr	r2, [pc, #548]	; (400ec4 <udi_msc_cbw_received+0x248>)
  400ca0:	4293      	cmp	r3, r2
  400ca2:	d007      	beq.n	400cb4 <udi_msc_cbw_received+0x38>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
  400ca4:	4b88      	ldr	r3, [pc, #544]	; (400ec8 <udi_msc_cbw_received+0x24c>)
  400ca6:	2201      	movs	r2, #1
  400ca8:	701a      	strb	r2, [r3, #0]
		udi_msc_cbw_invalid();
  400caa:	4b88      	ldr	r3, [pc, #544]	; (400ecc <udi_msc_cbw_received+0x250>)
  400cac:	4798      	blx	r3
		udi_msc_csw_invalid();
  400cae:	4b88      	ldr	r3, [pc, #544]	; (400ed0 <udi_msc_cbw_received+0x254>)
  400cb0:	4798      	blx	r3
		return;
  400cb2:	e101      	b.n	400eb8 <udi_msc_cbw_received+0x23c>
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
  400cb4:	4b82      	ldr	r3, [pc, #520]	; (400ec0 <udi_msc_cbw_received+0x244>)
  400cb6:	7b5b      	ldrb	r3, [r3, #13]
  400cb8:	f003 030f 	and.w	r3, r3, #15
  400cbc:	b2da      	uxtb	r2, r3
  400cbe:	4b80      	ldr	r3, [pc, #512]	; (400ec0 <udi_msc_cbw_received+0x244>)
  400cc0:	735a      	strb	r2, [r3, #13]
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
  400cc2:	4b7f      	ldr	r3, [pc, #508]	; (400ec0 <udi_msc_cbw_received+0x244>)
  400cc4:	7b5a      	ldrb	r2, [r3, #13]
  400cc6:	4b83      	ldr	r3, [pc, #524]	; (400ed4 <udi_msc_cbw_received+0x258>)
  400cc8:	781b      	ldrb	r3, [r3, #0]
  400cca:	429a      	cmp	r2, r3
  400ccc:	d904      	bls.n	400cd8 <udi_msc_cbw_received+0x5c>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
  400cce:	4b82      	ldr	r3, [pc, #520]	; (400ed8 <udi_msc_cbw_received+0x25c>)
  400cd0:	4798      	blx	r3
		udi_msc_csw_process();
  400cd2:	4b82      	ldr	r3, [pc, #520]	; (400edc <udi_msc_cbw_received+0x260>)
  400cd4:	4798      	blx	r3
		return;
  400cd6:	e0ef      	b.n	400eb8 <udi_msc_cbw_received+0x23c>
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
  400cd8:	4b79      	ldr	r3, [pc, #484]	; (400ec0 <udi_msc_cbw_received+0x244>)
  400cda:	689b      	ldr	r3, [r3, #8]
	udi_msc_csw.dCSWDataResidue =
  400cdc:	4a80      	ldr	r2, [pc, #512]	; (400ee0 <udi_msc_cbw_received+0x264>)
  400cde:	6093      	str	r3, [r2, #8]

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
  400ce0:	4b77      	ldr	r3, [pc, #476]	; (400ec0 <udi_msc_cbw_received+0x244>)
  400ce2:	7bdb      	ldrb	r3, [r3, #15]
  400ce4:	2b5a      	cmp	r3, #90	; 0x5a
  400ce6:	f200 80e0 	bhi.w	400eaa <udi_msc_cbw_received+0x22e>
  400cea:	a201      	add	r2, pc, #4	; (adr r2, 400cf0 <udi_msc_cbw_received+0x74>)
  400cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400cf0:	00400e79 	.word	0x00400e79
  400cf4:	00400eab 	.word	0x00400eab
  400cf8:	00400eab 	.word	0x00400eab
  400cfc:	00400e5d 	.word	0x00400e5d
  400d00:	00400eab 	.word	0x00400eab
  400d04:	00400eab 	.word	0x00400eab
  400d08:	00400eab 	.word	0x00400eab
  400d0c:	00400eab 	.word	0x00400eab
  400d10:	00400eab 	.word	0x00400eab
  400d14:	00400eab 	.word	0x00400eab
  400d18:	00400eab 	.word	0x00400eab
  400d1c:	00400eab 	.word	0x00400eab
  400d20:	00400eab 	.word	0x00400eab
  400d24:	00400eab 	.word	0x00400eab
  400d28:	00400eab 	.word	0x00400eab
  400d2c:	00400eab 	.word	0x00400eab
  400d30:	00400eab 	.word	0x00400eab
  400d34:	00400eab 	.word	0x00400eab
  400d38:	00400e63 	.word	0x00400e63
  400d3c:	00400eab 	.word	0x00400eab
  400d40:	00400eab 	.word	0x00400eab
  400d44:	00400eab 	.word	0x00400eab
  400d48:	00400eab 	.word	0x00400eab
  400d4c:	00400eab 	.word	0x00400eab
  400d50:	00400eab 	.word	0x00400eab
  400d54:	00400eab 	.word	0x00400eab
  400d58:	00400e69 	.word	0x00400e69
  400d5c:	00400e85 	.word	0x00400e85
  400d60:	00400eab 	.word	0x00400eab
  400d64:	00400eab 	.word	0x00400eab
  400d68:	00400e8b 	.word	0x00400e8b
  400d6c:	00400eab 	.word	0x00400eab
  400d70:	00400eab 	.word	0x00400eab
  400d74:	00400eab 	.word	0x00400eab
  400d78:	00400eab 	.word	0x00400eab
  400d7c:	00400eab 	.word	0x00400eab
  400d80:	00400eab 	.word	0x00400eab
  400d84:	00400e7f 	.word	0x00400e7f
  400d88:	00400eab 	.word	0x00400eab
  400d8c:	00400eab 	.word	0x00400eab
  400d90:	00400e9b 	.word	0x00400e9b
  400d94:	00400eab 	.word	0x00400eab
  400d98:	00400ea3 	.word	0x00400ea3
  400d9c:	00400eab 	.word	0x00400eab
  400da0:	00400eab 	.word	0x00400eab
  400da4:	00400eab 	.word	0x00400eab
  400da8:	00400eab 	.word	0x00400eab
  400dac:	00400e91 	.word	0x00400e91
  400db0:	00400eab 	.word	0x00400eab
  400db4:	00400eab 	.word	0x00400eab
  400db8:	00400eab 	.word	0x00400eab
  400dbc:	00400eab 	.word	0x00400eab
  400dc0:	00400eab 	.word	0x00400eab
  400dc4:	00400eab 	.word	0x00400eab
  400dc8:	00400eab 	.word	0x00400eab
  400dcc:	00400eab 	.word	0x00400eab
  400dd0:	00400eab 	.word	0x00400eab
  400dd4:	00400eab 	.word	0x00400eab
  400dd8:	00400eab 	.word	0x00400eab
  400ddc:	00400eab 	.word	0x00400eab
  400de0:	00400eab 	.word	0x00400eab
  400de4:	00400eab 	.word	0x00400eab
  400de8:	00400eab 	.word	0x00400eab
  400dec:	00400eab 	.word	0x00400eab
  400df0:	00400eab 	.word	0x00400eab
  400df4:	00400eab 	.word	0x00400eab
  400df8:	00400eab 	.word	0x00400eab
  400dfc:	00400eab 	.word	0x00400eab
  400e00:	00400eab 	.word	0x00400eab
  400e04:	00400eab 	.word	0x00400eab
  400e08:	00400eab 	.word	0x00400eab
  400e0c:	00400eab 	.word	0x00400eab
  400e10:	00400eab 	.word	0x00400eab
  400e14:	00400eab 	.word	0x00400eab
  400e18:	00400eab 	.word	0x00400eab
  400e1c:	00400eab 	.word	0x00400eab
  400e20:	00400eab 	.word	0x00400eab
  400e24:	00400eab 	.word	0x00400eab
  400e28:	00400eab 	.word	0x00400eab
  400e2c:	00400eab 	.word	0x00400eab
  400e30:	00400eab 	.word	0x00400eab
  400e34:	00400eab 	.word	0x00400eab
  400e38:	00400eab 	.word	0x00400eab
  400e3c:	00400eab 	.word	0x00400eab
  400e40:	00400eab 	.word	0x00400eab
  400e44:	00400eab 	.word	0x00400eab
  400e48:	00400eab 	.word	0x00400eab
  400e4c:	00400eab 	.word	0x00400eab
  400e50:	00400eab 	.word	0x00400eab
  400e54:	00400eab 	.word	0x00400eab
  400e58:	00400e71 	.word	0x00400e71
	case SPC_REQUEST_SENSE:
		udi_msc_spc_requestsense();
  400e5c:	4b21      	ldr	r3, [pc, #132]	; (400ee4 <udi_msc_cbw_received+0x268>)
  400e5e:	4798      	blx	r3
		break;
  400e60:	e02a      	b.n	400eb8 <udi_msc_cbw_received+0x23c>

	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
  400e62:	4b21      	ldr	r3, [pc, #132]	; (400ee8 <udi_msc_cbw_received+0x26c>)
  400e64:	4798      	blx	r3
		break;
  400e66:	e027      	b.n	400eb8 <udi_msc_cbw_received+0x23c>

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
  400e68:	2000      	movs	r0, #0
  400e6a:	4b20      	ldr	r3, [pc, #128]	; (400eec <udi_msc_cbw_received+0x270>)
  400e6c:	4798      	blx	r3
		break;
  400e6e:	e023      	b.n	400eb8 <udi_msc_cbw_received+0x23c>
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
  400e70:	2001      	movs	r0, #1
  400e72:	4b1e      	ldr	r3, [pc, #120]	; (400eec <udi_msc_cbw_received+0x270>)
  400e74:	4798      	blx	r3
		break;
  400e76:	e01f      	b.n	400eb8 <udi_msc_cbw_received+0x23c>

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
  400e78:	4b1d      	ldr	r3, [pc, #116]	; (400ef0 <udi_msc_cbw_received+0x274>)
  400e7a:	4798      	blx	r3
		break;
  400e7c:	e01c      	b.n	400eb8 <udi_msc_cbw_received+0x23c>

	case SBC_READ_CAPACITY10:
		udi_msc_sbc_read_capacity();
  400e7e:	4b1d      	ldr	r3, [pc, #116]	; (400ef4 <udi_msc_cbw_received+0x278>)
  400e80:	4798      	blx	r3
		break;
  400e82:	e019      	b.n	400eb8 <udi_msc_cbw_received+0x23c>

	case SBC_START_STOP_UNIT:
		udi_msc_sbc_start_stop();
  400e84:	4b1c      	ldr	r3, [pc, #112]	; (400ef8 <udi_msc_cbw_received+0x27c>)
  400e86:	4798      	blx	r3
		break;
  400e88:	e016      	b.n	400eb8 <udi_msc_cbw_received+0x23c>

		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		udi_msc_spc_prevent_allow_medium_removal();
  400e8a:	4b1c      	ldr	r3, [pc, #112]	; (400efc <udi_msc_cbw_received+0x280>)
  400e8c:	4798      	blx	r3
		break;
  400e8e:	e013      	b.n	400eb8 <udi_msc_cbw_received+0x23c>

		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
  400e90:	4b1b      	ldr	r3, [pc, #108]	; (400f00 <udi_msc_cbw_received+0x284>)
  400e92:	4798      	blx	r3
		udi_msc_csw_process();
  400e94:	4b11      	ldr	r3, [pc, #68]	; (400edc <udi_msc_cbw_received+0x260>)
  400e96:	4798      	blx	r3
		break;
  400e98:	e00e      	b.n	400eb8 <udi_msc_cbw_received+0x23c>

	case SBC_READ10:
		udi_msc_sbc_trans(true);
  400e9a:	2001      	movs	r0, #1
  400e9c:	4b19      	ldr	r3, [pc, #100]	; (400f04 <udi_msc_cbw_received+0x288>)
  400e9e:	4798      	blx	r3
		break;
  400ea0:	e00a      	b.n	400eb8 <udi_msc_cbw_received+0x23c>

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
  400ea2:	2000      	movs	r0, #0
  400ea4:	4b17      	ldr	r3, [pc, #92]	; (400f04 <udi_msc_cbw_received+0x288>)
  400ea6:	4798      	blx	r3
		break;
  400ea8:	e006      	b.n	400eb8 <udi_msc_cbw_received+0x23c>

	default:
		udi_msc_sense_command_invalid();
  400eaa:	4b17      	ldr	r3, [pc, #92]	; (400f08 <udi_msc_cbw_received+0x28c>)
  400eac:	4798      	blx	r3
		udi_msc_csw_process();
  400eae:	4b0b      	ldr	r3, [pc, #44]	; (400edc <udi_msc_cbw_received+0x260>)
  400eb0:	4798      	blx	r3
		break;
  400eb2:	bf00      	nop
  400eb4:	e000      	b.n	400eb8 <udi_msc_cbw_received+0x23c>
		return;
  400eb6:	bf00      	nop
	}
}
  400eb8:	3708      	adds	r7, #8
  400eba:	46bd      	mov	sp, r7
  400ebc:	bd80      	pop	{r7, pc}
  400ebe:	bf00      	nop
  400ec0:	20006520 	.word	0x20006520
  400ec4:	43425355 	.word	0x43425355
  400ec8:	20006556 	.word	0x20006556
  400ecc:	00400bc5 	.word	0x00400bc5
  400ed0:	00400bfd 	.word	0x00400bfd
  400ed4:	20006540 	.word	0x20006540
  400ed8:	004011ad 	.word	0x004011ad
  400edc:	00400fe5 	.word	0x00400fe5
  400ee0:	20000014 	.word	0x20000014
  400ee4:	004011dd 	.word	0x004011dd
  400ee8:	0040122d 	.word	0x0040122d
  400eec:	0040139d 	.word	0x0040139d
  400ef0:	00401375 	.word	0x00401375
  400ef4:	00401561 	.word	0x00401561
  400ef8:	004014ed 	.word	0x004014ed
  400efc:	004014b5 	.word	0x004014b5
  400f00:	00401131 	.word	0x00401131
  400f04:	004015f9 	.word	0x004015f9
  400f08:	004011c5 	.word	0x004011c5

00400f0c <udi_msc_cbw_validate>:


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
  400f0c:	b580      	push	{r7, lr}
  400f0e:	b082      	sub	sp, #8
  400f10:	af00      	add	r7, sp, #0
  400f12:	6078      	str	r0, [r7, #4]
  400f14:	460b      	mov	r3, r1
  400f16:	70fb      	strb	r3, [r7, #3]
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
  400f18:	4b0b      	ldr	r3, [pc, #44]	; (400f48 <udi_msc_cbw_validate+0x3c>)
  400f1a:	7b1a      	ldrb	r2, [r3, #12]
  400f1c:	78fb      	ldrb	r3, [r7, #3]
  400f1e:	4053      	eors	r3, r2
  400f20:	b2db      	uxtb	r3, r3
  400f22:	b25b      	sxtb	r3, r3
  400f24:	2b00      	cmp	r3, #0
  400f26:	db04      	blt.n	400f32 <udi_msc_cbw_validate+0x26>
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
  400f28:	4b08      	ldr	r3, [pc, #32]	; (400f4c <udi_msc_cbw_validate+0x40>)
  400f2a:	689a      	ldr	r2, [r3, #8]
  400f2c:	687b      	ldr	r3, [r7, #4]
  400f2e:	429a      	cmp	r2, r3
  400f30:	d205      	bcs.n	400f3e <udi_msc_cbw_validate+0x32>
		udi_msc_sense_fail_cdb_invalid();
  400f32:	4b07      	ldr	r3, [pc, #28]	; (400f50 <udi_msc_cbw_validate+0x44>)
  400f34:	4798      	blx	r3
		udi_msc_csw_process();
  400f36:	4b07      	ldr	r3, [pc, #28]	; (400f54 <udi_msc_cbw_validate+0x48>)
  400f38:	4798      	blx	r3
		return false;
  400f3a:	2300      	movs	r3, #0
  400f3c:	e000      	b.n	400f40 <udi_msc_cbw_validate+0x34>
	 *  - Case  4: Hi > Dn
	 *  - Case  5: Hi > Di
	 *  - Case  9: Ho > Dn
	 *  - Case 11: Ho > Do
	 */
	return true;
  400f3e:	2301      	movs	r3, #1
}
  400f40:	4618      	mov	r0, r3
  400f42:	3708      	adds	r7, #8
  400f44:	46bd      	mov	sp, r7
  400f46:	bd80      	pop	{r7, pc}
  400f48:	20006520 	.word	0x20006520
  400f4c:	20000014 	.word	0x20000014
  400f50:	004011ad 	.word	0x004011ad
  400f54:	00400fe5 	.word	0x00400fe5

00400f58 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
  400f58:	b590      	push	{r4, r7, lr}
  400f5a:	b085      	sub	sp, #20
  400f5c:	af02      	add	r7, sp, #8
  400f5e:	6078      	str	r0, [r7, #4]
  400f60:	460b      	mov	r3, r1
  400f62:	70fb      	strb	r3, [r7, #3]
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
  400f64:	78fa      	ldrb	r2, [r7, #3]
  400f66:	4b0b      	ldr	r3, [pc, #44]	; (400f94 <udi_msc_data_send+0x3c>)
  400f68:	9300      	str	r3, [sp, #0]
  400f6a:	4613      	mov	r3, r2
  400f6c:	687a      	ldr	r2, [r7, #4]
  400f6e:	2101      	movs	r1, #1
  400f70:	2081      	movs	r0, #129	; 0x81
  400f72:	4c09      	ldr	r4, [pc, #36]	; (400f98 <udi_msc_data_send+0x40>)
  400f74:	47a0      	blx	r4
  400f76:	4603      	mov	r3, r0
  400f78:	f083 0301 	eor.w	r3, r3, #1
  400f7c:	b2db      	uxtb	r3, r3
  400f7e:	2b00      	cmp	r3, #0
  400f80:	d003      	beq.n	400f8a <udi_msc_data_send+0x32>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
  400f82:	4b06      	ldr	r3, [pc, #24]	; (400f9c <udi_msc_data_send+0x44>)
  400f84:	4798      	blx	r3
		udi_msc_csw_process();
  400f86:	4b06      	ldr	r3, [pc, #24]	; (400fa0 <udi_msc_data_send+0x48>)
  400f88:	4798      	blx	r3
	}
}
  400f8a:	bf00      	nop
  400f8c:	370c      	adds	r7, #12
  400f8e:	46bd      	mov	sp, r7
  400f90:	bd90      	pop	{r4, r7, pc}
  400f92:	bf00      	nop
  400f94:	00400fa5 	.word	0x00400fa5
  400f98:	00403b7d 	.word	0x00403b7d
  400f9c:	0040117d 	.word	0x0040117d
  400fa0:	00400fe5 	.word	0x00400fe5

00400fa4 <udi_msc_data_sent>:


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
  400fa4:	b580      	push	{r7, lr}
  400fa6:	b082      	sub	sp, #8
  400fa8:	af00      	add	r7, sp, #0
  400faa:	4603      	mov	r3, r0
  400fac:	6039      	str	r1, [r7, #0]
  400fae:	71fb      	strb	r3, [r7, #7]
  400fb0:	4613      	mov	r3, r2
  400fb2:	71bb      	strb	r3, [r7, #6]
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
  400fb4:	79fb      	ldrb	r3, [r7, #7]
  400fb6:	2b00      	cmp	r3, #0
  400fb8:	d10a      	bne.n	400fd0 <udi_msc_data_sent+0x2c>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
  400fba:	4b07      	ldr	r3, [pc, #28]	; (400fd8 <udi_msc_data_sent+0x34>)
  400fbc:	4798      	blx	r3
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
  400fbe:	4b07      	ldr	r3, [pc, #28]	; (400fdc <udi_msc_data_sent+0x38>)
  400fc0:	689a      	ldr	r2, [r3, #8]
  400fc2:	683b      	ldr	r3, [r7, #0]
  400fc4:	1ad3      	subs	r3, r2, r3
  400fc6:	4a05      	ldr	r2, [pc, #20]	; (400fdc <udi_msc_data_sent+0x38>)
  400fc8:	6093      	str	r3, [r2, #8]
	udi_msc_csw_process();
  400fca:	4b05      	ldr	r3, [pc, #20]	; (400fe0 <udi_msc_data_sent+0x3c>)
  400fcc:	4798      	blx	r3
  400fce:	e000      	b.n	400fd2 <udi_msc_data_sent+0x2e>
		return;
  400fd0:	bf00      	nop
}
  400fd2:	3708      	adds	r7, #8
  400fd4:	46bd      	mov	sp, r7
  400fd6:	bd80      	pop	{r7, pc}
  400fd8:	00401131 	.word	0x00401131
  400fdc:	20000014 	.word	0x20000014
  400fe0:	00400fe5 	.word	0x00400fe5

00400fe4 <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
  400fe4:	b580      	push	{r7, lr}
  400fe6:	af00      	add	r7, sp, #0
	if (0 != udi_msc_csw.dCSWDataResidue) {
  400fe8:	4b0d      	ldr	r3, [pc, #52]	; (401020 <udi_msc_csw_process+0x3c>)
  400fea:	689b      	ldr	r3, [r3, #8]
  400fec:	2b00      	cmp	r3, #0
  400fee:	d00b      	beq.n	401008 <udi_msc_csw_process+0x24>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
  400ff0:	4b0c      	ldr	r3, [pc, #48]	; (401024 <udi_msc_csw_process+0x40>)
  400ff2:	7b1b      	ldrb	r3, [r3, #12]
  400ff4:	b25b      	sxtb	r3, r3
  400ff6:	2b00      	cmp	r3, #0
  400ff8:	da03      	bge.n	401002 <udi_msc_csw_process+0x1e>
			udd_ep_set_halt(UDI_MSC_EP_IN);
  400ffa:	2081      	movs	r0, #129	; 0x81
  400ffc:	4b0a      	ldr	r3, [pc, #40]	; (401028 <udi_msc_csw_process+0x44>)
  400ffe:	4798      	blx	r3
  401000:	e002      	b.n	401008 <udi_msc_csw_process+0x24>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
  401002:	2002      	movs	r0, #2
  401004:	4b08      	ldr	r3, [pc, #32]	; (401028 <udi_msc_csw_process+0x44>)
  401006:	4798      	blx	r3
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
  401008:	4b06      	ldr	r3, [pc, #24]	; (401024 <udi_msc_csw_process+0x40>)
  40100a:	685b      	ldr	r3, [r3, #4]
  40100c:	4a04      	ldr	r2, [pc, #16]	; (401020 <udi_msc_csw_process+0x3c>)
  40100e:	6053      	str	r3, [r2, #4]
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
  401010:	4b03      	ldr	r3, [pc, #12]	; (401020 <udi_msc_csw_process+0x3c>)
  401012:	689b      	ldr	r3, [r3, #8]
  401014:	4a02      	ldr	r2, [pc, #8]	; (401020 <udi_msc_csw_process+0x3c>)
  401016:	6093      	str	r3, [r2, #8]
	udi_msc_csw_send();
  401018:	4b04      	ldr	r3, [pc, #16]	; (40102c <udi_msc_csw_process+0x48>)
  40101a:	4798      	blx	r3
}
  40101c:	bf00      	nop
  40101e:	bd80      	pop	{r7, pc}
  401020:	20000014 	.word	0x20000014
  401024:	20006520 	.word	0x20006520
  401028:	0040395d 	.word	0x0040395d
  40102c:	00401031 	.word	0x00401031

00401030 <udi_msc_csw_send>:


void udi_msc_csw_send(void)
{
  401030:	b590      	push	{r4, r7, lr}
  401032:	b083      	sub	sp, #12
  401034:	af02      	add	r7, sp, #8
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
  401036:	4b0b      	ldr	r3, [pc, #44]	; (401064 <udi_msc_csw_send+0x34>)
  401038:	9300      	str	r3, [sp, #0]
  40103a:	230d      	movs	r3, #13
  40103c:	4a0a      	ldr	r2, [pc, #40]	; (401068 <udi_msc_csw_send+0x38>)
  40103e:	2100      	movs	r1, #0
  401040:	2081      	movs	r0, #129	; 0x81
  401042:	4c0a      	ldr	r4, [pc, #40]	; (40106c <udi_msc_csw_send+0x3c>)
  401044:	47a0      	blx	r4
  401046:	4603      	mov	r3, r0
  401048:	f083 0301 	eor.w	r3, r3, #1
  40104c:	b2db      	uxtb	r3, r3
  40104e:	2b00      	cmp	r3, #0
  401050:	d003      	beq.n	40105a <udi_msc_csw_send+0x2a>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
  401052:	4907      	ldr	r1, [pc, #28]	; (401070 <udi_msc_csw_send+0x40>)
  401054:	2081      	movs	r0, #129	; 0x81
  401056:	4b07      	ldr	r3, [pc, #28]	; (401074 <udi_msc_csw_send+0x44>)
  401058:	4798      	blx	r3
	}
}
  40105a:	bf00      	nop
  40105c:	3704      	adds	r7, #4
  40105e:	46bd      	mov	sp, r7
  401060:	bd90      	pop	{r4, r7, pc}
  401062:	bf00      	nop
  401064:	00401079 	.word	0x00401079
  401068:	20000014 	.word	0x20000014
  40106c:	00403b7d 	.word	0x00403b7d
  401070:	00401031 	.word	0x00401031
  401074:	00403ef1 	.word	0x00403ef1

00401078 <udi_msc_csw_sent>:


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
  401078:	b580      	push	{r7, lr}
  40107a:	b082      	sub	sp, #8
  40107c:	af00      	add	r7, sp, #0
  40107e:	4603      	mov	r3, r0
  401080:	6039      	str	r1, [r7, #0]
  401082:	71fb      	strb	r3, [r7, #7]
  401084:	4613      	mov	r3, r2
  401086:	71bb      	strb	r3, [r7, #6]
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
  401088:	4b02      	ldr	r3, [pc, #8]	; (401094 <udi_msc_csw_sent+0x1c>)
  40108a:	4798      	blx	r3
}
  40108c:	bf00      	nop
  40108e:	3708      	adds	r7, #8
  401090:	46bd      	mov	sp, r7
  401092:	bd80      	pop	{r7, pc}
  401094:	00400c35 	.word	0x00400c35

00401098 <udi_msc_clear_sense>:

//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
  401098:	b580      	push	{r7, lr}
  40109a:	af00      	add	r7, sp, #0
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
  40109c:	2212      	movs	r2, #18
  40109e:	2100      	movs	r1, #0
  4010a0:	4805      	ldr	r0, [pc, #20]	; (4010b8 <udi_msc_clear_sense+0x20>)
  4010a2:	4b06      	ldr	r3, [pc, #24]	; (4010bc <udi_msc_clear_sense+0x24>)
  4010a4:	4798      	blx	r3
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
  4010a6:	4b04      	ldr	r3, [pc, #16]	; (4010b8 <udi_msc_clear_sense+0x20>)
  4010a8:	22f0      	movs	r2, #240	; 0xf0
  4010aa:	701a      	strb	r2, [r3, #0]
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
  4010ac:	4b02      	ldr	r3, [pc, #8]	; (4010b8 <udi_msc_clear_sense+0x20>)
  4010ae:	220a      	movs	r2, #10
  4010b0:	71da      	strb	r2, [r3, #7]
}
  4010b2:	bf00      	nop
  4010b4:	bd80      	pop	{r7, pc}
  4010b6:	bf00      	nop
  4010b8:	20006544 	.word	0x20006544
  4010bc:	00406fc5 	.word	0x00406fc5

004010c0 <udi_msc_sense_fail>:

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
  4010c0:	b580      	push	{r7, lr}
  4010c2:	b082      	sub	sp, #8
  4010c4:	af00      	add	r7, sp, #0
  4010c6:	4603      	mov	r3, r0
  4010c8:	603a      	str	r2, [r7, #0]
  4010ca:	71fb      	strb	r3, [r7, #7]
  4010cc:	460b      	mov	r3, r1
  4010ce:	80bb      	strh	r3, [r7, #4]
	udi_msc_clear_sense();
  4010d0:	4b14      	ldr	r3, [pc, #80]	; (401124 <udi_msc_sense_fail+0x64>)
  4010d2:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
  4010d4:	4b14      	ldr	r3, [pc, #80]	; (401128 <udi_msc_sense_fail+0x68>)
  4010d6:	2201      	movs	r2, #1
  4010d8:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.sense_flag_key = sense_key;
  4010da:	4a14      	ldr	r2, [pc, #80]	; (40112c <udi_msc_sense_fail+0x6c>)
  4010dc:	79fb      	ldrb	r3, [r7, #7]
  4010de:	7093      	strb	r3, [r2, #2]
	udi_msc_sense.information[0] = lba >> 24;
  4010e0:	683b      	ldr	r3, [r7, #0]
  4010e2:	0e1b      	lsrs	r3, r3, #24
  4010e4:	b2da      	uxtb	r2, r3
  4010e6:	4b11      	ldr	r3, [pc, #68]	; (40112c <udi_msc_sense_fail+0x6c>)
  4010e8:	70da      	strb	r2, [r3, #3]
	udi_msc_sense.information[1] = lba >> 16;
  4010ea:	683b      	ldr	r3, [r7, #0]
  4010ec:	0c1b      	lsrs	r3, r3, #16
  4010ee:	b2da      	uxtb	r2, r3
  4010f0:	4b0e      	ldr	r3, [pc, #56]	; (40112c <udi_msc_sense_fail+0x6c>)
  4010f2:	711a      	strb	r2, [r3, #4]
	udi_msc_sense.information[2] = lba >> 8;
  4010f4:	683b      	ldr	r3, [r7, #0]
  4010f6:	0a1b      	lsrs	r3, r3, #8
  4010f8:	b2da      	uxtb	r2, r3
  4010fa:	4b0c      	ldr	r3, [pc, #48]	; (40112c <udi_msc_sense_fail+0x6c>)
  4010fc:	715a      	strb	r2, [r3, #5]
	udi_msc_sense.information[3] = lba;
  4010fe:	683b      	ldr	r3, [r7, #0]
  401100:	b2da      	uxtb	r2, r3
  401102:	4b0a      	ldr	r3, [pc, #40]	; (40112c <udi_msc_sense_fail+0x6c>)
  401104:	719a      	strb	r2, [r3, #6]
	udi_msc_sense.AddSenseCode = add_sense >> 8;
  401106:	88bb      	ldrh	r3, [r7, #4]
  401108:	0a1b      	lsrs	r3, r3, #8
  40110a:	b29b      	uxth	r3, r3
  40110c:	b2da      	uxtb	r2, r3
  40110e:	4b07      	ldr	r3, [pc, #28]	; (40112c <udi_msc_sense_fail+0x6c>)
  401110:	731a      	strb	r2, [r3, #12]
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
  401112:	88bb      	ldrh	r3, [r7, #4]
  401114:	b2da      	uxtb	r2, r3
  401116:	4b05      	ldr	r3, [pc, #20]	; (40112c <udi_msc_sense_fail+0x6c>)
  401118:	735a      	strb	r2, [r3, #13]
}
  40111a:	bf00      	nop
  40111c:	3708      	adds	r7, #8
  40111e:	46bd      	mov	sp, r7
  401120:	bd80      	pop	{r7, pc}
  401122:	bf00      	nop
  401124:	00401099 	.word	0x00401099
  401128:	20000014 	.word	0x20000014
  40112c:	20006544 	.word	0x20006544

00401130 <udi_msc_sense_pass>:

static void udi_msc_sense_pass(void)
{
  401130:	b580      	push	{r7, lr}
  401132:	af00      	add	r7, sp, #0
	udi_msc_clear_sense();
  401134:	4b03      	ldr	r3, [pc, #12]	; (401144 <udi_msc_sense_pass+0x14>)
  401136:	4798      	blx	r3
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
  401138:	4b03      	ldr	r3, [pc, #12]	; (401148 <udi_msc_sense_pass+0x18>)
  40113a:	2200      	movs	r2, #0
  40113c:	731a      	strb	r2, [r3, #12]
}
  40113e:	bf00      	nop
  401140:	bd80      	pop	{r7, pc}
  401142:	bf00      	nop
  401144:	00401099 	.word	0x00401099
  401148:	20000014 	.word	0x20000014

0040114c <udi_msc_sense_fail_not_present>:


static void udi_msc_sense_fail_not_present(void)
{
  40114c:	b580      	push	{r7, lr}
  40114e:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
  401150:	2200      	movs	r2, #0
  401152:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
  401156:	2002      	movs	r0, #2
  401158:	4b01      	ldr	r3, [pc, #4]	; (401160 <udi_msc_sense_fail_not_present+0x14>)
  40115a:	4798      	blx	r3
}
  40115c:	bf00      	nop
  40115e:	bd80      	pop	{r7, pc}
  401160:	004010c1 	.word	0x004010c1

00401164 <udi_msc_sense_fail_busy_or_change>:

static void udi_msc_sense_fail_busy_or_change(void)
{
  401164:	b580      	push	{r7, lr}
  401166:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
  401168:	2200      	movs	r2, #0
  40116a:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  40116e:	2006      	movs	r0, #6
  401170:	4b01      	ldr	r3, [pc, #4]	; (401178 <udi_msc_sense_fail_busy_or_change+0x14>)
  401172:	4798      	blx	r3
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
  401174:	bf00      	nop
  401176:	bd80      	pop	{r7, pc}
  401178:	004010c1 	.word	0x004010c1

0040117c <udi_msc_sense_fail_hardware>:

static void udi_msc_sense_fail_hardware(void)
{
  40117c:	b580      	push	{r7, lr}
  40117e:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
  401180:	2200      	movs	r2, #0
  401182:	2100      	movs	r1, #0
  401184:	2004      	movs	r0, #4
  401186:	4b02      	ldr	r3, [pc, #8]	; (401190 <udi_msc_sense_fail_hardware+0x14>)
  401188:	4798      	blx	r3
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
  40118a:	bf00      	nop
  40118c:	bd80      	pop	{r7, pc}
  40118e:	bf00      	nop
  401190:	004010c1 	.word	0x004010c1

00401194 <udi_msc_sense_fail_protected>:

static void udi_msc_sense_fail_protected(void)
{
  401194:	b580      	push	{r7, lr}
  401196:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
  401198:	2200      	movs	r2, #0
  40119a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
  40119e:	2007      	movs	r0, #7
  4011a0:	4b01      	ldr	r3, [pc, #4]	; (4011a8 <udi_msc_sense_fail_protected+0x14>)
  4011a2:	4798      	blx	r3
}
  4011a4:	bf00      	nop
  4011a6:	bd80      	pop	{r7, pc}
  4011a8:	004010c1 	.word	0x004010c1

004011ac <udi_msc_sense_fail_cdb_invalid>:

static void udi_msc_sense_fail_cdb_invalid(void)
{
  4011ac:	b580      	push	{r7, lr}
  4011ae:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
  4011b0:	2200      	movs	r2, #0
  4011b2:	f44f 5110 	mov.w	r1, #9216	; 0x2400
  4011b6:	2005      	movs	r0, #5
  4011b8:	4b01      	ldr	r3, [pc, #4]	; (4011c0 <udi_msc_sense_fail_cdb_invalid+0x14>)
  4011ba:	4798      	blx	r3
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
  4011bc:	bf00      	nop
  4011be:	bd80      	pop	{r7, pc}
  4011c0:	004010c1 	.word	0x004010c1

004011c4 <udi_msc_sense_command_invalid>:

static void udi_msc_sense_command_invalid(void)
{
  4011c4:	b580      	push	{r7, lr}
  4011c6:	af00      	add	r7, sp, #0
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
  4011c8:	2200      	movs	r2, #0
  4011ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  4011ce:	2005      	movs	r0, #5
  4011d0:	4b01      	ldr	r3, [pc, #4]	; (4011d8 <udi_msc_sense_command_invalid+0x14>)
  4011d2:	4798      	blx	r3
			SCSI_ASC_INVALID_COMMAND_OPERATION_CODE, 0);
}
  4011d4:	bf00      	nop
  4011d6:	bd80      	pop	{r7, pc}
  4011d8:	004010c1 	.word	0x004010c1

004011dc <udi_msc_spc_requestsense>:

//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
  4011dc:	b580      	push	{r7, lr}
  4011de:	b082      	sub	sp, #8
  4011e0:	af00      	add	r7, sp, #0
	uint8_t length = udi_msc_cbw.CDB[4];
  4011e2:	4b0e      	ldr	r3, [pc, #56]	; (40121c <udi_msc_spc_requestsense+0x40>)
  4011e4:	7cdb      	ldrb	r3, [r3, #19]
  4011e6:	71fb      	strb	r3, [r7, #7]

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
  4011e8:	79fb      	ldrb	r3, [r7, #7]
  4011ea:	2b12      	cmp	r3, #18
  4011ec:	d901      	bls.n	4011f2 <udi_msc_spc_requestsense+0x16>
		length = sizeof(udi_msc_sense);
  4011ee:	2312      	movs	r3, #18
  4011f0:	71fb      	strb	r3, [r7, #7]

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
  4011f2:	79fb      	ldrb	r3, [r7, #7]
  4011f4:	2180      	movs	r1, #128	; 0x80
  4011f6:	4618      	mov	r0, r3
  4011f8:	4b09      	ldr	r3, [pc, #36]	; (401220 <udi_msc_spc_requestsense+0x44>)
  4011fa:	4798      	blx	r3
  4011fc:	4603      	mov	r3, r0
  4011fe:	f083 0301 	eor.w	r3, r3, #1
  401202:	b2db      	uxtb	r3, r3
  401204:	2b00      	cmp	r3, #0
  401206:	d105      	bne.n	401214 <udi_msc_spc_requestsense+0x38>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
  401208:	79fb      	ldrb	r3, [r7, #7]
  40120a:	4619      	mov	r1, r3
  40120c:	4805      	ldr	r0, [pc, #20]	; (401224 <udi_msc_spc_requestsense+0x48>)
  40120e:	4b06      	ldr	r3, [pc, #24]	; (401228 <udi_msc_spc_requestsense+0x4c>)
  401210:	4798      	blx	r3
  401212:	e000      	b.n	401216 <udi_msc_spc_requestsense+0x3a>
		return;
  401214:	bf00      	nop
}
  401216:	3708      	adds	r7, #8
  401218:	46bd      	mov	sp, r7
  40121a:	bd80      	pop	{r7, pc}
  40121c:	20006520 	.word	0x20006520
  401220:	00400f0d 	.word	0x00400f0d
  401224:	20006544 	.word	0x20006544
  401228:	00400f59 	.word	0x00400f59

0040122c <udi_msc_spc_inquiry>:


static void udi_msc_spc_inquiry(void)
{
  40122c:	b590      	push	{r4, r7, lr}
  40122e:	b083      	sub	sp, #12
  401230:	af00      	add	r7, sp, #0
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
  401232:	4b35      	ldr	r3, [pc, #212]	; (401308 <udi_msc_spc_inquiry+0xdc>)
  401234:	7cdb      	ldrb	r3, [r3, #19]
  401236:	71fb      	strb	r3, [r7, #7]

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
  401238:	79fb      	ldrb	r3, [r7, #7]
  40123a:	2b24      	cmp	r3, #36	; 0x24
  40123c:	d901      	bls.n	401242 <udi_msc_spc_inquiry+0x16>
		length = sizeof(udi_msc_inquiry_data);
  40123e:	2324      	movs	r3, #36	; 0x24
  401240:	71fb      	strb	r3, [r7, #7]

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
  401242:	79fb      	ldrb	r3, [r7, #7]
  401244:	2180      	movs	r1, #128	; 0x80
  401246:	4618      	mov	r0, r3
  401248:	4b30      	ldr	r3, [pc, #192]	; (40130c <udi_msc_spc_inquiry+0xe0>)
  40124a:	4798      	blx	r3
  40124c:	4603      	mov	r3, r0
  40124e:	f083 0301 	eor.w	r3, r3, #1
  401252:	b2db      	uxtb	r3, r3
  401254:	2b00      	cmp	r3, #0
  401256:	d152      	bne.n	4012fe <udi_msc_spc_inquiry+0xd2>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
  401258:	4b2b      	ldr	r3, [pc, #172]	; (401308 <udi_msc_spc_inquiry+0xdc>)
  40125a:	7c1b      	ldrb	r3, [r3, #16]
  40125c:	f003 0303 	and.w	r3, r3, #3
  401260:	2b00      	cmp	r3, #0
  401262:	d103      	bne.n	40126c <udi_msc_spc_inquiry+0x40>
			|| (0 != udi_msc_cbw.CDB[2])) {
  401264:	4b28      	ldr	r3, [pc, #160]	; (401308 <udi_msc_spc_inquiry+0xdc>)
  401266:	7c5b      	ldrb	r3, [r3, #17]
  401268:	2b00      	cmp	r3, #0
  40126a:	d004      	beq.n	401276 <udi_msc_spc_inquiry+0x4a>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
  40126c:	4b28      	ldr	r3, [pc, #160]	; (401310 <udi_msc_spc_inquiry+0xe4>)
  40126e:	4798      	blx	r3
		udi_msc_csw_process();
  401270:	4b28      	ldr	r3, [pc, #160]	; (401314 <udi_msc_spc_inquiry+0xe8>)
  401272:	4798      	blx	r3
		return;
  401274:	e044      	b.n	401300 <udi_msc_spc_inquiry+0xd4>
	}

	udi_msc_inquiry_data.flags1 = mem_removal(udi_msc_cbw.bCBWLUN) ?
  401276:	4b24      	ldr	r3, [pc, #144]	; (401308 <udi_msc_spc_inquiry+0xdc>)
  401278:	7b5b      	ldrb	r3, [r3, #13]
  40127a:	4618      	mov	r0, r3
  40127c:	4b26      	ldr	r3, [pc, #152]	; (401318 <udi_msc_spc_inquiry+0xec>)
  40127e:	4798      	blx	r3
  401280:	4603      	mov	r3, r0
  401282:	2b00      	cmp	r3, #0
  401284:	d001      	beq.n	40128a <udi_msc_spc_inquiry+0x5e>
  401286:	2280      	movs	r2, #128	; 0x80
  401288:	e000      	b.n	40128c <udi_msc_spc_inquiry+0x60>
  40128a:	2200      	movs	r2, #0
  40128c:	4b23      	ldr	r3, [pc, #140]	; (40131c <udi_msc_spc_inquiry+0xf0>)
  40128e:	705a      	strb	r2, [r3, #1]
			SCSI_INQ_RMB : 0;

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
  401290:	4b1d      	ldr	r3, [pc, #116]	; (401308 <udi_msc_spc_inquiry+0xdc>)
  401292:	7b5b      	ldrb	r3, [r3, #13]
  401294:	4618      	mov	r0, r3
  401296:	4b22      	ldr	r3, [pc, #136]	; (401320 <udi_msc_spc_inquiry+0xf4>)
  401298:	4798      	blx	r3
  40129a:	4603      	mov	r3, r0
  40129c:	1c5a      	adds	r2, r3, #1
	memcpy(udi_msc_inquiry_data.product_id,
  40129e:	4b1f      	ldr	r3, [pc, #124]	; (40131c <udi_msc_spc_inquiry+0xf0>)
  4012a0:	f103 0410 	add.w	r4, r3, #16
  4012a4:	4613      	mov	r3, r2
  4012a6:	6818      	ldr	r0, [r3, #0]
  4012a8:	6859      	ldr	r1, [r3, #4]
  4012aa:	689a      	ldr	r2, [r3, #8]
  4012ac:	68db      	ldr	r3, [r3, #12]
  4012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
  4012b0:	2300      	movs	r3, #0
  4012b2:	71bb      	strb	r3, [r7, #6]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  4012b4:	e00e      	b.n	4012d4 <udi_msc_spc_inquiry+0xa8>
		if ((0 == udi_msc_inquiry_data.product_id[i])
  4012b6:	79bb      	ldrb	r3, [r7, #6]
  4012b8:	4a18      	ldr	r2, [pc, #96]	; (40131c <udi_msc_spc_inquiry+0xf0>)
  4012ba:	4413      	add	r3, r2
  4012bc:	7c1b      	ldrb	r3, [r3, #16]
  4012be:	2b00      	cmp	r3, #0
  4012c0:	d014      	beq.n	4012ec <udi_msc_spc_inquiry+0xc0>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
  4012c2:	79bb      	ldrb	r3, [r7, #6]
  4012c4:	4a15      	ldr	r2, [pc, #84]	; (40131c <udi_msc_spc_inquiry+0xf0>)
  4012c6:	4413      	add	r3, r2
  4012c8:	7c1b      	ldrb	r3, [r3, #16]
  4012ca:	2b22      	cmp	r3, #34	; 0x22
  4012cc:	d00e      	beq.n	4012ec <udi_msc_spc_inquiry+0xc0>
			break;
		}
		i++;
  4012ce:	79bb      	ldrb	r3, [r7, #6]
  4012d0:	3301      	adds	r3, #1
  4012d2:	71bb      	strb	r3, [r7, #6]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  4012d4:	79bb      	ldrb	r3, [r7, #6]
  4012d6:	2b10      	cmp	r3, #16
  4012d8:	d1ed      	bne.n	4012b6 <udi_msc_spc_inquiry+0x8a>
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  4012da:	e007      	b.n	4012ec <udi_msc_spc_inquiry+0xc0>
		udi_msc_inquiry_data.product_id[i] = ' ';
  4012dc:	79bb      	ldrb	r3, [r7, #6]
  4012de:	4a0f      	ldr	r2, [pc, #60]	; (40131c <udi_msc_spc_inquiry+0xf0>)
  4012e0:	4413      	add	r3, r2
  4012e2:	2220      	movs	r2, #32
  4012e4:	741a      	strb	r2, [r3, #16]
		i++;
  4012e6:	79bb      	ldrb	r3, [r7, #6]
  4012e8:	3301      	adds	r3, #1
  4012ea:	71bb      	strb	r3, [r7, #6]
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
  4012ec:	79bb      	ldrb	r3, [r7, #6]
  4012ee:	2b10      	cmp	r3, #16
  4012f0:	d1f4      	bne.n	4012dc <udi_msc_spc_inquiry+0xb0>
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
  4012f2:	79fb      	ldrb	r3, [r7, #7]
  4012f4:	4619      	mov	r1, r3
  4012f6:	4809      	ldr	r0, [pc, #36]	; (40131c <udi_msc_spc_inquiry+0xf0>)
  4012f8:	4b0a      	ldr	r3, [pc, #40]	; (401324 <udi_msc_spc_inquiry+0xf8>)
  4012fa:	4798      	blx	r3
  4012fc:	e000      	b.n	401300 <udi_msc_spc_inquiry+0xd4>
		return;
  4012fe:	bf00      	nop
}
  401300:	370c      	adds	r7, #12
  401302:	46bd      	mov	sp, r7
  401304:	bd90      	pop	{r4, r7, pc}
  401306:	bf00      	nop
  401308:	20006520 	.word	0x20006520
  40130c:	00400f0d 	.word	0x00400f0d
  401310:	004011ad 	.word	0x004011ad
  401314:	00400fe5 	.word	0x00400fe5
  401318:	0040098d 	.word	0x0040098d
  40131c:	20000024 	.word	0x20000024
  401320:	004009f5 	.word	0x004009f5
  401324:	00400f59 	.word	0x00400f59

00401328 <udi_msc_spc_testunitready_global>:


static bool udi_msc_spc_testunitready_global(void)
{
  401328:	b580      	push	{r7, lr}
  40132a:	af00      	add	r7, sp, #0
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
  40132c:	4b0c      	ldr	r3, [pc, #48]	; (401360 <udi_msc_spc_testunitready_global+0x38>)
  40132e:	7b5b      	ldrb	r3, [r3, #13]
  401330:	4618      	mov	r0, r3
  401332:	4b0c      	ldr	r3, [pc, #48]	; (401364 <udi_msc_spc_testunitready_global+0x3c>)
  401334:	4798      	blx	r3
  401336:	4603      	mov	r3, r0
  401338:	2b02      	cmp	r3, #2
  40133a:	d008      	beq.n	40134e <udi_msc_spc_testunitready_global+0x26>
  40133c:	2b03      	cmp	r3, #3
  40133e:	d003      	beq.n	401348 <udi_msc_spc_testunitready_global+0x20>
  401340:	2b00      	cmp	r3, #0
  401342:	d107      	bne.n	401354 <udi_msc_spc_testunitready_global+0x2c>
	case CTRL_GOOD:
		return true;	// Don't change sense data
  401344:	2301      	movs	r3, #1
  401346:	e009      	b.n	40135c <udi_msc_spc_testunitready_global+0x34>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
  401348:	4b07      	ldr	r3, [pc, #28]	; (401368 <udi_msc_spc_testunitready_global+0x40>)
  40134a:	4798      	blx	r3
		break;
  40134c:	e005      	b.n	40135a <udi_msc_spc_testunitready_global+0x32>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
  40134e:	4b07      	ldr	r3, [pc, #28]	; (40136c <udi_msc_spc_testunitready_global+0x44>)
  401350:	4798      	blx	r3
		break;
  401352:	e002      	b.n	40135a <udi_msc_spc_testunitready_global+0x32>
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
  401354:	4b06      	ldr	r3, [pc, #24]	; (401370 <udi_msc_spc_testunitready_global+0x48>)
  401356:	4798      	blx	r3
		break;
  401358:	bf00      	nop
	}
	return false;
  40135a:	2300      	movs	r3, #0
}
  40135c:	4618      	mov	r0, r3
  40135e:	bd80      	pop	{r7, pc}
  401360:	20006520 	.word	0x20006520
  401364:	004007bd 	.word	0x004007bd
  401368:	00401165 	.word	0x00401165
  40136c:	0040114d 	.word	0x0040114d
  401370:	0040117d 	.word	0x0040117d

00401374 <udi_msc_spc_testunitready>:


static void udi_msc_spc_testunitready(void)
{
  401374:	b580      	push	{r7, lr}
  401376:	af00      	add	r7, sp, #0
	if (udi_msc_spc_testunitready_global()) {
  401378:	4b05      	ldr	r3, [pc, #20]	; (401390 <udi_msc_spc_testunitready+0x1c>)
  40137a:	4798      	blx	r3
  40137c:	4603      	mov	r3, r0
  40137e:	2b00      	cmp	r3, #0
  401380:	d001      	beq.n	401386 <udi_msc_spc_testunitready+0x12>
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
  401382:	4b04      	ldr	r3, [pc, #16]	; (401394 <udi_msc_spc_testunitready+0x20>)
  401384:	4798      	blx	r3
	}
	// Send status in CSW packet
	udi_msc_csw_process();
  401386:	4b04      	ldr	r3, [pc, #16]	; (401398 <udi_msc_spc_testunitready+0x24>)
  401388:	4798      	blx	r3
}
  40138a:	bf00      	nop
  40138c:	bd80      	pop	{r7, pc}
  40138e:	bf00      	nop
  401390:	00401329 	.word	0x00401329
  401394:	00401131 	.word	0x00401131
  401398:	00400fe5 	.word	0x00400fe5

0040139c <udi_msc_spc_mode_sense>:


static void udi_msc_spc_mode_sense(bool b_sense10)
{
  40139c:	b580      	push	{r7, lr}
  40139e:	b086      	sub	sp, #24
  4013a0:	af00      	add	r7, sp, #0
  4013a2:	4603      	mov	r3, r0
  4013a4:	71fb      	strb	r3, [r7, #7]
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
  4013a6:	2214      	movs	r2, #20
  4013a8:	2100      	movs	r1, #0
  4013aa:	483a      	ldr	r0, [pc, #232]	; (401494 <udi_msc_spc_mode_sense+0xf8>)
  4013ac:	4b3a      	ldr	r3, [pc, #232]	; (401498 <udi_msc_spc_mode_sense+0xfc>)
  4013ae:	4798      	blx	r3

	// Initialize process
	if (b_sense10) {
  4013b0:	79fb      	ldrb	r3, [r7, #7]
  4013b2:	2b00      	cmp	r3, #0
  4013b4:	d007      	beq.n	4013c6 <udi_msc_spc_mode_sense+0x2a>
		request_lgt = udi_msc_cbw.CDB[8];
  4013b6:	4b39      	ldr	r3, [pc, #228]	; (40149c <udi_msc_spc_mode_sense+0x100>)
  4013b8:	7ddb      	ldrb	r3, [r3, #23]
  4013ba:	75bb      	strb	r3, [r7, #22]
		ptr_mode = &sense.s10.sense_data;
  4013bc:	4b38      	ldr	r3, [pc, #224]	; (4014a0 <udi_msc_spc_mode_sense+0x104>)
  4013be:	613b      	str	r3, [r7, #16]
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
  4013c0:	2308      	movs	r3, #8
  4013c2:	75fb      	strb	r3, [r7, #23]
  4013c4:	e006      	b.n	4013d4 <udi_msc_spc_mode_sense+0x38>
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
  4013c6:	4b35      	ldr	r3, [pc, #212]	; (40149c <udi_msc_spc_mode_sense+0x100>)
  4013c8:	7cdb      	ldrb	r3, [r3, #19]
  4013ca:	75bb      	strb	r3, [r7, #22]
		ptr_mode = &sense.s6.sense_data;
  4013cc:	4b35      	ldr	r3, [pc, #212]	; (4014a4 <udi_msc_spc_mode_sense+0x108>)
  4013ce:	613b      	str	r3, [r7, #16]
		data_sense_lgt = sizeof(struct scsi_mode_param_header6);
  4013d0:	2304      	movs	r3, #4
  4013d2:	75fb      	strb	r3, [r7, #23]
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
  4013d4:	4b31      	ldr	r3, [pc, #196]	; (40149c <udi_msc_spc_mode_sense+0x100>)
  4013d6:	7c5b      	ldrb	r3, [r3, #17]
  4013d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4013dc:	73fb      	strb	r3, [r7, #15]
	if ((SCSI_MS_MODE_INFEXP == mode)
  4013de:	7bfb      	ldrb	r3, [r7, #15]
  4013e0:	2b1c      	cmp	r3, #28
  4013e2:	d002      	beq.n	4013ea <udi_msc_spc_mode_sense+0x4e>
			|| (SCSI_MS_MODE_ALL == mode)) {
  4013e4:	7bfb      	ldrb	r3, [r7, #15]
  4013e6:	2b3f      	cmp	r3, #63	; 0x3f
  4013e8:	d10b      	bne.n	401402 <udi_msc_spc_mode_sense+0x66>
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
  4013ea:	693b      	ldr	r3, [r7, #16]
  4013ec:	221c      	movs	r2, #28
  4013ee:	701a      	strb	r2, [r3, #0]
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
  4013f0:	693b      	ldr	r3, [r7, #16]
  4013f2:	220a      	movs	r2, #10
  4013f4:	705a      	strb	r2, [r3, #1]
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
  4013f6:	693b      	ldr	r3, [r7, #16]
  4013f8:	2205      	movs	r2, #5
  4013fa:	70da      	strb	r2, [r3, #3]
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
  4013fc:	7dfb      	ldrb	r3, [r7, #23]
  4013fe:	330c      	adds	r3, #12
  401400:	75fb      	strb	r3, [r7, #23]
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
  401402:	7dba      	ldrb	r2, [r7, #22]
  401404:	7dfb      	ldrb	r3, [r7, #23]
  401406:	429a      	cmp	r2, r3
  401408:	d901      	bls.n	40140e <udi_msc_spc_mode_sense+0x72>
		request_lgt = data_sense_lgt;
  40140a:	7dfb      	ldrb	r3, [r7, #23]
  40140c:	75bb      	strb	r3, [r7, #22]
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
  40140e:	7dbb      	ldrb	r3, [r7, #22]
  401410:	2180      	movs	r1, #128	; 0x80
  401412:	4618      	mov	r0, r3
  401414:	4b24      	ldr	r3, [pc, #144]	; (4014a8 <udi_msc_spc_mode_sense+0x10c>)
  401416:	4798      	blx	r3
  401418:	4603      	mov	r3, r0
  40141a:	f083 0301 	eor.w	r3, r3, #1
  40141e:	b2db      	uxtb	r3, r3
  401420:	2b00      	cmp	r3, #0
  401422:	d132      	bne.n	40148a <udi_msc_spc_mode_sense+0xee>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
  401424:	4b1d      	ldr	r3, [pc, #116]	; (40149c <udi_msc_spc_mode_sense+0x100>)
  401426:	7b5b      	ldrb	r3, [r3, #13]
  401428:	4618      	mov	r0, r3
  40142a:	4b20      	ldr	r3, [pc, #128]	; (4014ac <udi_msc_spc_mode_sense+0x110>)
  40142c:	4798      	blx	r3
  40142e:	4603      	mov	r3, r0
  401430:	2b00      	cmp	r3, #0
  401432:	d001      	beq.n	401438 <udi_msc_spc_mode_sense+0x9c>
  401434:	2380      	movs	r3, #128	; 0x80
  401436:	e000      	b.n	40143a <udi_msc_spc_mode_sense+0x9e>
  401438:	2300      	movs	r3, #0
  40143a:	73bb      	strb	r3, [r7, #14]

	if (b_sense10) {
  40143c:	79fb      	ldrb	r3, [r7, #7]
  40143e:	2b00      	cmp	r3, #0
  401440:	d015      	beq.n	40146e <udi_msc_spc_mode_sense+0xd2>
		sense.s10.header.mode_data_length =
				cpu_to_be16((data_sense_lgt - 2));
  401442:	7dfb      	ldrb	r3, [r7, #23]
  401444:	b29b      	uxth	r3, r3
  401446:	3b02      	subs	r3, #2
  401448:	b29b      	uxth	r3, r3
  40144a:	0a1b      	lsrs	r3, r3, #8
  40144c:	b29b      	uxth	r3, r3
  40144e:	b21a      	sxth	r2, r3
  401450:	7dfb      	ldrb	r3, [r7, #23]
  401452:	b29b      	uxth	r3, r3
  401454:	3b02      	subs	r3, #2
  401456:	b29b      	uxth	r3, r3
  401458:	021b      	lsls	r3, r3, #8
  40145a:	b21b      	sxth	r3, r3
  40145c:	4313      	orrs	r3, r2
  40145e:	b21b      	sxth	r3, r3
  401460:	b29a      	uxth	r2, r3
		sense.s10.header.mode_data_length =
  401462:	4b0c      	ldr	r3, [pc, #48]	; (401494 <udi_msc_spc_mode_sense+0xf8>)
  401464:	801a      	strh	r2, [r3, #0]
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
  401466:	4a0b      	ldr	r2, [pc, #44]	; (401494 <udi_msc_spc_mode_sense+0xf8>)
  401468:	7bbb      	ldrb	r3, [r7, #14]
  40146a:	70d3      	strb	r3, [r2, #3]
  40146c:	e007      	b.n	40147e <udi_msc_spc_mode_sense+0xe2>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
  40146e:	7dfb      	ldrb	r3, [r7, #23]
  401470:	3b01      	subs	r3, #1
  401472:	b2da      	uxtb	r2, r3
  401474:	4b07      	ldr	r3, [pc, #28]	; (401494 <udi_msc_spc_mode_sense+0xf8>)
  401476:	701a      	strb	r2, [r3, #0]
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
  401478:	4a06      	ldr	r2, [pc, #24]	; (401494 <udi_msc_spc_mode_sense+0xf8>)
  40147a:	7bbb      	ldrb	r3, [r7, #14]
  40147c:	7093      	strb	r3, [r2, #2]
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
  40147e:	7dbb      	ldrb	r3, [r7, #22]
  401480:	4619      	mov	r1, r3
  401482:	4804      	ldr	r0, [pc, #16]	; (401494 <udi_msc_spc_mode_sense+0xf8>)
  401484:	4b0a      	ldr	r3, [pc, #40]	; (4014b0 <udi_msc_spc_mode_sense+0x114>)
  401486:	4798      	blx	r3
  401488:	e000      	b.n	40148c <udi_msc_spc_mode_sense+0xf0>
		return;
  40148a:	bf00      	nop
}
  40148c:	3718      	adds	r7, #24
  40148e:	46bd      	mov	sp, r7
  401490:	bd80      	pop	{r7, pc}
  401492:	bf00      	nop
  401494:	20006564 	.word	0x20006564
  401498:	00406fc5 	.word	0x00406fc5
  40149c:	20006520 	.word	0x20006520
  4014a0:	2000656c 	.word	0x2000656c
  4014a4:	20006568 	.word	0x20006568
  4014a8:	00400f0d 	.word	0x00400f0d
  4014ac:	00400925 	.word	0x00400925
  4014b0:	00400f59 	.word	0x00400f59

004014b4 <udi_msc_spc_prevent_allow_medium_removal>:


static void udi_msc_spc_prevent_allow_medium_removal(void)
{
  4014b4:	b580      	push	{r7, lr}
  4014b6:	b082      	sub	sp, #8
  4014b8:	af00      	add	r7, sp, #0
	uint8_t prevent = udi_msc_cbw.CDB[4];
  4014ba:	4b08      	ldr	r3, [pc, #32]	; (4014dc <udi_msc_spc_prevent_allow_medium_removal+0x28>)
  4014bc:	7cdb      	ldrb	r3, [r3, #19]
  4014be:	71fb      	strb	r3, [r7, #7]
	if (0 == prevent) {
  4014c0:	79fb      	ldrb	r3, [r7, #7]
  4014c2:	2b00      	cmp	r3, #0
  4014c4:	d102      	bne.n	4014cc <udi_msc_spc_prevent_allow_medium_removal+0x18>
		udi_msc_sense_pass();
  4014c6:	4b06      	ldr	r3, [pc, #24]	; (4014e0 <udi_msc_spc_prevent_allow_medium_removal+0x2c>)
  4014c8:	4798      	blx	r3
  4014ca:	e001      	b.n	4014d0 <udi_msc_spc_prevent_allow_medium_removal+0x1c>
	} else {
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
  4014cc:	4b05      	ldr	r3, [pc, #20]	; (4014e4 <udi_msc_spc_prevent_allow_medium_removal+0x30>)
  4014ce:	4798      	blx	r3
	}
	udi_msc_csw_process();
  4014d0:	4b05      	ldr	r3, [pc, #20]	; (4014e8 <udi_msc_spc_prevent_allow_medium_removal+0x34>)
  4014d2:	4798      	blx	r3
}
  4014d4:	bf00      	nop
  4014d6:	3708      	adds	r7, #8
  4014d8:	46bd      	mov	sp, r7
  4014da:	bd80      	pop	{r7, pc}
  4014dc:	20006520 	.word	0x20006520
  4014e0:	00401131 	.word	0x00401131
  4014e4:	004011ad 	.word	0x004011ad
  4014e8:	00400fe5 	.word	0x00400fe5

004014ec <udi_msc_sbc_start_stop>:


static void udi_msc_sbc_start_stop(void)
{
  4014ec:	b580      	push	{r7, lr}
  4014ee:	b082      	sub	sp, #8
  4014f0:	af00      	add	r7, sp, #0
	bool start = 0x1 & udi_msc_cbw.CDB[4];
  4014f2:	4b17      	ldr	r3, [pc, #92]	; (401550 <udi_msc_sbc_start_stop+0x64>)
  4014f4:	7cdb      	ldrb	r3, [r3, #19]
  4014f6:	f003 0301 	and.w	r3, r3, #1
  4014fa:	2b00      	cmp	r3, #0
  4014fc:	bf14      	ite	ne
  4014fe:	2301      	movne	r3, #1
  401500:	2300      	moveq	r3, #0
  401502:	71fb      	strb	r3, [r7, #7]
	bool loej = 0x2 & udi_msc_cbw.CDB[4];
  401504:	4b12      	ldr	r3, [pc, #72]	; (401550 <udi_msc_sbc_start_stop+0x64>)
  401506:	7cdb      	ldrb	r3, [r3, #19]
  401508:	f003 0302 	and.w	r3, r3, #2
  40150c:	2b00      	cmp	r3, #0
  40150e:	bf14      	ite	ne
  401510:	2301      	movne	r3, #1
  401512:	2300      	moveq	r3, #0
  401514:	71bb      	strb	r3, [r7, #6]
	if (loej) {
  401516:	79bb      	ldrb	r3, [r7, #6]
  401518:	2b00      	cmp	r3, #0
  40151a:	d011      	beq.n	401540 <udi_msc_sbc_start_stop+0x54>
		mem_unload(udi_msc_cbw.bCBWLUN, !start);
  40151c:	4b0c      	ldr	r3, [pc, #48]	; (401550 <udi_msc_sbc_start_stop+0x64>)
  40151e:	7b5a      	ldrb	r2, [r3, #13]
  401520:	79fb      	ldrb	r3, [r7, #7]
  401522:	2b00      	cmp	r3, #0
  401524:	bf14      	ite	ne
  401526:	2301      	movne	r3, #1
  401528:	2300      	moveq	r3, #0
  40152a:	b2db      	uxtb	r3, r3
  40152c:	f083 0301 	eor.w	r3, r3, #1
  401530:	b2db      	uxtb	r3, r3
  401532:	f003 0301 	and.w	r3, r3, #1
  401536:	b2db      	uxtb	r3, r3
  401538:	4619      	mov	r1, r3
  40153a:	4610      	mov	r0, r2
  40153c:	4b05      	ldr	r3, [pc, #20]	; (401554 <udi_msc_sbc_start_stop+0x68>)
  40153e:	4798      	blx	r3
	}
	udi_msc_sense_pass();
  401540:	4b05      	ldr	r3, [pc, #20]	; (401558 <udi_msc_sbc_start_stop+0x6c>)
  401542:	4798      	blx	r3
	udi_msc_csw_process();
  401544:	4b05      	ldr	r3, [pc, #20]	; (40155c <udi_msc_sbc_start_stop+0x70>)
  401546:	4798      	blx	r3
}
  401548:	bf00      	nop
  40154a:	3708      	adds	r7, #8
  40154c:	46bd      	mov	sp, r7
  40154e:	bd80      	pop	{r7, pc}
  401550:	20006520 	.word	0x20006520
  401554:	00400885 	.word	0x00400885
  401558:	00401131 	.word	0x00401131
  40155c:	00400fe5 	.word	0x00400fe5

00401560 <udi_msc_sbc_read_capacity>:


static void udi_msc_sbc_read_capacity(void)
{
  401560:	b580      	push	{r7, lr}
  401562:	af00      	add	r7, sp, #0
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
  401564:	2180      	movs	r1, #128	; 0x80
  401566:	2008      	movs	r0, #8
  401568:	4b1a      	ldr	r3, [pc, #104]	; (4015d4 <udi_msc_sbc_read_capacity+0x74>)
  40156a:	4798      	blx	r3
  40156c:	4603      	mov	r3, r0
  40156e:	f083 0301 	eor.w	r3, r3, #1
  401572:	b2db      	uxtb	r3, r3
  401574:	2b00      	cmp	r3, #0
  401576:	d12b      	bne.n	4015d0 <udi_msc_sbc_read_capacity+0x70>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
  401578:	4b17      	ldr	r3, [pc, #92]	; (4015d8 <udi_msc_sbc_read_capacity+0x78>)
  40157a:	7b5b      	ldrb	r3, [r3, #13]
  40157c:	4917      	ldr	r1, [pc, #92]	; (4015dc <udi_msc_sbc_read_capacity+0x7c>)
  40157e:	4618      	mov	r0, r3
  401580:	4b17      	ldr	r3, [pc, #92]	; (4015e0 <udi_msc_sbc_read_capacity+0x80>)
  401582:	4798      	blx	r3
  401584:	4603      	mov	r3, r0
  401586:	2b02      	cmp	r3, #2
  401588:	d009      	beq.n	40159e <udi_msc_sbc_read_capacity+0x3e>
  40158a:	2b03      	cmp	r3, #3
  40158c:	d002      	beq.n	401594 <udi_msc_sbc_read_capacity+0x34>
  40158e:	2b00      	cmp	r3, #0
  401590:	d00f      	beq.n	4015b2 <udi_msc_sbc_read_capacity+0x52>
  401592:	e009      	b.n	4015a8 <udi_msc_sbc_read_capacity+0x48>
					&udi_msc_capacity.max_lba)) {
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
  401594:	4b13      	ldr	r3, [pc, #76]	; (4015e4 <udi_msc_sbc_read_capacity+0x84>)
  401596:	4798      	blx	r3
		udi_msc_csw_process();
  401598:	4b13      	ldr	r3, [pc, #76]	; (4015e8 <udi_msc_sbc_read_capacity+0x88>)
  40159a:	4798      	blx	r3
		return;
  40159c:	e019      	b.n	4015d2 <udi_msc_sbc_read_capacity+0x72>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
  40159e:	4b13      	ldr	r3, [pc, #76]	; (4015ec <udi_msc_sbc_read_capacity+0x8c>)
  4015a0:	4798      	blx	r3
		udi_msc_csw_process();
  4015a2:	4b11      	ldr	r3, [pc, #68]	; (4015e8 <udi_msc_sbc_read_capacity+0x88>)
  4015a4:	4798      	blx	r3
		return;
  4015a6:	e014      	b.n	4015d2 <udi_msc_sbc_read_capacity+0x72>
	default:
		udi_msc_sense_fail_hardware();
  4015a8:	4b11      	ldr	r3, [pc, #68]	; (4015f0 <udi_msc_sbc_read_capacity+0x90>)
  4015aa:	4798      	blx	r3
		udi_msc_csw_process();
  4015ac:	4b0e      	ldr	r3, [pc, #56]	; (4015e8 <udi_msc_sbc_read_capacity+0x88>)
  4015ae:	4798      	blx	r3
		return;
  4015b0:	e00f      	b.n	4015d2 <udi_msc_sbc_read_capacity+0x72>
		break;
  4015b2:	bf00      	nop
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
  4015b4:	4b09      	ldr	r3, [pc, #36]	; (4015dc <udi_msc_sbc_read_capacity+0x7c>)
  4015b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  4015ba:	605a      	str	r2, [r3, #4]
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
  4015bc:	4b07      	ldr	r3, [pc, #28]	; (4015dc <udi_msc_sbc_read_capacity+0x7c>)
  4015be:	681b      	ldr	r3, [r3, #0]
  4015c0:	ba1b      	rev	r3, r3
  4015c2:	4a06      	ldr	r2, [pc, #24]	; (4015dc <udi_msc_sbc_read_capacity+0x7c>)
  4015c4:	6013      	str	r3, [r2, #0]
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
  4015c6:	2108      	movs	r1, #8
  4015c8:	4804      	ldr	r0, [pc, #16]	; (4015dc <udi_msc_sbc_read_capacity+0x7c>)
  4015ca:	4b0a      	ldr	r3, [pc, #40]	; (4015f4 <udi_msc_sbc_read_capacity+0x94>)
  4015cc:	4798      	blx	r3
  4015ce:	e000      	b.n	4015d2 <udi_msc_sbc_read_capacity+0x72>
		return;
  4015d0:	bf00      	nop
			sizeof(udi_msc_capacity));
}
  4015d2:	bd80      	pop	{r7, pc}
  4015d4:	00400f0d 	.word	0x00400f0d
  4015d8:	20006520 	.word	0x20006520
  4015dc:	20006578 	.word	0x20006578
  4015e0:	0040081d 	.word	0x0040081d
  4015e4:	00401165 	.word	0x00401165
  4015e8:	00400fe5 	.word	0x00400fe5
  4015ec:	0040114d 	.word	0x0040114d
  4015f0:	0040117d 	.word	0x0040117d
  4015f4:	00400f59 	.word	0x00400f59

004015f8 <udi_msc_sbc_trans>:


static void udi_msc_sbc_trans(bool b_read)
{
  4015f8:	b580      	push	{r7, lr}
  4015fa:	b084      	sub	sp, #16
  4015fc:	af00      	add	r7, sp, #0
  4015fe:	4603      	mov	r3, r0
  401600:	71fb      	strb	r3, [r7, #7]
	uint32_t trans_size;

	if (!b_read) {
  401602:	79fb      	ldrb	r3, [r7, #7]
  401604:	f083 0301 	eor.w	r3, r3, #1
  401608:	b2db      	uxtb	r3, r3
  40160a:	2b00      	cmp	r3, #0
  40160c:	d00c      	beq.n	401628 <udi_msc_sbc_trans+0x30>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
  40160e:	4b23      	ldr	r3, [pc, #140]	; (40169c <udi_msc_sbc_trans+0xa4>)
  401610:	7b5b      	ldrb	r3, [r3, #13]
  401612:	4618      	mov	r0, r3
  401614:	4b22      	ldr	r3, [pc, #136]	; (4016a0 <udi_msc_sbc_trans+0xa8>)
  401616:	4798      	blx	r3
  401618:	4603      	mov	r3, r0
  40161a:	2b00      	cmp	r3, #0
  40161c:	d004      	beq.n	401628 <udi_msc_sbc_trans+0x30>
			// Write not authorized
			udi_msc_sense_fail_protected();
  40161e:	4b21      	ldr	r3, [pc, #132]	; (4016a4 <udi_msc_sbc_trans+0xac>)
  401620:	4798      	blx	r3
			udi_msc_csw_process();
  401622:	4b21      	ldr	r3, [pc, #132]	; (4016a8 <udi_msc_sbc_trans+0xb0>)
  401624:	4798      	blx	r3
			return;
  401626:	e035      	b.n	401694 <udi_msc_sbc_trans+0x9c>
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
  401628:	4b20      	ldr	r3, [pc, #128]	; (4016ac <udi_msc_sbc_trans+0xb4>)
  40162a:	4a1c      	ldr	r2, [pc, #112]	; (40169c <udi_msc_sbc_trans+0xa4>)
  40162c:	7c52      	ldrb	r2, [r2, #17]
  40162e:	701a      	strb	r2, [r3, #0]
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
  401630:	4b1f      	ldr	r3, [pc, #124]	; (4016b0 <udi_msc_sbc_trans+0xb8>)
  401632:	4a1a      	ldr	r2, [pc, #104]	; (40169c <udi_msc_sbc_trans+0xa4>)
  401634:	7c92      	ldrb	r2, [r2, #18]
  401636:	701a      	strb	r2, [r3, #0]
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
  401638:	4b1e      	ldr	r3, [pc, #120]	; (4016b4 <udi_msc_sbc_trans+0xbc>)
  40163a:	4a18      	ldr	r2, [pc, #96]	; (40169c <udi_msc_sbc_trans+0xa4>)
  40163c:	7cd2      	ldrb	r2, [r2, #19]
  40163e:	701a      	strb	r2, [r3, #0]
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
  401640:	4b1d      	ldr	r3, [pc, #116]	; (4016b8 <udi_msc_sbc_trans+0xc0>)
  401642:	4a16      	ldr	r2, [pc, #88]	; (40169c <udi_msc_sbc_trans+0xa4>)
  401644:	7d12      	ldrb	r2, [r2, #20]
  401646:	701a      	strb	r2, [r3, #0]
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
  401648:	4b1c      	ldr	r3, [pc, #112]	; (4016bc <udi_msc_sbc_trans+0xc4>)
  40164a:	4a14      	ldr	r2, [pc, #80]	; (40169c <udi_msc_sbc_trans+0xa4>)
  40164c:	7d92      	ldrb	r2, [r2, #22]
  40164e:	701a      	strb	r2, [r3, #0]
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
  401650:	4b1b      	ldr	r3, [pc, #108]	; (4016c0 <udi_msc_sbc_trans+0xc8>)
  401652:	4a12      	ldr	r2, [pc, #72]	; (40169c <udi_msc_sbc_trans+0xa4>)
  401654:	7dd2      	ldrb	r2, [r2, #23]
  401656:	701a      	strb	r2, [r3, #0]

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
  401658:	4b19      	ldr	r3, [pc, #100]	; (4016c0 <udi_msc_sbc_trans+0xc8>)
  40165a:	881b      	ldrh	r3, [r3, #0]
  40165c:	025b      	lsls	r3, r3, #9
  40165e:	60fb      	str	r3, [r7, #12]
	if (!udi_msc_cbw_validate(trans_size,
  401660:	79fb      	ldrb	r3, [r7, #7]
  401662:	2b00      	cmp	r3, #0
  401664:	d001      	beq.n	40166a <udi_msc_sbc_trans+0x72>
  401666:	2380      	movs	r3, #128	; 0x80
  401668:	e000      	b.n	40166c <udi_msc_sbc_trans+0x74>
  40166a:	2300      	movs	r3, #0
  40166c:	4619      	mov	r1, r3
  40166e:	68f8      	ldr	r0, [r7, #12]
  401670:	4b14      	ldr	r3, [pc, #80]	; (4016c4 <udi_msc_sbc_trans+0xcc>)
  401672:	4798      	blx	r3
  401674:	4603      	mov	r3, r0
  401676:	f083 0301 	eor.w	r3, r3, #1
  40167a:	b2db      	uxtb	r3, r3
  40167c:	2b00      	cmp	r3, #0
  40167e:	d108      	bne.n	401692 <udi_msc_sbc_trans+0x9a>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
  401680:	4a11      	ldr	r2, [pc, #68]	; (4016c8 <udi_msc_sbc_trans+0xd0>)
  401682:	79fb      	ldrb	r3, [r7, #7]
  401684:	7013      	strb	r3, [r2, #0]
	udi_msc_b_trans_req = true;
  401686:	4b11      	ldr	r3, [pc, #68]	; (4016cc <udi_msc_sbc_trans+0xd4>)
  401688:	2201      	movs	r2, #1
  40168a:	701a      	strb	r2, [r3, #0]
	UDI_MSC_NOTIFY_TRANS_EXT();
  40168c:	4b10      	ldr	r3, [pc, #64]	; (4016d0 <udi_msc_sbc_trans+0xd8>)
  40168e:	4798      	blx	r3
  401690:	e000      	b.n	401694 <udi_msc_sbc_trans+0x9c>
		return;
  401692:	bf00      	nop
}
  401694:	3710      	adds	r7, #16
  401696:	46bd      	mov	sp, r7
  401698:	bd80      	pop	{r7, pc}
  40169a:	bf00      	nop
  40169c:	20006520 	.word	0x20006520
  4016a0:	00400925 	.word	0x00400925
  4016a4:	00401195 	.word	0x00401195
  4016a8:	00400fe5 	.word	0x00400fe5
  4016ac:	2000655f 	.word	0x2000655f
  4016b0:	2000655e 	.word	0x2000655e
  4016b4:	2000655d 	.word	0x2000655d
  4016b8:	2000655c 	.word	0x2000655c
  4016bc:	20006561 	.word	0x20006561
  4016c0:	20006560 	.word	0x20006560
  4016c4:	00400f0d 	.word	0x00400f0d
  4016c8:	20006558 	.word	0x20006558
  4016cc:	20006557 	.word	0x20006557
  4016d0:	00406d81 	.word	0x00406d81

004016d4 <udi_msc_trans_ack>:
}


static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n,
		udd_ep_id_t ep)
{
  4016d4:	b480      	push	{r7}
  4016d6:	b083      	sub	sp, #12
  4016d8:	af00      	add	r7, sp, #0
  4016da:	4603      	mov	r3, r0
  4016dc:	6039      	str	r1, [r7, #0]
  4016de:	71fb      	strb	r3, [r7, #7]
  4016e0:	4613      	mov	r3, r2
  4016e2:	71bb      	strb	r3, [r7, #6]
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
  4016e4:	79fb      	ldrb	r3, [r7, #7]
  4016e6:	2b00      	cmp	r3, #0
  4016e8:	bf14      	ite	ne
  4016ea:	2301      	movne	r3, #1
  4016ec:	2300      	moveq	r3, #0
  4016ee:	b2da      	uxtb	r2, r3
  4016f0:	4b05      	ldr	r3, [pc, #20]	; (401708 <udi_msc_trans_ack+0x34>)
  4016f2:	701a      	strb	r2, [r3, #0]
	udi_msc_b_ack_trans = true;
  4016f4:	4b05      	ldr	r3, [pc, #20]	; (40170c <udi_msc_trans_ack+0x38>)
  4016f6:	2201      	movs	r2, #1
  4016f8:	701a      	strb	r2, [r3, #0]
}
  4016fa:	bf00      	nop
  4016fc:	370c      	adds	r7, #12
  4016fe:	46bd      	mov	sp, r7
  401700:	f85d 7b04 	ldr.w	r7, [sp], #4
  401704:	4770      	bx	lr
  401706:	bf00      	nop
  401708:	2000a742 	.word	0x2000a742
  40170c:	20000021 	.word	0x20000021

00401710 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
  401710:	b590      	push	{r4, r7, lr}
  401712:	b087      	sub	sp, #28
  401714:	af02      	add	r7, sp, #8
  401716:	60b9      	str	r1, [r7, #8]
  401718:	607a      	str	r2, [r7, #4]
  40171a:	603b      	str	r3, [r7, #0]
  40171c:	4603      	mov	r3, r0
  40171e:	73fb      	strb	r3, [r7, #15]
	if (!udi_msc_b_ack_trans)
  401720:	4b2e      	ldr	r3, [pc, #184]	; (4017dc <udi_msc_trans_block+0xcc>)
  401722:	781b      	ldrb	r3, [r3, #0]
  401724:	b2db      	uxtb	r3, r3
  401726:	f083 0301 	eor.w	r3, r3, #1
  40172a:	b2db      	uxtb	r3, r3
  40172c:	2b00      	cmp	r3, #0
  40172e:	d001      	beq.n	401734 <udi_msc_trans_block+0x24>
		return false;	// No possible, transfer on going
  401730:	2300      	movs	r3, #0
  401732:	e04e      	b.n	4017d2 <udi_msc_trans_block+0xc2>

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
  401734:	4b29      	ldr	r3, [pc, #164]	; (4017dc <udi_msc_trans_block+0xcc>)
  401736:	2200      	movs	r2, #0
  401738:	701a      	strb	r2, [r3, #0]
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
  40173a:	7bfb      	ldrb	r3, [r7, #15]
  40173c:	2b00      	cmp	r3, #0
  40173e:	d001      	beq.n	401744 <udi_msc_trans_block+0x34>
  401740:	2081      	movs	r0, #129	; 0x81
  401742:	e000      	b.n	401746 <udi_msc_trans_block+0x36>
  401744:	2002      	movs	r0, #2
  401746:	683b      	ldr	r3, [r7, #0]
  401748:	2b00      	cmp	r3, #0
  40174a:	d001      	beq.n	401750 <udi_msc_trans_block+0x40>
  40174c:	683b      	ldr	r3, [r7, #0]
  40174e:	e000      	b.n	401752 <udi_msc_trans_block+0x42>
  401750:	4b23      	ldr	r3, [pc, #140]	; (4017e0 <udi_msc_trans_block+0xd0>)
  401752:	9300      	str	r3, [sp, #0]
  401754:	687b      	ldr	r3, [r7, #4]
  401756:	68ba      	ldr	r2, [r7, #8]
  401758:	2100      	movs	r1, #0
  40175a:	4c22      	ldr	r4, [pc, #136]	; (4017e4 <udi_msc_trans_block+0xd4>)
  40175c:	47a0      	blx	r4
  40175e:	4603      	mov	r3, r0
  401760:	f083 0301 	eor.w	r3, r3, #1
  401764:	b2db      	uxtb	r3, r3
  401766:	2b00      	cmp	r3, #0
  401768:	d004      	beq.n	401774 <udi_msc_trans_block+0x64>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
  40176a:	4b1c      	ldr	r3, [pc, #112]	; (4017dc <udi_msc_trans_block+0xcc>)
  40176c:	2201      	movs	r2, #1
  40176e:	701a      	strb	r2, [r3, #0]
		return false;
  401770:	2300      	movs	r3, #0
  401772:	e02e      	b.n	4017d2 <udi_msc_trans_block+0xc2>
	}
	if (NULL == callback) {
  401774:	683b      	ldr	r3, [r7, #0]
  401776:	2b00      	cmp	r3, #0
  401778:	d124      	bne.n	4017c4 <udi_msc_trans_block+0xb4>
		while (!udi_msc_b_ack_trans);
  40177a:	bf00      	nop
  40177c:	4b17      	ldr	r3, [pc, #92]	; (4017dc <udi_msc_trans_block+0xcc>)
  40177e:	781b      	ldrb	r3, [r3, #0]
  401780:	b2db      	uxtb	r3, r3
  401782:	f083 0301 	eor.w	r3, r3, #1
  401786:	b2db      	uxtb	r3, r3
  401788:	2b00      	cmp	r3, #0
  40178a:	d1f7      	bne.n	40177c <udi_msc_trans_block+0x6c>
		if (udi_msc_b_abort_trans) {
  40178c:	4b16      	ldr	r3, [pc, #88]	; (4017e8 <udi_msc_trans_block+0xd8>)
  40178e:	781b      	ldrb	r3, [r3, #0]
  401790:	b2db      	uxtb	r3, r3
  401792:	2b00      	cmp	r3, #0
  401794:	d001      	beq.n	40179a <udi_msc_trans_block+0x8a>
			return false;
  401796:	2300      	movs	r3, #0
  401798:	e01b      	b.n	4017d2 <udi_msc_trans_block+0xc2>
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
  40179a:	4b14      	ldr	r3, [pc, #80]	; (4017ec <udi_msc_trans_block+0xdc>)
  40179c:	689a      	ldr	r2, [r3, #8]
  40179e:	687b      	ldr	r3, [r7, #4]
  4017a0:	1ad3      	subs	r3, r2, r3
  4017a2:	4a12      	ldr	r2, [pc, #72]	; (4017ec <udi_msc_trans_block+0xdc>)
  4017a4:	6093      	str	r3, [r2, #8]
		return (!udi_msc_b_abort_trans);
  4017a6:	4b10      	ldr	r3, [pc, #64]	; (4017e8 <udi_msc_trans_block+0xd8>)
  4017a8:	781b      	ldrb	r3, [r3, #0]
  4017aa:	b2db      	uxtb	r3, r3
  4017ac:	2b00      	cmp	r3, #0
  4017ae:	bf14      	ite	ne
  4017b0:	2301      	movne	r3, #1
  4017b2:	2300      	moveq	r3, #0
  4017b4:	b2db      	uxtb	r3, r3
  4017b6:	f083 0301 	eor.w	r3, r3, #1
  4017ba:	b2db      	uxtb	r3, r3
  4017bc:	f003 0301 	and.w	r3, r3, #1
  4017c0:	b2db      	uxtb	r3, r3
  4017c2:	e006      	b.n	4017d2 <udi_msc_trans_block+0xc2>
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
  4017c4:	4b09      	ldr	r3, [pc, #36]	; (4017ec <udi_msc_trans_block+0xdc>)
  4017c6:	689a      	ldr	r2, [r3, #8]
  4017c8:	687b      	ldr	r3, [r7, #4]
  4017ca:	1ad3      	subs	r3, r2, r3
  4017cc:	4a07      	ldr	r2, [pc, #28]	; (4017ec <udi_msc_trans_block+0xdc>)
  4017ce:	6093      	str	r3, [r2, #8]
	return true;
  4017d0:	2301      	movs	r3, #1
}
  4017d2:	4618      	mov	r0, r3
  4017d4:	3714      	adds	r7, #20
  4017d6:	46bd      	mov	sp, r7
  4017d8:	bd90      	pop	{r4, r7, pc}
  4017da:	bf00      	nop
  4017dc:	20000021 	.word	0x20000021
  4017e0:	004016d5 	.word	0x004016d5
  4017e4:	00403b7d 	.word	0x00403b7d
  4017e8:	2000a742 	.word	0x2000a742
  4017ec:	20000014 	.word	0x20000014

004017f0 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
  4017f0:	b480      	push	{r7}
  4017f2:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
  4017f4:	4b02      	ldr	r3, [pc, #8]	; (401800 <udc_get_string_serial_name+0x10>)
	}
  4017f6:	4618      	mov	r0, r3
  4017f8:	46bd      	mov	sp, r7
  4017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4017fe:	4770      	bx	lr
  401800:	004071bc 	.word	0x004071bc

00401804 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
  401804:	b480      	push	{r7}
  401806:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
  401808:	4b06      	ldr	r3, [pc, #24]	; (401824 <udc_get_eof_conf+0x20>)
  40180a:	681b      	ldr	r3, [r3, #0]
  40180c:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
  40180e:	4a05      	ldr	r2, [pc, #20]	; (401824 <udc_get_eof_conf+0x20>)
  401810:	6812      	ldr	r2, [r2, #0]
  401812:	6812      	ldr	r2, [r2, #0]
  401814:	8852      	ldrh	r2, [r2, #2]
  401816:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
  401818:	4413      	add	r3, r2
}
  40181a:	4618      	mov	r0, r3
  40181c:	46bd      	mov	sp, r7
  40181e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401822:	4770      	bx	lr
  401824:	2000658c 	.word	0x2000658c

00401828 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
  401828:	b580      	push	{r7, lr}
  40182a:	b084      	sub	sp, #16
  40182c:	af00      	add	r7, sp, #0
  40182e:	6078      	str	r0, [r7, #4]
  401830:	460b      	mov	r3, r1
  401832:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
  401834:	4b12      	ldr	r3, [pc, #72]	; (401880 <udc_next_desc_in_iface+0x58>)
  401836:	4798      	blx	r3
  401838:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
  40183a:	687b      	ldr	r3, [r7, #4]
  40183c:	781b      	ldrb	r3, [r3, #0]
  40183e:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401840:	687b      	ldr	r3, [r7, #4]
  401842:	4413      	add	r3, r2
  401844:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
  401846:	e010      	b.n	40186a <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
  401848:	687b      	ldr	r3, [r7, #4]
  40184a:	785b      	ldrb	r3, [r3, #1]
  40184c:	2b04      	cmp	r3, #4
  40184e:	d011      	beq.n	401874 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
  401850:	687b      	ldr	r3, [r7, #4]
  401852:	785b      	ldrb	r3, [r3, #1]
  401854:	78fa      	ldrb	r2, [r7, #3]
  401856:	429a      	cmp	r2, r3
  401858:	d101      	bne.n	40185e <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
  40185a:	687b      	ldr	r3, [r7, #4]
  40185c:	e00c      	b.n	401878 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
  40185e:	687b      	ldr	r3, [r7, #4]
  401860:	781b      	ldrb	r3, [r3, #0]
  401862:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
  401864:	687b      	ldr	r3, [r7, #4]
  401866:	4413      	add	r3, r2
  401868:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
  40186a:	68fa      	ldr	r2, [r7, #12]
  40186c:	687b      	ldr	r3, [r7, #4]
  40186e:	429a      	cmp	r2, r3
  401870:	d8ea      	bhi.n	401848 <udc_next_desc_in_iface+0x20>
  401872:	e000      	b.n	401876 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
  401874:	bf00      	nop
	}
	return NULL; // No specific descriptor found
  401876:	2300      	movs	r3, #0
}
  401878:	4618      	mov	r0, r3
  40187a:	3710      	adds	r7, #16
  40187c:	46bd      	mov	sp, r7
  40187e:	bd80      	pop	{r7, pc}
  401880:	00401805 	.word	0x00401805

00401884 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
  401884:	b580      	push	{r7, lr}
  401886:	b084      	sub	sp, #16
  401888:	af00      	add	r7, sp, #0
  40188a:	4603      	mov	r3, r0
  40188c:	460a      	mov	r2, r1
  40188e:	71fb      	strb	r3, [r7, #7]
  401890:	4613      	mov	r3, r2
  401892:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
  401894:	4b1e      	ldr	r3, [pc, #120]	; (401910 <udc_update_iface_desc+0x8c>)
  401896:	781b      	ldrb	r3, [r3, #0]
  401898:	2b00      	cmp	r3, #0
  40189a:	d101      	bne.n	4018a0 <udc_update_iface_desc+0x1c>
		return false;
  40189c:	2300      	movs	r3, #0
  40189e:	e032      	b.n	401906 <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  4018a0:	4b1c      	ldr	r3, [pc, #112]	; (401914 <udc_update_iface_desc+0x90>)
  4018a2:	681b      	ldr	r3, [r3, #0]
  4018a4:	681b      	ldr	r3, [r3, #0]
  4018a6:	791b      	ldrb	r3, [r3, #4]
  4018a8:	79fa      	ldrb	r2, [r7, #7]
  4018aa:	429a      	cmp	r2, r3
  4018ac:	d301      	bcc.n	4018b2 <udc_update_iface_desc+0x2e>
		return false;
  4018ae:	2300      	movs	r3, #0
  4018b0:	e029      	b.n	401906 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
  4018b2:	4b18      	ldr	r3, [pc, #96]	; (401914 <udc_update_iface_desc+0x90>)
  4018b4:	681b      	ldr	r3, [r3, #0]
  4018b6:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
  4018b8:	4a17      	ldr	r2, [pc, #92]	; (401918 <udc_update_iface_desc+0x94>)
  4018ba:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
  4018bc:	4b17      	ldr	r3, [pc, #92]	; (40191c <udc_update_iface_desc+0x98>)
  4018be:	4798      	blx	r3
  4018c0:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
  4018c2:	e01a      	b.n	4018fa <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
  4018c4:	4b14      	ldr	r3, [pc, #80]	; (401918 <udc_update_iface_desc+0x94>)
  4018c6:	681b      	ldr	r3, [r3, #0]
  4018c8:	785b      	ldrb	r3, [r3, #1]
  4018ca:	2b04      	cmp	r3, #4
  4018cc:	d10d      	bne.n	4018ea <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4018ce:	4b12      	ldr	r3, [pc, #72]	; (401918 <udc_update_iface_desc+0x94>)
  4018d0:	681b      	ldr	r3, [r3, #0]
  4018d2:	789b      	ldrb	r3, [r3, #2]
  4018d4:	79fa      	ldrb	r2, [r7, #7]
  4018d6:	429a      	cmp	r2, r3
  4018d8:	d107      	bne.n	4018ea <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
  4018da:	4b0f      	ldr	r3, [pc, #60]	; (401918 <udc_update_iface_desc+0x94>)
  4018dc:	681b      	ldr	r3, [r3, #0]
  4018de:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
  4018e0:	79ba      	ldrb	r2, [r7, #6]
  4018e2:	429a      	cmp	r2, r3
  4018e4:	d101      	bne.n	4018ea <udc_update_iface_desc+0x66>
				return true; // Interface found
  4018e6:	2301      	movs	r3, #1
  4018e8:	e00d      	b.n	401906 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4018ea:	4b0b      	ldr	r3, [pc, #44]	; (401918 <udc_update_iface_desc+0x94>)
  4018ec:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
  4018ee:	4a0a      	ldr	r2, [pc, #40]	; (401918 <udc_update_iface_desc+0x94>)
  4018f0:	6812      	ldr	r2, [r2, #0]
  4018f2:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
  4018f4:	4413      	add	r3, r2
  4018f6:	4a08      	ldr	r2, [pc, #32]	; (401918 <udc_update_iface_desc+0x94>)
  4018f8:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
  4018fa:	4b07      	ldr	r3, [pc, #28]	; (401918 <udc_update_iface_desc+0x94>)
  4018fc:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
  4018fe:	68fa      	ldr	r2, [r7, #12]
  401900:	429a      	cmp	r2, r3
  401902:	d8df      	bhi.n	4018c4 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
  401904:	2300      	movs	r3, #0
}
  401906:	4618      	mov	r0, r3
  401908:	3710      	adds	r7, #16
  40190a:	46bd      	mov	sp, r7
  40190c:	bd80      	pop	{r7, pc}
  40190e:	bf00      	nop
  401910:	20006588 	.word	0x20006588
  401914:	2000658c 	.word	0x2000658c
  401918:	20006590 	.word	0x20006590
  40191c:	00401805 	.word	0x00401805

00401920 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
  401920:	b580      	push	{r7, lr}
  401922:	b084      	sub	sp, #16
  401924:	af00      	add	r7, sp, #0
  401926:	4603      	mov	r3, r0
  401928:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  40192a:	79fb      	ldrb	r3, [r7, #7]
  40192c:	2100      	movs	r1, #0
  40192e:	4618      	mov	r0, r3
  401930:	4b1e      	ldr	r3, [pc, #120]	; (4019ac <udc_iface_disable+0x8c>)
  401932:	4798      	blx	r3
  401934:	4603      	mov	r3, r0
  401936:	f083 0301 	eor.w	r3, r3, #1
  40193a:	b2db      	uxtb	r3, r3
  40193c:	2b00      	cmp	r3, #0
  40193e:	d001      	beq.n	401944 <udc_iface_disable+0x24>
		return false;
  401940:	2300      	movs	r3, #0
  401942:	e02f      	b.n	4019a4 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401944:	4b1a      	ldr	r3, [pc, #104]	; (4019b0 <udc_iface_disable+0x90>)
  401946:	681b      	ldr	r3, [r3, #0]
  401948:	685a      	ldr	r2, [r3, #4]
  40194a:	79fb      	ldrb	r3, [r7, #7]
  40194c:	009b      	lsls	r3, r3, #2
  40194e:	4413      	add	r3, r2
  401950:	681b      	ldr	r3, [r3, #0]
  401952:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  401954:	68bb      	ldr	r3, [r7, #8]
  401956:	68db      	ldr	r3, [r3, #12]
  401958:	4798      	blx	r3
  40195a:	4603      	mov	r3, r0
  40195c:	461a      	mov	r2, r3
  40195e:	79fb      	ldrb	r3, [r7, #7]
  401960:	4611      	mov	r1, r2
  401962:	4618      	mov	r0, r3
  401964:	4b11      	ldr	r3, [pc, #68]	; (4019ac <udc_iface_disable+0x8c>)
  401966:	4798      	blx	r3
  401968:	4603      	mov	r3, r0
  40196a:	f083 0301 	eor.w	r3, r3, #1
  40196e:	b2db      	uxtb	r3, r3
  401970:	2b00      	cmp	r3, #0
  401972:	d001      	beq.n	401978 <udc_iface_disable+0x58>
		return false;
  401974:	2300      	movs	r3, #0
  401976:	e015      	b.n	4019a4 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  401978:	4b0e      	ldr	r3, [pc, #56]	; (4019b4 <udc_iface_disable+0x94>)
  40197a:	681b      	ldr	r3, [r3, #0]
  40197c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  40197e:	2105      	movs	r1, #5
  401980:	68f8      	ldr	r0, [r7, #12]
  401982:	4b0d      	ldr	r3, [pc, #52]	; (4019b8 <udc_iface_disable+0x98>)
  401984:	4798      	blx	r3
  401986:	60f8      	str	r0, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
  401988:	68fb      	ldr	r3, [r7, #12]
  40198a:	2b00      	cmp	r3, #0
  40198c:	d005      	beq.n	40199a <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
  40198e:	68fb      	ldr	r3, [r7, #12]
  401990:	789b      	ldrb	r3, [r3, #2]
  401992:	4618      	mov	r0, r3
  401994:	4b09      	ldr	r3, [pc, #36]	; (4019bc <udc_iface_disable+0x9c>)
  401996:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  401998:	e7f1      	b.n	40197e <udc_iface_disable+0x5e>
				break;
  40199a:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
  40199c:	68bb      	ldr	r3, [r7, #8]
  40199e:	685b      	ldr	r3, [r3, #4]
  4019a0:	4798      	blx	r3
	return true;
  4019a2:	2301      	movs	r3, #1
}
  4019a4:	4618      	mov	r0, r3
  4019a6:	3710      	adds	r7, #16
  4019a8:	46bd      	mov	sp, r7
  4019aa:	bd80      	pop	{r7, pc}
  4019ac:	00401885 	.word	0x00401885
  4019b0:	2000658c 	.word	0x2000658c
  4019b4:	20006590 	.word	0x20006590
  4019b8:	00401829 	.word	0x00401829
  4019bc:	00403879 	.word	0x00403879

004019c0 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
  4019c0:	b580      	push	{r7, lr}
  4019c2:	b084      	sub	sp, #16
  4019c4:	af00      	add	r7, sp, #0
  4019c6:	4603      	mov	r3, r0
  4019c8:	460a      	mov	r2, r1
  4019ca:	71fb      	strb	r3, [r7, #7]
  4019cc:	4613      	mov	r3, r2
  4019ce:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
  4019d0:	79ba      	ldrb	r2, [r7, #6]
  4019d2:	79fb      	ldrb	r3, [r7, #7]
  4019d4:	4611      	mov	r1, r2
  4019d6:	4618      	mov	r0, r3
  4019d8:	4b1a      	ldr	r3, [pc, #104]	; (401a44 <udc_iface_enable+0x84>)
  4019da:	4798      	blx	r3
  4019dc:	4603      	mov	r3, r0
  4019de:	f083 0301 	eor.w	r3, r3, #1
  4019e2:	b2db      	uxtb	r3, r3
  4019e4:	2b00      	cmp	r3, #0
  4019e6:	d001      	beq.n	4019ec <udc_iface_enable+0x2c>
		return false;
  4019e8:	2300      	movs	r3, #0
  4019ea:	e027      	b.n	401a3c <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
  4019ec:	4b16      	ldr	r3, [pc, #88]	; (401a48 <udc_iface_enable+0x88>)
  4019ee:	681b      	ldr	r3, [r3, #0]
  4019f0:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
  4019f2:	2105      	movs	r1, #5
  4019f4:	68f8      	ldr	r0, [r7, #12]
  4019f6:	4b15      	ldr	r3, [pc, #84]	; (401a4c <udc_iface_enable+0x8c>)
  4019f8:	4798      	blx	r3
  4019fa:	60f8      	str	r0, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
  4019fc:	68fb      	ldr	r3, [r7, #12]
  4019fe:	2b00      	cmp	r3, #0
  401a00:	d011      	beq.n	401a26 <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
  401a02:	68fb      	ldr	r3, [r7, #12]
  401a04:	7898      	ldrb	r0, [r3, #2]
  401a06:	68fb      	ldr	r3, [r7, #12]
  401a08:	78d9      	ldrb	r1, [r3, #3]
  401a0a:	68fb      	ldr	r3, [r7, #12]
  401a0c:	889b      	ldrh	r3, [r3, #4]
  401a0e:	b29b      	uxth	r3, r3
  401a10:	461a      	mov	r2, r3
  401a12:	4b0f      	ldr	r3, [pc, #60]	; (401a50 <udc_iface_enable+0x90>)
  401a14:	4798      	blx	r3
  401a16:	4603      	mov	r3, r0
  401a18:	f083 0301 	eor.w	r3, r3, #1
  401a1c:	b2db      	uxtb	r3, r3
  401a1e:	2b00      	cmp	r3, #0
  401a20:	d0e7      	beq.n	4019f2 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
  401a22:	2300      	movs	r3, #0
  401a24:	e00a      	b.n	401a3c <udc_iface_enable+0x7c>
			break;
  401a26:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
  401a28:	4b0a      	ldr	r3, [pc, #40]	; (401a54 <udc_iface_enable+0x94>)
  401a2a:	681b      	ldr	r3, [r3, #0]
  401a2c:	685a      	ldr	r2, [r3, #4]
  401a2e:	79fb      	ldrb	r3, [r7, #7]
  401a30:	009b      	lsls	r3, r3, #2
  401a32:	4413      	add	r3, r2
  401a34:	681b      	ldr	r3, [r3, #0]
  401a36:	681b      	ldr	r3, [r3, #0]
  401a38:	4798      	blx	r3
  401a3a:	4603      	mov	r3, r0
}
  401a3c:	4618      	mov	r0, r3
  401a3e:	3710      	adds	r7, #16
  401a40:	46bd      	mov	sp, r7
  401a42:	bd80      	pop	{r7, pc}
  401a44:	00401885 	.word	0x00401885
  401a48:	20006590 	.word	0x20006590
  401a4c:	00401829 	.word	0x00401829
  401a50:	00403689 	.word	0x00403689
  401a54:	2000658c 	.word	0x2000658c

00401a58 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
  401a58:	b580      	push	{r7, lr}
  401a5a:	af00      	add	r7, sp, #0
	udd_enable();
  401a5c:	4b01      	ldr	r3, [pc, #4]	; (401a64 <udc_start+0xc>)
  401a5e:	4798      	blx	r3
}
  401a60:	bf00      	nop
  401a62:	bd80      	pop	{r7, pc}
  401a64:	004034b5 	.word	0x004034b5

00401a68 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
  401a68:	b580      	push	{r7, lr}
  401a6a:	b082      	sub	sp, #8
  401a6c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  401a6e:	4b0f      	ldr	r3, [pc, #60]	; (401aac <udc_reset+0x44>)
  401a70:	781b      	ldrb	r3, [r3, #0]
  401a72:	2b00      	cmp	r3, #0
  401a74:	d010      	beq.n	401a98 <udc_reset+0x30>
		for (iface_num = 0;
  401a76:	2300      	movs	r3, #0
  401a78:	71fb      	strb	r3, [r7, #7]
  401a7a:	e006      	b.n	401a8a <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
  401a7c:	79fb      	ldrb	r3, [r7, #7]
  401a7e:	4618      	mov	r0, r3
  401a80:	4b0b      	ldr	r3, [pc, #44]	; (401ab0 <udc_reset+0x48>)
  401a82:	4798      	blx	r3
				iface_num++) {
  401a84:	79fb      	ldrb	r3, [r7, #7]
  401a86:	3301      	adds	r3, #1
  401a88:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401a8a:	4b0a      	ldr	r3, [pc, #40]	; (401ab4 <udc_reset+0x4c>)
  401a8c:	681b      	ldr	r3, [r3, #0]
  401a8e:	681b      	ldr	r3, [r3, #0]
  401a90:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
  401a92:	79fa      	ldrb	r2, [r7, #7]
  401a94:	429a      	cmp	r2, r3
  401a96:	d3f1      	bcc.n	401a7c <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
  401a98:	4b04      	ldr	r3, [pc, #16]	; (401aac <udc_reset+0x44>)
  401a9a:	2200      	movs	r2, #0
  401a9c:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
  401a9e:	4b06      	ldr	r3, [pc, #24]	; (401ab8 <udc_reset+0x50>)
  401aa0:	2201      	movs	r2, #1
  401aa2:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
  401aa4:	bf00      	nop
  401aa6:	3708      	adds	r7, #8
  401aa8:	46bd      	mov	sp, r7
  401aaa:	bd80      	pop	{r7, pc}
  401aac:	20006588 	.word	0x20006588
  401ab0:	00401921 	.word	0x00401921
  401ab4:	2000658c 	.word	0x2000658c
  401ab8:	20006580 	.word	0x20006580

00401abc <udc_sof_notify>:

void udc_sof_notify(void)
{
  401abc:	b580      	push	{r7, lr}
  401abe:	b082      	sub	sp, #8
  401ac0:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
  401ac2:	4b14      	ldr	r3, [pc, #80]	; (401b14 <udc_sof_notify+0x58>)
  401ac4:	781b      	ldrb	r3, [r3, #0]
  401ac6:	2b00      	cmp	r3, #0
  401ac8:	d01f      	beq.n	401b0a <udc_sof_notify+0x4e>
		for (iface_num = 0;
  401aca:	2300      	movs	r3, #0
  401acc:	71fb      	strb	r3, [r7, #7]
  401ace:	e015      	b.n	401afc <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
  401ad0:	4b11      	ldr	r3, [pc, #68]	; (401b18 <udc_sof_notify+0x5c>)
  401ad2:	681b      	ldr	r3, [r3, #0]
  401ad4:	685a      	ldr	r2, [r3, #4]
  401ad6:	79fb      	ldrb	r3, [r7, #7]
  401ad8:	009b      	lsls	r3, r3, #2
  401ada:	4413      	add	r3, r2
  401adc:	681b      	ldr	r3, [r3, #0]
  401ade:	691b      	ldr	r3, [r3, #16]
  401ae0:	2b00      	cmp	r3, #0
  401ae2:	d008      	beq.n	401af6 <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
  401ae4:	4b0c      	ldr	r3, [pc, #48]	; (401b18 <udc_sof_notify+0x5c>)
  401ae6:	681b      	ldr	r3, [r3, #0]
  401ae8:	685a      	ldr	r2, [r3, #4]
  401aea:	79fb      	ldrb	r3, [r7, #7]
  401aec:	009b      	lsls	r3, r3, #2
  401aee:	4413      	add	r3, r2
  401af0:	681b      	ldr	r3, [r3, #0]
  401af2:	691b      	ldr	r3, [r3, #16]
  401af4:	4798      	blx	r3
				iface_num++) {
  401af6:	79fb      	ldrb	r3, [r7, #7]
  401af8:	3301      	adds	r3, #1
  401afa:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401afc:	4b06      	ldr	r3, [pc, #24]	; (401b18 <udc_sof_notify+0x5c>)
  401afe:	681b      	ldr	r3, [r3, #0]
  401b00:	681b      	ldr	r3, [r3, #0]
  401b02:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
  401b04:	79fa      	ldrb	r2, [r7, #7]
  401b06:	429a      	cmp	r2, r3
  401b08:	d3e2      	bcc.n	401ad0 <udc_sof_notify+0x14>
			}
		}
	}
}
  401b0a:	bf00      	nop
  401b0c:	3708      	adds	r7, #8
  401b0e:	46bd      	mov	sp, r7
  401b10:	bd80      	pop	{r7, pc}
  401b12:	bf00      	nop
  401b14:	20006588 	.word	0x20006588
  401b18:	2000658c 	.word	0x2000658c

00401b1c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
  401b1c:	b580      	push	{r7, lr}
  401b1e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
  401b20:	4b06      	ldr	r3, [pc, #24]	; (401b3c <udc_req_std_dev_get_status+0x20>)
  401b22:	88db      	ldrh	r3, [r3, #6]
  401b24:	2b02      	cmp	r3, #2
  401b26:	d001      	beq.n	401b2c <udc_req_std_dev_get_status+0x10>
		return false;
  401b28:	2300      	movs	r3, #0
  401b2a:	e004      	b.n	401b36 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
  401b2c:	2102      	movs	r1, #2
  401b2e:	4804      	ldr	r0, [pc, #16]	; (401b40 <udc_req_std_dev_get_status+0x24>)
  401b30:	4b04      	ldr	r3, [pc, #16]	; (401b44 <udc_req_std_dev_get_status+0x28>)
  401b32:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
  401b34:	2301      	movs	r3, #1
}
  401b36:	4618      	mov	r0, r3
  401b38:	bd80      	pop	{r7, pc}
  401b3a:	bf00      	nop
  401b3c:	2000a748 	.word	0x2000a748
  401b40:	20006580 	.word	0x20006580
  401b44:	00403661 	.word	0x00403661

00401b48 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
  401b48:	b580      	push	{r7, lr}
  401b4a:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
  401b4c:	4b0b      	ldr	r3, [pc, #44]	; (401b7c <udc_req_std_ep_get_status+0x34>)
  401b4e:	88db      	ldrh	r3, [r3, #6]
  401b50:	2b02      	cmp	r3, #2
  401b52:	d001      	beq.n	401b58 <udc_req_std_ep_get_status+0x10>
		return false;
  401b54:	2300      	movs	r3, #0
  401b56:	e00e      	b.n	401b76 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  401b58:	4b08      	ldr	r3, [pc, #32]	; (401b7c <udc_req_std_ep_get_status+0x34>)
  401b5a:	889b      	ldrh	r3, [r3, #4]
  401b5c:	b2db      	uxtb	r3, r3
  401b5e:	4618      	mov	r0, r3
  401b60:	4b07      	ldr	r3, [pc, #28]	; (401b80 <udc_req_std_ep_get_status+0x38>)
  401b62:	4798      	blx	r3
  401b64:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
  401b66:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
  401b68:	4b06      	ldr	r3, [pc, #24]	; (401b84 <udc_req_std_ep_get_status+0x3c>)
  401b6a:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
  401b6c:	2102      	movs	r1, #2
  401b6e:	4805      	ldr	r0, [pc, #20]	; (401b84 <udc_req_std_ep_get_status+0x3c>)
  401b70:	4b05      	ldr	r3, [pc, #20]	; (401b88 <udc_req_std_ep_get_status+0x40>)
  401b72:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
  401b74:	2301      	movs	r3, #1
}
  401b76:	4618      	mov	r0, r3
  401b78:	bd80      	pop	{r7, pc}
  401b7a:	bf00      	nop
  401b7c:	2000a748 	.word	0x2000a748
  401b80:	004038e9 	.word	0x004038e9
  401b84:	20006594 	.word	0x20006594
  401b88:	00403661 	.word	0x00403661

00401b8c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
  401b8c:	b480      	push	{r7}
  401b8e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401b90:	4b0c      	ldr	r3, [pc, #48]	; (401bc4 <udc_req_std_dev_clear_feature+0x38>)
  401b92:	88db      	ldrh	r3, [r3, #6]
  401b94:	2b00      	cmp	r3, #0
  401b96:	d001      	beq.n	401b9c <udc_req_std_dev_clear_feature+0x10>
		return false;
  401b98:	2300      	movs	r3, #0
  401b9a:	e00d      	b.n	401bb8 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
  401b9c:	4b09      	ldr	r3, [pc, #36]	; (401bc4 <udc_req_std_dev_clear_feature+0x38>)
  401b9e:	885b      	ldrh	r3, [r3, #2]
  401ba0:	2b01      	cmp	r3, #1
  401ba2:	d108      	bne.n	401bb6 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
  401ba4:	4b08      	ldr	r3, [pc, #32]	; (401bc8 <udc_req_std_dev_clear_feature+0x3c>)
  401ba6:	881b      	ldrh	r3, [r3, #0]
  401ba8:	f023 0302 	bic.w	r3, r3, #2
  401bac:	b29a      	uxth	r2, r3
  401bae:	4b06      	ldr	r3, [pc, #24]	; (401bc8 <udc_req_std_dev_clear_feature+0x3c>)
  401bb0:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
  401bb2:	2301      	movs	r3, #1
  401bb4:	e000      	b.n	401bb8 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
  401bb6:	2300      	movs	r3, #0
}
  401bb8:	4618      	mov	r0, r3
  401bba:	46bd      	mov	sp, r7
  401bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bc0:	4770      	bx	lr
  401bc2:	bf00      	nop
  401bc4:	2000a748 	.word	0x2000a748
  401bc8:	20006580 	.word	0x20006580

00401bcc <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
  401bcc:	b580      	push	{r7, lr}
  401bce:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401bd0:	4b0a      	ldr	r3, [pc, #40]	; (401bfc <udc_req_std_ep_clear_feature+0x30>)
  401bd2:	88db      	ldrh	r3, [r3, #6]
  401bd4:	2b00      	cmp	r3, #0
  401bd6:	d001      	beq.n	401bdc <udc_req_std_ep_clear_feature+0x10>
		return false;
  401bd8:	2300      	movs	r3, #0
  401bda:	e00c      	b.n	401bf6 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401bdc:	4b07      	ldr	r3, [pc, #28]	; (401bfc <udc_req_std_ep_clear_feature+0x30>)
  401bde:	885b      	ldrh	r3, [r3, #2]
  401be0:	2b00      	cmp	r3, #0
  401be2:	d107      	bne.n	401bf4 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401be4:	4b05      	ldr	r3, [pc, #20]	; (401bfc <udc_req_std_ep_clear_feature+0x30>)
  401be6:	889b      	ldrh	r3, [r3, #4]
  401be8:	b2db      	uxtb	r3, r3
  401bea:	4618      	mov	r0, r3
  401bec:	4b04      	ldr	r3, [pc, #16]	; (401c00 <udc_req_std_ep_clear_feature+0x34>)
  401bee:	4798      	blx	r3
  401bf0:	4603      	mov	r3, r0
  401bf2:	e000      	b.n	401bf6 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
  401bf4:	2300      	movs	r3, #0
}
  401bf6:	4618      	mov	r0, r3
  401bf8:	bd80      	pop	{r7, pc}
  401bfa:	bf00      	nop
  401bfc:	2000a748 	.word	0x2000a748
  401c00:	00403a51 	.word	0x00403a51

00401c04 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
  401c04:	b480      	push	{r7}
  401c06:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401c08:	4b09      	ldr	r3, [pc, #36]	; (401c30 <udc_req_std_dev_set_feature+0x2c>)
  401c0a:	88db      	ldrh	r3, [r3, #6]
  401c0c:	2b00      	cmp	r3, #0
  401c0e:	d001      	beq.n	401c14 <udc_req_std_dev_set_feature+0x10>
		return false;
  401c10:	2300      	movs	r3, #0
  401c12:	e007      	b.n	401c24 <udc_req_std_dev_set_feature+0x20>
	}

	switch (udd_g_ctrlreq.req.wValue) {
  401c14:	4b06      	ldr	r3, [pc, #24]	; (401c30 <udc_req_std_dev_set_feature+0x2c>)
  401c16:	885b      	ldrh	r3, [r3, #2]
  401c18:	2b01      	cmp	r3, #1
  401c1a:	d002      	beq.n	401c22 <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
  401c1c:	bf00      	nop
	}
	return false;
  401c1e:	2300      	movs	r3, #0
  401c20:	e000      	b.n	401c24 <udc_req_std_dev_set_feature+0x20>
		return false;
  401c22:	2300      	movs	r3, #0
}
  401c24:	4618      	mov	r0, r3
  401c26:	46bd      	mov	sp, r7
  401c28:	f85d 7b04 	ldr.w	r7, [sp], #4
  401c2c:	4770      	bx	lr
  401c2e:	bf00      	nop
  401c30:	2000a748 	.word	0x2000a748

00401c34 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
  401c34:	b580      	push	{r7, lr}
  401c36:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401c38:	4b0d      	ldr	r3, [pc, #52]	; (401c70 <udc_req_std_ep_set_feature+0x3c>)
  401c3a:	88db      	ldrh	r3, [r3, #6]
  401c3c:	2b00      	cmp	r3, #0
  401c3e:	d001      	beq.n	401c44 <udc_req_std_ep_set_feature+0x10>
		return false;
  401c40:	2300      	movs	r3, #0
  401c42:	e012      	b.n	401c6a <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
  401c44:	4b0a      	ldr	r3, [pc, #40]	; (401c70 <udc_req_std_ep_set_feature+0x3c>)
  401c46:	885b      	ldrh	r3, [r3, #2]
  401c48:	2b00      	cmp	r3, #0
  401c4a:	d10d      	bne.n	401c68 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
  401c4c:	4b08      	ldr	r3, [pc, #32]	; (401c70 <udc_req_std_ep_set_feature+0x3c>)
  401c4e:	889b      	ldrh	r3, [r3, #4]
  401c50:	b2db      	uxtb	r3, r3
  401c52:	4618      	mov	r0, r3
  401c54:	4b07      	ldr	r3, [pc, #28]	; (401c74 <udc_req_std_ep_set_feature+0x40>)
  401c56:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
  401c58:	4b05      	ldr	r3, [pc, #20]	; (401c70 <udc_req_std_ep_set_feature+0x3c>)
  401c5a:	889b      	ldrh	r3, [r3, #4]
  401c5c:	b2db      	uxtb	r3, r3
  401c5e:	4618      	mov	r0, r3
  401c60:	4b05      	ldr	r3, [pc, #20]	; (401c78 <udc_req_std_ep_set_feature+0x44>)
  401c62:	4798      	blx	r3
  401c64:	4603      	mov	r3, r0
  401c66:	e000      	b.n	401c6a <udc_req_std_ep_set_feature+0x36>
	}
	return false;
  401c68:	2300      	movs	r3, #0
}
  401c6a:	4618      	mov	r0, r3
  401c6c:	bd80      	pop	{r7, pc}
  401c6e:	bf00      	nop
  401c70:	2000a748 	.word	0x2000a748
  401c74:	00403cd5 	.word	0x00403cd5
  401c78:	0040395d 	.word	0x0040395d

00401c7c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
  401c7c:	b580      	push	{r7, lr}
  401c7e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
  401c80:	4b05      	ldr	r3, [pc, #20]	; (401c98 <udc_valid_address+0x1c>)
  401c82:	885b      	ldrh	r3, [r3, #2]
  401c84:	b2db      	uxtb	r3, r3
  401c86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  401c8a:	b2db      	uxtb	r3, r3
  401c8c:	4618      	mov	r0, r3
  401c8e:	4b03      	ldr	r3, [pc, #12]	; (401c9c <udc_valid_address+0x20>)
  401c90:	4798      	blx	r3
}
  401c92:	bf00      	nop
  401c94:	bd80      	pop	{r7, pc}
  401c96:	bf00      	nop
  401c98:	2000a748 	.word	0x2000a748
  401c9c:	004035ad 	.word	0x004035ad

00401ca0 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
  401ca0:	b480      	push	{r7}
  401ca2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
  401ca4:	4b07      	ldr	r3, [pc, #28]	; (401cc4 <udc_req_std_dev_set_address+0x24>)
  401ca6:	88db      	ldrh	r3, [r3, #6]
  401ca8:	2b00      	cmp	r3, #0
  401caa:	d001      	beq.n	401cb0 <udc_req_std_dev_set_address+0x10>
		return false;
  401cac:	2300      	movs	r3, #0
  401cae:	e003      	b.n	401cb8 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
  401cb0:	4b04      	ldr	r3, [pc, #16]	; (401cc4 <udc_req_std_dev_set_address+0x24>)
  401cb2:	4a05      	ldr	r2, [pc, #20]	; (401cc8 <udc_req_std_dev_set_address+0x28>)
  401cb4:	611a      	str	r2, [r3, #16]
	return true;
  401cb6:	2301      	movs	r3, #1
}
  401cb8:	4618      	mov	r0, r3
  401cba:	46bd      	mov	sp, r7
  401cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cc0:	4770      	bx	lr
  401cc2:	bf00      	nop
  401cc4:	2000a748 	.word	0x2000a748
  401cc8:	00401c7d 	.word	0x00401c7d

00401ccc <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
  401ccc:	b580      	push	{r7, lr}
  401cce:	b084      	sub	sp, #16
  401cd0:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
  401cd2:	2300      	movs	r3, #0
  401cd4:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
  401cd6:	4b29      	ldr	r3, [pc, #164]	; (401d7c <udc_req_std_dev_get_str_desc+0xb0>)
  401cd8:	885b      	ldrh	r3, [r3, #2]
  401cda:	b2db      	uxtb	r3, r3
  401cdc:	2b03      	cmp	r3, #3
  401cde:	d820      	bhi.n	401d22 <udc_req_std_dev_get_str_desc+0x56>
  401ce0:	a201      	add	r2, pc, #4	; (adr r2, 401ce8 <udc_req_std_dev_get_str_desc+0x1c>)
  401ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401ce6:	bf00      	nop
  401ce8:	00401cf9 	.word	0x00401cf9
  401cec:	00401d03 	.word	0x00401d03
  401cf0:	00401d0d 	.word	0x00401d0d
  401cf4:	00401d17 	.word	0x00401d17
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
  401cf8:	2104      	movs	r1, #4
  401cfa:	4821      	ldr	r0, [pc, #132]	; (401d80 <udc_req_std_dev_get_str_desc+0xb4>)
  401cfc:	4b21      	ldr	r3, [pc, #132]	; (401d84 <udc_req_std_dev_get_str_desc+0xb8>)
  401cfe:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
  401d00:	e011      	b.n	401d26 <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
  401d02:	2309      	movs	r3, #9
  401d04:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
  401d06:	4b20      	ldr	r3, [pc, #128]	; (401d88 <udc_req_std_dev_get_str_desc+0xbc>)
  401d08:	60bb      	str	r3, [r7, #8]
		break;
  401d0a:	e00c      	b.n	401d26 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
  401d0c:	2303      	movs	r3, #3
  401d0e:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
  401d10:	4b1e      	ldr	r3, [pc, #120]	; (401d8c <udc_req_std_dev_get_str_desc+0xc0>)
  401d12:	60bb      	str	r3, [r7, #8]
		break;
  401d14:	e007      	b.n	401d26 <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
  401d16:	230c      	movs	r3, #12
  401d18:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
  401d1a:	4b1d      	ldr	r3, [pc, #116]	; (401d90 <udc_req_std_dev_get_str_desc+0xc4>)
  401d1c:	4798      	blx	r3
  401d1e:	60b8      	str	r0, [r7, #8]
		break;
  401d20:	e001      	b.n	401d26 <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
  401d22:	2300      	movs	r3, #0
  401d24:	e026      	b.n	401d74 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
  401d26:	79fb      	ldrb	r3, [r7, #7]
  401d28:	2b00      	cmp	r3, #0
  401d2a:	d022      	beq.n	401d72 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
  401d2c:	2300      	movs	r3, #0
  401d2e:	73fb      	strb	r3, [r7, #15]
  401d30:	e00d      	b.n	401d4e <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
  401d32:	7bfb      	ldrb	r3, [r7, #15]
  401d34:	7bfa      	ldrb	r2, [r7, #15]
  401d36:	68b9      	ldr	r1, [r7, #8]
  401d38:	440a      	add	r2, r1
  401d3a:	7812      	ldrb	r2, [r2, #0]
  401d3c:	b291      	uxth	r1, r2
  401d3e:	4a15      	ldr	r2, [pc, #84]	; (401d94 <udc_req_std_dev_get_str_desc+0xc8>)
  401d40:	005b      	lsls	r3, r3, #1
  401d42:	4413      	add	r3, r2
  401d44:	460a      	mov	r2, r1
  401d46:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
  401d48:	7bfb      	ldrb	r3, [r7, #15]
  401d4a:	3301      	adds	r3, #1
  401d4c:	73fb      	strb	r3, [r7, #15]
  401d4e:	7bfa      	ldrb	r2, [r7, #15]
  401d50:	79fb      	ldrb	r3, [r7, #7]
  401d52:	429a      	cmp	r2, r3
  401d54:	d3ed      	bcc.n	401d32 <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
  401d56:	79fb      	ldrb	r3, [r7, #7]
  401d58:	3301      	adds	r3, #1
  401d5a:	b2db      	uxtb	r3, r3
  401d5c:	005b      	lsls	r3, r3, #1
  401d5e:	b2da      	uxtb	r2, r3
  401d60:	4b0c      	ldr	r3, [pc, #48]	; (401d94 <udc_req_std_dev_get_str_desc+0xc8>)
  401d62:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
  401d64:	4b0b      	ldr	r3, [pc, #44]	; (401d94 <udc_req_std_dev_get_str_desc+0xc8>)
  401d66:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
  401d68:	b29b      	uxth	r3, r3
  401d6a:	4619      	mov	r1, r3
  401d6c:	4809      	ldr	r0, [pc, #36]	; (401d94 <udc_req_std_dev_get_str_desc+0xc8>)
  401d6e:	4b05      	ldr	r3, [pc, #20]	; (401d84 <udc_req_std_dev_get_str_desc+0xb8>)
  401d70:	4798      	blx	r3
	}

	return true;
  401d72:	2301      	movs	r3, #1
}
  401d74:	4618      	mov	r0, r3
  401d76:	3710      	adds	r7, #16
  401d78:	46bd      	mov	sp, r7
  401d7a:	bd80      	pop	{r7, pc}
  401d7c:	2000a748 	.word	0x2000a748
  401d80:	20000094 	.word	0x20000094
  401d84:	00403661 	.word	0x00403661
  401d88:	20000098 	.word	0x20000098
  401d8c:	200000a4 	.word	0x200000a4
  401d90:	004017f1 	.word	0x004017f1
  401d94:	200000a8 	.word	0x200000a8

00401d98 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
  401d98:	b580      	push	{r7, lr}
  401d9a:	b082      	sub	sp, #8
  401d9c:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
  401d9e:	4b41      	ldr	r3, [pc, #260]	; (401ea4 <udc_req_std_dev_get_descriptor+0x10c>)
  401da0:	885b      	ldrh	r3, [r3, #2]
  401da2:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
  401da4:	4b3f      	ldr	r3, [pc, #252]	; (401ea4 <udc_req_std_dev_get_descriptor+0x10c>)
  401da6:	885b      	ldrh	r3, [r3, #2]
  401da8:	0a1b      	lsrs	r3, r3, #8
  401daa:	b29b      	uxth	r3, r3
  401dac:	b2db      	uxtb	r3, r3
  401dae:	3b01      	subs	r3, #1
  401db0:	2b0e      	cmp	r3, #14
  401db2:	d865      	bhi.n	401e80 <udc_req_std_dev_get_descriptor+0xe8>
  401db4:	a201      	add	r2, pc, #4	; (adr r2, 401dbc <udc_req_std_dev_get_descriptor+0x24>)
  401db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401dba:	bf00      	nop
  401dbc:	00401df9 	.word	0x00401df9
  401dc0:	00401e0f 	.word	0x00401e0f
  401dc4:	00401e6d 	.word	0x00401e6d
  401dc8:	00401e81 	.word	0x00401e81
  401dcc:	00401e81 	.word	0x00401e81
  401dd0:	00401e81 	.word	0x00401e81
  401dd4:	00401e81 	.word	0x00401e81
  401dd8:	00401e81 	.word	0x00401e81
  401ddc:	00401e81 	.word	0x00401e81
  401de0:	00401e81 	.word	0x00401e81
  401de4:	00401e81 	.word	0x00401e81
  401de8:	00401e81 	.word	0x00401e81
  401dec:	00401e81 	.word	0x00401e81
  401df0:	00401e81 	.word	0x00401e81
  401df4:	00401e4b 	.word	0x00401e4b
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
  401df8:	4b2b      	ldr	r3, [pc, #172]	; (401ea8 <udc_req_std_dev_get_descriptor+0x110>)
  401dfa:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
  401dfc:	4b2a      	ldr	r3, [pc, #168]	; (401ea8 <udc_req_std_dev_get_descriptor+0x110>)
  401dfe:	681b      	ldr	r3, [r3, #0]
  401e00:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
  401e02:	b29b      	uxth	r3, r3
  401e04:	4619      	mov	r1, r3
  401e06:	4610      	mov	r0, r2
  401e08:	4b28      	ldr	r3, [pc, #160]	; (401eac <udc_req_std_dev_get_descriptor+0x114>)
  401e0a:	4798      	blx	r3
		}
		break;
  401e0c:	e03b      	b.n	401e86 <udc_req_std_dev_get_descriptor+0xee>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
  401e0e:	4b26      	ldr	r3, [pc, #152]	; (401ea8 <udc_req_std_dev_get_descriptor+0x110>)
  401e10:	681b      	ldr	r3, [r3, #0]
  401e12:	7c5b      	ldrb	r3, [r3, #17]
  401e14:	79fa      	ldrb	r2, [r7, #7]
  401e16:	429a      	cmp	r2, r3
  401e18:	d301      	bcc.n	401e1e <udc_req_std_dev_get_descriptor+0x86>
					bNumConfigurations) {
				return false;
  401e1a:	2300      	movs	r3, #0
  401e1c:	e03e      	b.n	401e9c <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
  401e1e:	4b22      	ldr	r3, [pc, #136]	; (401ea8 <udc_req_std_dev_get_descriptor+0x110>)
  401e20:	685a      	ldr	r2, [r3, #4]
  401e22:	79fb      	ldrb	r3, [r7, #7]
  401e24:	00db      	lsls	r3, r3, #3
  401e26:	4413      	add	r3, r2
  401e28:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
  401e2a:	4b1f      	ldr	r3, [pc, #124]	; (401ea8 <udc_req_std_dev_get_descriptor+0x110>)
  401e2c:	685a      	ldr	r2, [r3, #4]
  401e2e:	79fb      	ldrb	r3, [r7, #7]
  401e30:	00db      	lsls	r3, r3, #3
  401e32:	4413      	add	r3, r2
  401e34:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
  401e36:	885b      	ldrh	r3, [r3, #2]
  401e38:	b29b      	uxth	r3, r3
  401e3a:	4619      	mov	r1, r3
  401e3c:	4b1b      	ldr	r3, [pc, #108]	; (401eac <udc_req_std_dev_get_descriptor+0x114>)
  401e3e:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
  401e40:	4b18      	ldr	r3, [pc, #96]	; (401ea4 <udc_req_std_dev_get_descriptor+0x10c>)
  401e42:	689b      	ldr	r3, [r3, #8]
  401e44:	2202      	movs	r2, #2
  401e46:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
  401e48:	e01d      	b.n	401e86 <udc_req_std_dev_get_descriptor+0xee>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
  401e4a:	4b17      	ldr	r3, [pc, #92]	; (401ea8 <udc_req_std_dev_get_descriptor+0x110>)
  401e4c:	689b      	ldr	r3, [r3, #8]
  401e4e:	2b00      	cmp	r3, #0
  401e50:	d101      	bne.n	401e56 <udc_req_std_dev_get_descriptor+0xbe>
			return false;
  401e52:	2300      	movs	r3, #0
  401e54:	e022      	b.n	401e9c <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401e56:	4b14      	ldr	r3, [pc, #80]	; (401ea8 <udc_req_std_dev_get_descriptor+0x110>)
  401e58:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
  401e5a:	4b13      	ldr	r3, [pc, #76]	; (401ea8 <udc_req_std_dev_get_descriptor+0x110>)
  401e5c:	689b      	ldr	r3, [r3, #8]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
  401e5e:	885b      	ldrh	r3, [r3, #2]
  401e60:	b29b      	uxth	r3, r3
  401e62:	4619      	mov	r1, r3
  401e64:	4610      	mov	r0, r2
  401e66:	4b11      	ldr	r3, [pc, #68]	; (401eac <udc_req_std_dev_get_descriptor+0x114>)
  401e68:	4798      	blx	r3
		break;
  401e6a:	e00c      	b.n	401e86 <udc_req_std_dev_get_descriptor+0xee>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
  401e6c:	4b10      	ldr	r3, [pc, #64]	; (401eb0 <udc_req_std_dev_get_descriptor+0x118>)
  401e6e:	4798      	blx	r3
  401e70:	4603      	mov	r3, r0
  401e72:	f083 0301 	eor.w	r3, r3, #1
  401e76:	b2db      	uxtb	r3, r3
  401e78:	2b00      	cmp	r3, #0
  401e7a:	d003      	beq.n	401e84 <udc_req_std_dev_get_descriptor+0xec>
			return false;
  401e7c:	2300      	movs	r3, #0
  401e7e:	e00d      	b.n	401e9c <udc_req_std_dev_get_descriptor+0x104>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
  401e80:	2300      	movs	r3, #0
  401e82:	e00b      	b.n	401e9c <udc_req_std_dev_get_descriptor+0x104>
		break;
  401e84:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
  401e86:	4b07      	ldr	r3, [pc, #28]	; (401ea4 <udc_req_std_dev_get_descriptor+0x10c>)
  401e88:	88da      	ldrh	r2, [r3, #6]
  401e8a:	4b06      	ldr	r3, [pc, #24]	; (401ea4 <udc_req_std_dev_get_descriptor+0x10c>)
  401e8c:	899b      	ldrh	r3, [r3, #12]
  401e8e:	429a      	cmp	r2, r3
  401e90:	d203      	bcs.n	401e9a <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
  401e92:	4b04      	ldr	r3, [pc, #16]	; (401ea4 <udc_req_std_dev_get_descriptor+0x10c>)
  401e94:	88da      	ldrh	r2, [r3, #6]
  401e96:	4b03      	ldr	r3, [pc, #12]	; (401ea4 <udc_req_std_dev_get_descriptor+0x10c>)
  401e98:	819a      	strh	r2, [r3, #12]
	}
	return true;
  401e9a:	2301      	movs	r3, #1
}
  401e9c:	4618      	mov	r0, r3
  401e9e:	3708      	adds	r7, #8
  401ea0:	46bd      	mov	sp, r7
  401ea2:	bd80      	pop	{r7, pc}
  401ea4:	2000a748 	.word	0x2000a748
  401ea8:	20000088 	.word	0x20000088
  401eac:	00403661 	.word	0x00403661
  401eb0:	00401ccd 	.word	0x00401ccd

00401eb4 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
  401eb4:	b580      	push	{r7, lr}
  401eb6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
  401eb8:	4b06      	ldr	r3, [pc, #24]	; (401ed4 <udc_req_std_dev_get_configuration+0x20>)
  401eba:	88db      	ldrh	r3, [r3, #6]
  401ebc:	2b01      	cmp	r3, #1
  401ebe:	d001      	beq.n	401ec4 <udc_req_std_dev_get_configuration+0x10>
		return false;
  401ec0:	2300      	movs	r3, #0
  401ec2:	e004      	b.n	401ece <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
  401ec4:	2101      	movs	r1, #1
  401ec6:	4804      	ldr	r0, [pc, #16]	; (401ed8 <udc_req_std_dev_get_configuration+0x24>)
  401ec8:	4b04      	ldr	r3, [pc, #16]	; (401edc <udc_req_std_dev_get_configuration+0x28>)
  401eca:	4798      	blx	r3
	return true;
  401ecc:	2301      	movs	r3, #1
}
  401ece:	4618      	mov	r0, r3
  401ed0:	bd80      	pop	{r7, pc}
  401ed2:	bf00      	nop
  401ed4:	2000a748 	.word	0x2000a748
  401ed8:	20006588 	.word	0x20006588
  401edc:	00403661 	.word	0x00403661

00401ee0 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
  401ee0:	b580      	push	{r7, lr}
  401ee2:	b082      	sub	sp, #8
  401ee4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
  401ee6:	4b27      	ldr	r3, [pc, #156]	; (401f84 <udc_req_std_dev_set_configuration+0xa4>)
  401ee8:	88db      	ldrh	r3, [r3, #6]
  401eea:	2b00      	cmp	r3, #0
  401eec:	d001      	beq.n	401ef2 <udc_req_std_dev_set_configuration+0x12>
		return false;
  401eee:	2300      	movs	r3, #0
  401ef0:	e043      	b.n	401f7a <udc_req_std_dev_set_configuration+0x9a>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
  401ef2:	4b25      	ldr	r3, [pc, #148]	; (401f88 <udc_req_std_dev_set_configuration+0xa8>)
  401ef4:	4798      	blx	r3
  401ef6:	4603      	mov	r3, r0
  401ef8:	2b00      	cmp	r3, #0
  401efa:	d101      	bne.n	401f00 <udc_req_std_dev_set_configuration+0x20>
		return false;
  401efc:	2300      	movs	r3, #0
  401efe:	e03c      	b.n	401f7a <udc_req_std_dev_set_configuration+0x9a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401f00:	4b20      	ldr	r3, [pc, #128]	; (401f84 <udc_req_std_dev_set_configuration+0xa4>)
  401f02:	885b      	ldrh	r3, [r3, #2]
  401f04:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
  401f06:	4a21      	ldr	r2, [pc, #132]	; (401f8c <udc_req_std_dev_set_configuration+0xac>)
  401f08:	6812      	ldr	r2, [r2, #0]
  401f0a:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
  401f0c:	4293      	cmp	r3, r2
  401f0e:	dd01      	ble.n	401f14 <udc_req_std_dev_set_configuration+0x34>
			return false;
  401f10:	2300      	movs	r3, #0
  401f12:	e032      	b.n	401f7a <udc_req_std_dev_set_configuration+0x9a>
		}
	}

	// Reset current configuration
	udc_reset();
  401f14:	4b1e      	ldr	r3, [pc, #120]	; (401f90 <udc_req_std_dev_set_configuration+0xb0>)
  401f16:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
  401f18:	4b1a      	ldr	r3, [pc, #104]	; (401f84 <udc_req_std_dev_set_configuration+0xa4>)
  401f1a:	885b      	ldrh	r3, [r3, #2]
  401f1c:	b2da      	uxtb	r2, r3
  401f1e:	4b1d      	ldr	r3, [pc, #116]	; (401f94 <udc_req_std_dev_set_configuration+0xb4>)
  401f20:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
  401f22:	4b1c      	ldr	r3, [pc, #112]	; (401f94 <udc_req_std_dev_set_configuration+0xb4>)
  401f24:	781b      	ldrb	r3, [r3, #0]
  401f26:	2b00      	cmp	r3, #0
  401f28:	d101      	bne.n	401f2e <udc_req_std_dev_set_configuration+0x4e>
		return true; // Default empty configuration requested
  401f2a:	2301      	movs	r3, #1
  401f2c:	e025      	b.n	401f7a <udc_req_std_dev_set_configuration+0x9a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
  401f2e:	4b17      	ldr	r3, [pc, #92]	; (401f8c <udc_req_std_dev_set_configuration+0xac>)
  401f30:	685a      	ldr	r2, [r3, #4]
  401f32:	4b18      	ldr	r3, [pc, #96]	; (401f94 <udc_req_std_dev_set_configuration+0xb4>)
  401f34:	781b      	ldrb	r3, [r3, #0]
  401f36:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
  401f3a:	3b01      	subs	r3, #1
  401f3c:	00db      	lsls	r3, r3, #3
  401f3e:	4413      	add	r3, r2
  401f40:	4a15      	ldr	r2, [pc, #84]	; (401f98 <udc_req_std_dev_set_configuration+0xb8>)
  401f42:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401f44:	2300      	movs	r3, #0
  401f46:	71fb      	strb	r3, [r7, #7]
  401f48:	e00f      	b.n	401f6a <udc_req_std_dev_set_configuration+0x8a>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
  401f4a:	79fb      	ldrb	r3, [r7, #7]
  401f4c:	2100      	movs	r1, #0
  401f4e:	4618      	mov	r0, r3
  401f50:	4b12      	ldr	r3, [pc, #72]	; (401f9c <udc_req_std_dev_set_configuration+0xbc>)
  401f52:	4798      	blx	r3
  401f54:	4603      	mov	r3, r0
  401f56:	f083 0301 	eor.w	r3, r3, #1
  401f5a:	b2db      	uxtb	r3, r3
  401f5c:	2b00      	cmp	r3, #0
  401f5e:	d001      	beq.n	401f64 <udc_req_std_dev_set_configuration+0x84>
			return false;
  401f60:	2300      	movs	r3, #0
  401f62:	e00a      	b.n	401f7a <udc_req_std_dev_set_configuration+0x9a>
			iface_num++) {
  401f64:	79fb      	ldrb	r3, [r7, #7]
  401f66:	3301      	adds	r3, #1
  401f68:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  401f6a:	4b0b      	ldr	r3, [pc, #44]	; (401f98 <udc_req_std_dev_set_configuration+0xb8>)
  401f6c:	681b      	ldr	r3, [r3, #0]
  401f6e:	681b      	ldr	r3, [r3, #0]
  401f70:	791b      	ldrb	r3, [r3, #4]
  401f72:	79fa      	ldrb	r2, [r7, #7]
  401f74:	429a      	cmp	r2, r3
  401f76:	d3e8      	bcc.n	401f4a <udc_req_std_dev_set_configuration+0x6a>
		}
	}
	return true;
  401f78:	2301      	movs	r3, #1
}
  401f7a:	4618      	mov	r0, r3
  401f7c:	3708      	adds	r7, #8
  401f7e:	46bd      	mov	sp, r7
  401f80:	bd80      	pop	{r7, pc}
  401f82:	bf00      	nop
  401f84:	2000a748 	.word	0x2000a748
  401f88:	00403611 	.word	0x00403611
  401f8c:	20000088 	.word	0x20000088
  401f90:	00401a69 	.word	0x00401a69
  401f94:	20006588 	.word	0x20006588
  401f98:	2000658c 	.word	0x2000658c
  401f9c:	004019c1 	.word	0x004019c1

00401fa0 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
  401fa0:	b580      	push	{r7, lr}
  401fa2:	b082      	sub	sp, #8
  401fa4:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
  401fa6:	4b1e      	ldr	r3, [pc, #120]	; (402020 <udc_req_std_iface_get_setting+0x80>)
  401fa8:	88db      	ldrh	r3, [r3, #6]
  401faa:	2b01      	cmp	r3, #1
  401fac:	d001      	beq.n	401fb2 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
  401fae:	2300      	movs	r3, #0
  401fb0:	e032      	b.n	402018 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
  401fb2:	4b1c      	ldr	r3, [pc, #112]	; (402024 <udc_req_std_iface_get_setting+0x84>)
  401fb4:	781b      	ldrb	r3, [r3, #0]
  401fb6:	2b00      	cmp	r3, #0
  401fb8:	d101      	bne.n	401fbe <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
  401fba:	2300      	movs	r3, #0
  401fbc:	e02c      	b.n	402018 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  401fbe:	4b18      	ldr	r3, [pc, #96]	; (402020 <udc_req_std_iface_get_setting+0x80>)
  401fc0:	889b      	ldrh	r3, [r3, #4]
  401fc2:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  401fc4:	4b18      	ldr	r3, [pc, #96]	; (402028 <udc_req_std_iface_get_setting+0x88>)
  401fc6:	681b      	ldr	r3, [r3, #0]
  401fc8:	681b      	ldr	r3, [r3, #0]
  401fca:	791b      	ldrb	r3, [r3, #4]
  401fcc:	79fa      	ldrb	r2, [r7, #7]
  401fce:	429a      	cmp	r2, r3
  401fd0:	d301      	bcc.n	401fd6 <udc_req_std_iface_get_setting+0x36>
		return false;
  401fd2:	2300      	movs	r3, #0
  401fd4:	e020      	b.n	402018 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  401fd6:	79fb      	ldrb	r3, [r7, #7]
  401fd8:	2100      	movs	r1, #0
  401fda:	4618      	mov	r0, r3
  401fdc:	4b13      	ldr	r3, [pc, #76]	; (40202c <udc_req_std_iface_get_setting+0x8c>)
  401fde:	4798      	blx	r3
  401fe0:	4603      	mov	r3, r0
  401fe2:	f083 0301 	eor.w	r3, r3, #1
  401fe6:	b2db      	uxtb	r3, r3
  401fe8:	2b00      	cmp	r3, #0
  401fea:	d001      	beq.n	401ff0 <udc_req_std_iface_get_setting+0x50>
		return false;
  401fec:	2300      	movs	r3, #0
  401fee:	e013      	b.n	402018 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  401ff0:	4b0d      	ldr	r3, [pc, #52]	; (402028 <udc_req_std_iface_get_setting+0x88>)
  401ff2:	681b      	ldr	r3, [r3, #0]
  401ff4:	685a      	ldr	r2, [r3, #4]
  401ff6:	79fb      	ldrb	r3, [r7, #7]
  401ff8:	009b      	lsls	r3, r3, #2
  401ffa:	4413      	add	r3, r2
  401ffc:	681b      	ldr	r3, [r3, #0]
  401ffe:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
  402000:	683b      	ldr	r3, [r7, #0]
  402002:	68db      	ldr	r3, [r3, #12]
  402004:	4798      	blx	r3
  402006:	4603      	mov	r3, r0
  402008:	461a      	mov	r2, r3
  40200a:	4b09      	ldr	r3, [pc, #36]	; (402030 <udc_req_std_iface_get_setting+0x90>)
  40200c:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
  40200e:	2101      	movs	r1, #1
  402010:	4807      	ldr	r0, [pc, #28]	; (402030 <udc_req_std_iface_get_setting+0x90>)
  402012:	4b08      	ldr	r3, [pc, #32]	; (402034 <udc_req_std_iface_get_setting+0x94>)
  402014:	4798      	blx	r3
	return true;
  402016:	2301      	movs	r3, #1
}
  402018:	4618      	mov	r0, r3
  40201a:	3708      	adds	r7, #8
  40201c:	46bd      	mov	sp, r7
  40201e:	bd80      	pop	{r7, pc}
  402020:	2000a748 	.word	0x2000a748
  402024:	20006588 	.word	0x20006588
  402028:	2000658c 	.word	0x2000658c
  40202c:	00401885 	.word	0x00401885
  402030:	20006584 	.word	0x20006584
  402034:	00403661 	.word	0x00403661

00402038 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
  402038:	b580      	push	{r7, lr}
  40203a:	b082      	sub	sp, #8
  40203c:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
  40203e:	4b14      	ldr	r3, [pc, #80]	; (402090 <udc_req_std_iface_set_setting+0x58>)
  402040:	88db      	ldrh	r3, [r3, #6]
  402042:	2b00      	cmp	r3, #0
  402044:	d001      	beq.n	40204a <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
  402046:	2300      	movs	r3, #0
  402048:	e01e      	b.n	402088 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
  40204a:	4b12      	ldr	r3, [pc, #72]	; (402094 <udc_req_std_iface_set_setting+0x5c>)
  40204c:	781b      	ldrb	r3, [r3, #0]
  40204e:	2b00      	cmp	r3, #0
  402050:	d101      	bne.n	402056 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
  402052:	2300      	movs	r3, #0
  402054:	e018      	b.n	402088 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  402056:	4b0e      	ldr	r3, [pc, #56]	; (402090 <udc_req_std_iface_set_setting+0x58>)
  402058:	889b      	ldrh	r3, [r3, #4]
  40205a:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
  40205c:	4b0c      	ldr	r3, [pc, #48]	; (402090 <udc_req_std_iface_set_setting+0x58>)
  40205e:	885b      	ldrh	r3, [r3, #2]
  402060:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
  402062:	79fb      	ldrb	r3, [r7, #7]
  402064:	4618      	mov	r0, r3
  402066:	4b0c      	ldr	r3, [pc, #48]	; (402098 <udc_req_std_iface_set_setting+0x60>)
  402068:	4798      	blx	r3
  40206a:	4603      	mov	r3, r0
  40206c:	f083 0301 	eor.w	r3, r3, #1
  402070:	b2db      	uxtb	r3, r3
  402072:	2b00      	cmp	r3, #0
  402074:	d001      	beq.n	40207a <udc_req_std_iface_set_setting+0x42>
		return false;
  402076:	2300      	movs	r3, #0
  402078:	e006      	b.n	402088 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
  40207a:	79ba      	ldrb	r2, [r7, #6]
  40207c:	79fb      	ldrb	r3, [r7, #7]
  40207e:	4611      	mov	r1, r2
  402080:	4618      	mov	r0, r3
  402082:	4b06      	ldr	r3, [pc, #24]	; (40209c <udc_req_std_iface_set_setting+0x64>)
  402084:	4798      	blx	r3
  402086:	4603      	mov	r3, r0
}
  402088:	4618      	mov	r0, r3
  40208a:	3708      	adds	r7, #8
  40208c:	46bd      	mov	sp, r7
  40208e:	bd80      	pop	{r7, pc}
  402090:	2000a748 	.word	0x2000a748
  402094:	20006588 	.word	0x20006588
  402098:	00401921 	.word	0x00401921
  40209c:	004019c1 	.word	0x004019c1

004020a0 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
  4020a0:	b580      	push	{r7, lr}
  4020a2:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
  4020a4:	4b4d      	ldr	r3, [pc, #308]	; (4021dc <udc_reqstd+0x13c>)
  4020a6:	781b      	ldrb	r3, [r3, #0]
  4020a8:	b25b      	sxtb	r3, r3
  4020aa:	2b00      	cmp	r3, #0
  4020ac:	da3e      	bge.n	40212c <udc_reqstd+0x8c>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
  4020ae:	4b4b      	ldr	r3, [pc, #300]	; (4021dc <udc_reqstd+0x13c>)
  4020b0:	88db      	ldrh	r3, [r3, #6]
  4020b2:	2b00      	cmp	r3, #0
  4020b4:	d101      	bne.n	4020ba <udc_reqstd+0x1a>
			return false; // Error for USB host
  4020b6:	2300      	movs	r3, #0
  4020b8:	e08e      	b.n	4021d8 <udc_reqstd+0x138>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  4020ba:	4b48      	ldr	r3, [pc, #288]	; (4021dc <udc_reqstd+0x13c>)
  4020bc:	781b      	ldrb	r3, [r3, #0]
  4020be:	f003 031f 	and.w	r3, r3, #31
  4020c2:	2b00      	cmp	r3, #0
  4020c4:	d114      	bne.n	4020f0 <udc_reqstd+0x50>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  4020c6:	4b45      	ldr	r3, [pc, #276]	; (4021dc <udc_reqstd+0x13c>)
  4020c8:	785b      	ldrb	r3, [r3, #1]
  4020ca:	2b06      	cmp	r3, #6
  4020cc:	d008      	beq.n	4020e0 <udc_reqstd+0x40>
  4020ce:	2b08      	cmp	r3, #8
  4020d0:	d00a      	beq.n	4020e8 <udc_reqstd+0x48>
  4020d2:	2b00      	cmp	r3, #0
  4020d4:	d000      	beq.n	4020d8 <udc_reqstd+0x38>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
  4020d6:	e00b      	b.n	4020f0 <udc_reqstd+0x50>
				return udc_req_std_dev_get_status();
  4020d8:	4b41      	ldr	r3, [pc, #260]	; (4021e0 <udc_reqstd+0x140>)
  4020da:	4798      	blx	r3
  4020dc:	4603      	mov	r3, r0
  4020de:	e07b      	b.n	4021d8 <udc_reqstd+0x138>
				return udc_req_std_dev_get_descriptor();
  4020e0:	4b40      	ldr	r3, [pc, #256]	; (4021e4 <udc_reqstd+0x144>)
  4020e2:	4798      	blx	r3
  4020e4:	4603      	mov	r3, r0
  4020e6:	e077      	b.n	4021d8 <udc_reqstd+0x138>
				return udc_req_std_dev_get_configuration();
  4020e8:	4b3f      	ldr	r3, [pc, #252]	; (4021e8 <udc_reqstd+0x148>)
  4020ea:	4798      	blx	r3
  4020ec:	4603      	mov	r3, r0
  4020ee:	e073      	b.n	4021d8 <udc_reqstd+0x138>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  4020f0:	4b3a      	ldr	r3, [pc, #232]	; (4021dc <udc_reqstd+0x13c>)
  4020f2:	781b      	ldrb	r3, [r3, #0]
  4020f4:	f003 031f 	and.w	r3, r3, #31
  4020f8:	2b01      	cmp	r3, #1
  4020fa:	d108      	bne.n	40210e <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  4020fc:	4b37      	ldr	r3, [pc, #220]	; (4021dc <udc_reqstd+0x13c>)
  4020fe:	785b      	ldrb	r3, [r3, #1]
  402100:	2b0a      	cmp	r3, #10
  402102:	d000      	beq.n	402106 <udc_reqstd+0x66>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
  402104:	e003      	b.n	40210e <udc_reqstd+0x6e>
				return udc_req_std_iface_get_setting();
  402106:	4b39      	ldr	r3, [pc, #228]	; (4021ec <udc_reqstd+0x14c>)
  402108:	4798      	blx	r3
  40210a:	4603      	mov	r3, r0
  40210c:	e064      	b.n	4021d8 <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  40210e:	4b33      	ldr	r3, [pc, #204]	; (4021dc <udc_reqstd+0x13c>)
  402110:	781b      	ldrb	r3, [r3, #0]
  402112:	f003 031f 	and.w	r3, r3, #31
  402116:	2b02      	cmp	r3, #2
  402118:	d15d      	bne.n	4021d6 <udc_reqstd+0x136>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  40211a:	4b30      	ldr	r3, [pc, #192]	; (4021dc <udc_reqstd+0x13c>)
  40211c:	785b      	ldrb	r3, [r3, #1]
  40211e:	2b00      	cmp	r3, #0
  402120:	d000      	beq.n	402124 <udc_reqstd+0x84>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
  402122:	e058      	b.n	4021d6 <udc_reqstd+0x136>
				return udc_req_std_ep_get_status();
  402124:	4b32      	ldr	r3, [pc, #200]	; (4021f0 <udc_reqstd+0x150>)
  402126:	4798      	blx	r3
  402128:	4603      	mov	r3, r0
  40212a:	e055      	b.n	4021d8 <udc_reqstd+0x138>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
  40212c:	4b2b      	ldr	r3, [pc, #172]	; (4021dc <udc_reqstd+0x13c>)
  40212e:	781b      	ldrb	r3, [r3, #0]
  402130:	f003 031f 	and.w	r3, r3, #31
  402134:	2b00      	cmp	r3, #0
  402136:	d12a      	bne.n	40218e <udc_reqstd+0xee>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
  402138:	4b28      	ldr	r3, [pc, #160]	; (4021dc <udc_reqstd+0x13c>)
  40213a:	785b      	ldrb	r3, [r3, #1]
  40213c:	3b01      	subs	r3, #1
  40213e:	2b08      	cmp	r3, #8
  402140:	d824      	bhi.n	40218c <udc_reqstd+0xec>
  402142:	a201      	add	r2, pc, #4	; (adr r2, 402148 <udc_reqstd+0xa8>)
  402144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402148:	00402175 	.word	0x00402175
  40214c:	0040218d 	.word	0x0040218d
  402150:	0040217d 	.word	0x0040217d
  402154:	0040218d 	.word	0x0040218d
  402158:	0040216d 	.word	0x0040216d
  40215c:	0040218d 	.word	0x0040218d
  402160:	0040218d 	.word	0x0040218d
  402164:	0040218d 	.word	0x0040218d
  402168:	00402185 	.word	0x00402185
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
  40216c:	4b21      	ldr	r3, [pc, #132]	; (4021f4 <udc_reqstd+0x154>)
  40216e:	4798      	blx	r3
  402170:	4603      	mov	r3, r0
  402172:	e031      	b.n	4021d8 <udc_reqstd+0x138>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
  402174:	4b20      	ldr	r3, [pc, #128]	; (4021f8 <udc_reqstd+0x158>)
  402176:	4798      	blx	r3
  402178:	4603      	mov	r3, r0
  40217a:	e02d      	b.n	4021d8 <udc_reqstd+0x138>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
  40217c:	4b1f      	ldr	r3, [pc, #124]	; (4021fc <udc_reqstd+0x15c>)
  40217e:	4798      	blx	r3
  402180:	4603      	mov	r3, r0
  402182:	e029      	b.n	4021d8 <udc_reqstd+0x138>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
  402184:	4b1e      	ldr	r3, [pc, #120]	; (402200 <udc_reqstd+0x160>)
  402186:	4798      	blx	r3
  402188:	4603      	mov	r3, r0
  40218a:	e025      	b.n	4021d8 <udc_reqstd+0x138>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
  40218c:	bf00      	nop
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
  40218e:	4b13      	ldr	r3, [pc, #76]	; (4021dc <udc_reqstd+0x13c>)
  402190:	781b      	ldrb	r3, [r3, #0]
  402192:	f003 031f 	and.w	r3, r3, #31
  402196:	2b01      	cmp	r3, #1
  402198:	d108      	bne.n	4021ac <udc_reqstd+0x10c>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
  40219a:	4b10      	ldr	r3, [pc, #64]	; (4021dc <udc_reqstd+0x13c>)
  40219c:	785b      	ldrb	r3, [r3, #1]
  40219e:	2b0b      	cmp	r3, #11
  4021a0:	d000      	beq.n	4021a4 <udc_reqstd+0x104>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
  4021a2:	e003      	b.n	4021ac <udc_reqstd+0x10c>
				return udc_req_std_iface_set_setting();
  4021a4:	4b17      	ldr	r3, [pc, #92]	; (402204 <udc_reqstd+0x164>)
  4021a6:	4798      	blx	r3
  4021a8:	4603      	mov	r3, r0
  4021aa:	e015      	b.n	4021d8 <udc_reqstd+0x138>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
  4021ac:	4b0b      	ldr	r3, [pc, #44]	; (4021dc <udc_reqstd+0x13c>)
  4021ae:	781b      	ldrb	r3, [r3, #0]
  4021b0:	f003 031f 	and.w	r3, r3, #31
  4021b4:	2b02      	cmp	r3, #2
  4021b6:	d10e      	bne.n	4021d6 <udc_reqstd+0x136>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
  4021b8:	4b08      	ldr	r3, [pc, #32]	; (4021dc <udc_reqstd+0x13c>)
  4021ba:	785b      	ldrb	r3, [r3, #1]
  4021bc:	2b01      	cmp	r3, #1
  4021be:	d002      	beq.n	4021c6 <udc_reqstd+0x126>
  4021c0:	2b03      	cmp	r3, #3
  4021c2:	d004      	beq.n	4021ce <udc_reqstd+0x12e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
  4021c4:	e007      	b.n	4021d6 <udc_reqstd+0x136>
				return udc_req_std_ep_clear_feature();
  4021c6:	4b10      	ldr	r3, [pc, #64]	; (402208 <udc_reqstd+0x168>)
  4021c8:	4798      	blx	r3
  4021ca:	4603      	mov	r3, r0
  4021cc:	e004      	b.n	4021d8 <udc_reqstd+0x138>
				return udc_req_std_ep_set_feature();
  4021ce:	4b0f      	ldr	r3, [pc, #60]	; (40220c <udc_reqstd+0x16c>)
  4021d0:	4798      	blx	r3
  4021d2:	4603      	mov	r3, r0
  4021d4:	e000      	b.n	4021d8 <udc_reqstd+0x138>
			}
		}
#endif
	}
	return false;
  4021d6:	2300      	movs	r3, #0
}
  4021d8:	4618      	mov	r0, r3
  4021da:	bd80      	pop	{r7, pc}
  4021dc:	2000a748 	.word	0x2000a748
  4021e0:	00401b1d 	.word	0x00401b1d
  4021e4:	00401d99 	.word	0x00401d99
  4021e8:	00401eb5 	.word	0x00401eb5
  4021ec:	00401fa1 	.word	0x00401fa1
  4021f0:	00401b49 	.word	0x00401b49
  4021f4:	00401ca1 	.word	0x00401ca1
  4021f8:	00401b8d 	.word	0x00401b8d
  4021fc:	00401c05 	.word	0x00401c05
  402200:	00401ee1 	.word	0x00401ee1
  402204:	00402039 	.word	0x00402039
  402208:	00401bcd 	.word	0x00401bcd
  40220c:	00401c35 	.word	0x00401c35

00402210 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
  402210:	b580      	push	{r7, lr}
  402212:	b082      	sub	sp, #8
  402214:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  402216:	4b20      	ldr	r3, [pc, #128]	; (402298 <udc_req_iface+0x88>)
  402218:	781b      	ldrb	r3, [r3, #0]
  40221a:	2b00      	cmp	r3, #0
  40221c:	d101      	bne.n	402222 <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
  40221e:	2300      	movs	r3, #0
  402220:	e036      	b.n	402290 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  402222:	4b1e      	ldr	r3, [pc, #120]	; (40229c <udc_req_iface+0x8c>)
  402224:	889b      	ldrh	r3, [r3, #4]
  402226:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
  402228:	4b1d      	ldr	r3, [pc, #116]	; (4022a0 <udc_req_iface+0x90>)
  40222a:	681b      	ldr	r3, [r3, #0]
  40222c:	681b      	ldr	r3, [r3, #0]
  40222e:	791b      	ldrb	r3, [r3, #4]
  402230:	79fa      	ldrb	r2, [r7, #7]
  402232:	429a      	cmp	r2, r3
  402234:	d301      	bcc.n	40223a <udc_req_iface+0x2a>
		return false;
  402236:	2300      	movs	r3, #0
  402238:	e02a      	b.n	402290 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
  40223a:	79fb      	ldrb	r3, [r7, #7]
  40223c:	2100      	movs	r1, #0
  40223e:	4618      	mov	r0, r3
  402240:	4b18      	ldr	r3, [pc, #96]	; (4022a4 <udc_req_iface+0x94>)
  402242:	4798      	blx	r3
  402244:	4603      	mov	r3, r0
  402246:	f083 0301 	eor.w	r3, r3, #1
  40224a:	b2db      	uxtb	r3, r3
  40224c:	2b00      	cmp	r3, #0
  40224e:	d001      	beq.n	402254 <udc_req_iface+0x44>
		return false;
  402250:	2300      	movs	r3, #0
  402252:	e01d      	b.n	402290 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
  402254:	4b12      	ldr	r3, [pc, #72]	; (4022a0 <udc_req_iface+0x90>)
  402256:	681b      	ldr	r3, [r3, #0]
  402258:	685a      	ldr	r2, [r3, #4]
  40225a:	79fb      	ldrb	r3, [r7, #7]
  40225c:	009b      	lsls	r3, r3, #2
  40225e:	4413      	add	r3, r2
  402260:	681b      	ldr	r3, [r3, #0]
  402262:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  402264:	683b      	ldr	r3, [r7, #0]
  402266:	68db      	ldr	r3, [r3, #12]
  402268:	4798      	blx	r3
  40226a:	4603      	mov	r3, r0
  40226c:	461a      	mov	r2, r3
  40226e:	79fb      	ldrb	r3, [r7, #7]
  402270:	4611      	mov	r1, r2
  402272:	4618      	mov	r0, r3
  402274:	4b0b      	ldr	r3, [pc, #44]	; (4022a4 <udc_req_iface+0x94>)
  402276:	4798      	blx	r3
  402278:	4603      	mov	r3, r0
  40227a:	f083 0301 	eor.w	r3, r3, #1
  40227e:	b2db      	uxtb	r3, r3
  402280:	2b00      	cmp	r3, #0
  402282:	d001      	beq.n	402288 <udc_req_iface+0x78>
		return false;
  402284:	2300      	movs	r3, #0
  402286:	e003      	b.n	402290 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
  402288:	683b      	ldr	r3, [r7, #0]
  40228a:	689b      	ldr	r3, [r3, #8]
  40228c:	4798      	blx	r3
  40228e:	4603      	mov	r3, r0
}
  402290:	4618      	mov	r0, r3
  402292:	3708      	adds	r7, #8
  402294:	46bd      	mov	sp, r7
  402296:	bd80      	pop	{r7, pc}
  402298:	20006588 	.word	0x20006588
  40229c:	2000a748 	.word	0x2000a748
  4022a0:	2000658c 	.word	0x2000658c
  4022a4:	00401885 	.word	0x00401885

004022a8 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
  4022a8:	b580      	push	{r7, lr}
  4022aa:	b082      	sub	sp, #8
  4022ac:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
  4022ae:	4b1e      	ldr	r3, [pc, #120]	; (402328 <udc_req_ep+0x80>)
  4022b0:	781b      	ldrb	r3, [r3, #0]
  4022b2:	2b00      	cmp	r3, #0
  4022b4:	d101      	bne.n	4022ba <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
  4022b6:	2300      	movs	r3, #0
  4022b8:	e032      	b.n	402320 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
  4022ba:	4b1c      	ldr	r3, [pc, #112]	; (40232c <udc_req_ep+0x84>)
  4022bc:	889b      	ldrh	r3, [r3, #4]
  4022be:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  4022c0:	2300      	movs	r3, #0
  4022c2:	71fb      	strb	r3, [r7, #7]
  4022c4:	e024      	b.n	402310 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
  4022c6:	4b1a      	ldr	r3, [pc, #104]	; (402330 <udc_req_ep+0x88>)
  4022c8:	681b      	ldr	r3, [r3, #0]
  4022ca:	685a      	ldr	r2, [r3, #4]
  4022cc:	79fb      	ldrb	r3, [r7, #7]
  4022ce:	009b      	lsls	r3, r3, #2
  4022d0:	4413      	add	r3, r2
  4022d2:	681b      	ldr	r3, [r3, #0]
  4022d4:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
  4022d6:	683b      	ldr	r3, [r7, #0]
  4022d8:	68db      	ldr	r3, [r3, #12]
  4022da:	4798      	blx	r3
  4022dc:	4603      	mov	r3, r0
  4022de:	461a      	mov	r2, r3
  4022e0:	79fb      	ldrb	r3, [r7, #7]
  4022e2:	4611      	mov	r1, r2
  4022e4:	4618      	mov	r0, r3
  4022e6:	4b13      	ldr	r3, [pc, #76]	; (402334 <udc_req_ep+0x8c>)
  4022e8:	4798      	blx	r3
  4022ea:	4603      	mov	r3, r0
  4022ec:	f083 0301 	eor.w	r3, r3, #1
  4022f0:	b2db      	uxtb	r3, r3
  4022f2:	2b00      	cmp	r3, #0
  4022f4:	d001      	beq.n	4022fa <udc_req_ep+0x52>
			return false;
  4022f6:	2300      	movs	r3, #0
  4022f8:	e012      	b.n	402320 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
  4022fa:	683b      	ldr	r3, [r7, #0]
  4022fc:	689b      	ldr	r3, [r3, #8]
  4022fe:	4798      	blx	r3
  402300:	4603      	mov	r3, r0
  402302:	2b00      	cmp	r3, #0
  402304:	d001      	beq.n	40230a <udc_req_ep+0x62>
			return true;
  402306:	2301      	movs	r3, #1
  402308:	e00a      	b.n	402320 <udc_req_ep+0x78>
			iface_num++) {
  40230a:	79fb      	ldrb	r3, [r7, #7]
  40230c:	3301      	adds	r3, #1
  40230e:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
  402310:	4b07      	ldr	r3, [pc, #28]	; (402330 <udc_req_ep+0x88>)
  402312:	681b      	ldr	r3, [r3, #0]
  402314:	681b      	ldr	r3, [r3, #0]
  402316:	791b      	ldrb	r3, [r3, #4]
  402318:	79fa      	ldrb	r2, [r7, #7]
  40231a:	429a      	cmp	r2, r3
  40231c:	d3d3      	bcc.n	4022c6 <udc_req_ep+0x1e>
		}
	}
	return false;
  40231e:	2300      	movs	r3, #0
}
  402320:	4618      	mov	r0, r3
  402322:	3708      	adds	r7, #8
  402324:	46bd      	mov	sp, r7
  402326:	bd80      	pop	{r7, pc}
  402328:	20006588 	.word	0x20006588
  40232c:	2000a748 	.word	0x2000a748
  402330:	2000658c 	.word	0x2000658c
  402334:	00401885 	.word	0x00401885

00402338 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
  402338:	b580      	push	{r7, lr}
  40233a:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
  40233c:	4b1e      	ldr	r3, [pc, #120]	; (4023b8 <udc_process_setup+0x80>)
  40233e:	2200      	movs	r2, #0
  402340:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
  402342:	4b1d      	ldr	r3, [pc, #116]	; (4023b8 <udc_process_setup+0x80>)
  402344:	2200      	movs	r2, #0
  402346:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  402348:	4b1b      	ldr	r3, [pc, #108]	; (4023b8 <udc_process_setup+0x80>)
  40234a:	2200      	movs	r2, #0
  40234c:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
  40234e:	4b1a      	ldr	r3, [pc, #104]	; (4023b8 <udc_process_setup+0x80>)
  402350:	781b      	ldrb	r3, [r3, #0]
  402352:	b25b      	sxtb	r3, r3
  402354:	2b00      	cmp	r3, #0
  402356:	da05      	bge.n	402364 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
  402358:	4b17      	ldr	r3, [pc, #92]	; (4023b8 <udc_process_setup+0x80>)
  40235a:	88db      	ldrh	r3, [r3, #6]
  40235c:	2b00      	cmp	r3, #0
  40235e:	d101      	bne.n	402364 <udc_process_setup+0x2c>
			return false; // Error from USB host
  402360:	2300      	movs	r3, #0
  402362:	e027      	b.n	4023b4 <udc_process_setup+0x7c>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
  402364:	4b14      	ldr	r3, [pc, #80]	; (4023b8 <udc_process_setup+0x80>)
  402366:	781b      	ldrb	r3, [r3, #0]
  402368:	f003 0360 	and.w	r3, r3, #96	; 0x60
  40236c:	2b00      	cmp	r3, #0
  40236e:	d106      	bne.n	40237e <udc_process_setup+0x46>
		if (udc_reqstd()) {
  402370:	4b12      	ldr	r3, [pc, #72]	; (4023bc <udc_process_setup+0x84>)
  402372:	4798      	blx	r3
  402374:	4603      	mov	r3, r0
  402376:	2b00      	cmp	r3, #0
  402378:	d001      	beq.n	40237e <udc_process_setup+0x46>
			return true;
  40237a:	2301      	movs	r3, #1
  40237c:	e01a      	b.n	4023b4 <udc_process_setup+0x7c>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
  40237e:	4b0e      	ldr	r3, [pc, #56]	; (4023b8 <udc_process_setup+0x80>)
  402380:	781b      	ldrb	r3, [r3, #0]
  402382:	f003 031f 	and.w	r3, r3, #31
  402386:	2b01      	cmp	r3, #1
  402388:	d106      	bne.n	402398 <udc_process_setup+0x60>
		if (udc_req_iface()) {
  40238a:	4b0d      	ldr	r3, [pc, #52]	; (4023c0 <udc_process_setup+0x88>)
  40238c:	4798      	blx	r3
  40238e:	4603      	mov	r3, r0
  402390:	2b00      	cmp	r3, #0
  402392:	d001      	beq.n	402398 <udc_process_setup+0x60>
			return true;
  402394:	2301      	movs	r3, #1
  402396:	e00d      	b.n	4023b4 <udc_process_setup+0x7c>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
  402398:	4b07      	ldr	r3, [pc, #28]	; (4023b8 <udc_process_setup+0x80>)
  40239a:	781b      	ldrb	r3, [r3, #0]
  40239c:	f003 031f 	and.w	r3, r3, #31
  4023a0:	2b02      	cmp	r3, #2
  4023a2:	d106      	bne.n	4023b2 <udc_process_setup+0x7a>
		if (udc_req_ep()) {
  4023a4:	4b07      	ldr	r3, [pc, #28]	; (4023c4 <udc_process_setup+0x8c>)
  4023a6:	4798      	blx	r3
  4023a8:	4603      	mov	r3, r0
  4023aa:	2b00      	cmp	r3, #0
  4023ac:	d001      	beq.n	4023b2 <udc_process_setup+0x7a>
			return true;
  4023ae:	2301      	movs	r3, #1
  4023b0:	e000      	b.n	4023b4 <udc_process_setup+0x7c>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
  4023b2:	2300      	movs	r3, #0
#endif
}
  4023b4:	4618      	mov	r0, r3
  4023b6:	bd80      	pop	{r7, pc}
  4023b8:	2000a748 	.word	0x2000a748
  4023bc:	004020a1 	.word	0x004020a1
  4023c0:	00402211 	.word	0x00402211
  4023c4:	004022a9 	.word	0x004022a9

004023c8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4023c8:	b580      	push	{r7, lr}
  4023ca:	b082      	sub	sp, #8
  4023cc:	af00      	add	r7, sp, #0
  4023ce:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4023d0:	6878      	ldr	r0, [r7, #4]
  4023d2:	4b03      	ldr	r3, [pc, #12]	; (4023e0 <sysclk_enable_peripheral_clock+0x18>)
  4023d4:	4798      	blx	r3
}
  4023d6:	bf00      	nop
  4023d8:	3708      	adds	r7, #8
  4023da:	46bd      	mov	sp, r7
  4023dc:	bd80      	pop	{r7, pc}
  4023de:	bf00      	nop
  4023e0:	00402aed 	.word	0x00402aed

004023e4 <ioport_init>:
{
  4023e4:	b580      	push	{r7, lr}
  4023e6:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  4023e8:	2009      	movs	r0, #9
  4023ea:	4b08      	ldr	r3, [pc, #32]	; (40240c <ioport_init+0x28>)
  4023ec:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  4023ee:	200a      	movs	r0, #10
  4023f0:	4b06      	ldr	r3, [pc, #24]	; (40240c <ioport_init+0x28>)
  4023f2:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  4023f4:	200b      	movs	r0, #11
  4023f6:	4b05      	ldr	r3, [pc, #20]	; (40240c <ioport_init+0x28>)
  4023f8:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  4023fa:	200c      	movs	r0, #12
  4023fc:	4b03      	ldr	r3, [pc, #12]	; (40240c <ioport_init+0x28>)
  4023fe:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  402400:	200d      	movs	r0, #13
  402402:	4b02      	ldr	r3, [pc, #8]	; (40240c <ioport_init+0x28>)
  402404:	4798      	blx	r3
}
  402406:	bf00      	nop
  402408:	bd80      	pop	{r7, pc}
  40240a:	bf00      	nop
  40240c:	004023c9 	.word	0x004023c9

00402410 <ioport_set_pin_mode>:
{
  402410:	b480      	push	{r7}
  402412:	b08d      	sub	sp, #52	; 0x34
  402414:	af00      	add	r7, sp, #0
  402416:	6078      	str	r0, [r7, #4]
  402418:	6039      	str	r1, [r7, #0]
  40241a:	687b      	ldr	r3, [r7, #4]
  40241c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40241e:	683b      	ldr	r3, [r7, #0]
  402420:	62bb      	str	r3, [r7, #40]	; 0x28
  402422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402424:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  402426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402428:	095a      	lsrs	r2, r3, #5
  40242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40242c:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  40242e:	6a3b      	ldr	r3, [r7, #32]
  402430:	f003 031f 	and.w	r3, r3, #31
  402434:	2101      	movs	r1, #1
  402436:	fa01 f303 	lsl.w	r3, r1, r3
  40243a:	61fa      	str	r2, [r7, #28]
  40243c:	61bb      	str	r3, [r7, #24]
  40243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402440:	617b      	str	r3, [r7, #20]
  402442:	69fb      	ldr	r3, [r7, #28]
  402444:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402446:	693b      	ldr	r3, [r7, #16]
  402448:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40244c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402450:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  402452:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  402454:	697b      	ldr	r3, [r7, #20]
  402456:	f003 0308 	and.w	r3, r3, #8
  40245a:	2b00      	cmp	r3, #0
  40245c:	d003      	beq.n	402466 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  40245e:	68fb      	ldr	r3, [r7, #12]
  402460:	69ba      	ldr	r2, [r7, #24]
  402462:	665a      	str	r2, [r3, #100]	; 0x64
  402464:	e002      	b.n	40246c <ioport_set_pin_mode+0x5c>
		base->PIO_PUDR = mask;
  402466:	68fb      	ldr	r3, [r7, #12]
  402468:	69ba      	ldr	r2, [r7, #24]
  40246a:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  40246c:	697b      	ldr	r3, [r7, #20]
  40246e:	f003 0310 	and.w	r3, r3, #16
  402472:	2b00      	cmp	r3, #0
  402474:	d004      	beq.n	402480 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  402476:	68fb      	ldr	r3, [r7, #12]
  402478:	69ba      	ldr	r2, [r7, #24]
  40247a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40247e:	e003      	b.n	402488 <ioport_set_pin_mode+0x78>
		base->PIO_PPDDR = mask;
  402480:	68fb      	ldr	r3, [r7, #12]
  402482:	69ba      	ldr	r2, [r7, #24]
  402484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  402488:	697b      	ldr	r3, [r7, #20]
  40248a:	f003 0320 	and.w	r3, r3, #32
  40248e:	2b00      	cmp	r3, #0
  402490:	d003      	beq.n	40249a <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  402492:	68fb      	ldr	r3, [r7, #12]
  402494:	69ba      	ldr	r2, [r7, #24]
  402496:	651a      	str	r2, [r3, #80]	; 0x50
  402498:	e002      	b.n	4024a0 <ioport_set_pin_mode+0x90>
		base->PIO_MDDR = mask;
  40249a:	68fb      	ldr	r3, [r7, #12]
  40249c:	69ba      	ldr	r2, [r7, #24]
  40249e:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  4024a0:	697b      	ldr	r3, [r7, #20]
  4024a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  4024a6:	2b00      	cmp	r3, #0
  4024a8:	d003      	beq.n	4024b2 <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  4024aa:	68fb      	ldr	r3, [r7, #12]
  4024ac:	69ba      	ldr	r2, [r7, #24]
  4024ae:	621a      	str	r2, [r3, #32]
  4024b0:	e002      	b.n	4024b8 <ioport_set_pin_mode+0xa8>
		base->PIO_IFDR = mask;
  4024b2:	68fb      	ldr	r3, [r7, #12]
  4024b4:	69ba      	ldr	r2, [r7, #24]
  4024b6:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  4024b8:	697b      	ldr	r3, [r7, #20]
  4024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4024be:	2b00      	cmp	r3, #0
  4024c0:	d004      	beq.n	4024cc <ioport_set_pin_mode+0xbc>
		base->PIO_IFSCER = mask;
  4024c2:	68fb      	ldr	r3, [r7, #12]
  4024c4:	69ba      	ldr	r2, [r7, #24]
  4024c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  4024ca:	e003      	b.n	4024d4 <ioport_set_pin_mode+0xc4>
		base->PIO_IFSCDR = mask;
  4024cc:	68fb      	ldr	r3, [r7, #12]
  4024ce:	69ba      	ldr	r2, [r7, #24]
  4024d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  4024d4:	697b      	ldr	r3, [r7, #20]
  4024d6:	f003 0301 	and.w	r3, r3, #1
  4024da:	2b00      	cmp	r3, #0
  4024dc:	d006      	beq.n	4024ec <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  4024de:	68fb      	ldr	r3, [r7, #12]
  4024e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4024e2:	69bb      	ldr	r3, [r7, #24]
  4024e4:	431a      	orrs	r2, r3
  4024e6:	68fb      	ldr	r3, [r7, #12]
  4024e8:	671a      	str	r2, [r3, #112]	; 0x70
  4024ea:	e006      	b.n	4024fa <ioport_set_pin_mode+0xea>
		base->PIO_ABCDSR[0] &= ~mask;
  4024ec:	68fb      	ldr	r3, [r7, #12]
  4024ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4024f0:	69bb      	ldr	r3, [r7, #24]
  4024f2:	43db      	mvns	r3, r3
  4024f4:	401a      	ands	r2, r3
  4024f6:	68fb      	ldr	r3, [r7, #12]
  4024f8:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  4024fa:	697b      	ldr	r3, [r7, #20]
  4024fc:	f003 0302 	and.w	r3, r3, #2
  402500:	2b00      	cmp	r3, #0
  402502:	d006      	beq.n	402512 <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  402504:	68fb      	ldr	r3, [r7, #12]
  402506:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402508:	69bb      	ldr	r3, [r7, #24]
  40250a:	431a      	orrs	r2, r3
  40250c:	68fb      	ldr	r3, [r7, #12]
  40250e:	675a      	str	r2, [r3, #116]	; 0x74
}
  402510:	e006      	b.n	402520 <ioport_set_pin_mode+0x110>
		base->PIO_ABCDSR[1] &= ~mask;
  402512:	68fb      	ldr	r3, [r7, #12]
  402514:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  402516:	69bb      	ldr	r3, [r7, #24]
  402518:	43db      	mvns	r3, r3
  40251a:	401a      	ands	r2, r3
  40251c:	68fb      	ldr	r3, [r7, #12]
  40251e:	675a      	str	r2, [r3, #116]	; 0x74
  402520:	bf00      	nop
  402522:	3734      	adds	r7, #52	; 0x34
  402524:	46bd      	mov	sp, r7
  402526:	f85d 7b04 	ldr.w	r7, [sp], #4
  40252a:	4770      	bx	lr

0040252c <ioport_set_pin_dir>:
{
  40252c:	b480      	push	{r7}
  40252e:	b08d      	sub	sp, #52	; 0x34
  402530:	af00      	add	r7, sp, #0
  402532:	6078      	str	r0, [r7, #4]
  402534:	460b      	mov	r3, r1
  402536:	70fb      	strb	r3, [r7, #3]
  402538:	687b      	ldr	r3, [r7, #4]
  40253a:	62fb      	str	r3, [r7, #44]	; 0x2c
  40253c:	78fb      	ldrb	r3, [r7, #3]
  40253e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402544:	627b      	str	r3, [r7, #36]	; 0x24
  402546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402548:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  40254a:	6a3b      	ldr	r3, [r7, #32]
  40254c:	095b      	lsrs	r3, r3, #5
  40254e:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402550:	69fb      	ldr	r3, [r7, #28]
  402552:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402556:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40255a:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  40255c:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  40255e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402562:	2b01      	cmp	r3, #1
  402564:	d109      	bne.n	40257a <ioport_set_pin_dir+0x4e>
  402566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402568:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  40256a:	697b      	ldr	r3, [r7, #20]
  40256c:	f003 031f 	and.w	r3, r3, #31
  402570:	2201      	movs	r2, #1
  402572:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  402574:	69bb      	ldr	r3, [r7, #24]
  402576:	611a      	str	r2, [r3, #16]
  402578:	e00c      	b.n	402594 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  40257a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40257e:	2b00      	cmp	r3, #0
  402580:	d108      	bne.n	402594 <ioport_set_pin_dir+0x68>
  402582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402584:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  402586:	693b      	ldr	r3, [r7, #16]
  402588:	f003 031f 	and.w	r3, r3, #31
  40258c:	2201      	movs	r2, #1
  40258e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  402590:	69bb      	ldr	r3, [r7, #24]
  402592:	615a      	str	r2, [r3, #20]
  402594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402596:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  402598:	68fb      	ldr	r3, [r7, #12]
  40259a:	f003 031f 	and.w	r3, r3, #31
  40259e:	2201      	movs	r2, #1
  4025a0:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4025a2:	69bb      	ldr	r3, [r7, #24]
  4025a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  4025a8:	bf00      	nop
  4025aa:	3734      	adds	r7, #52	; 0x34
  4025ac:	46bd      	mov	sp, r7
  4025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4025b2:	4770      	bx	lr

004025b4 <ioport_set_pin_level>:
{
  4025b4:	b480      	push	{r7}
  4025b6:	b08b      	sub	sp, #44	; 0x2c
  4025b8:	af00      	add	r7, sp, #0
  4025ba:	6078      	str	r0, [r7, #4]
  4025bc:	460b      	mov	r3, r1
  4025be:	70fb      	strb	r3, [r7, #3]
  4025c0:	687b      	ldr	r3, [r7, #4]
  4025c2:	627b      	str	r3, [r7, #36]	; 0x24
  4025c4:	78fb      	ldrb	r3, [r7, #3]
  4025c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  4025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4025cc:	61fb      	str	r3, [r7, #28]
  4025ce:	69fb      	ldr	r3, [r7, #28]
  4025d0:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  4025d2:	69bb      	ldr	r3, [r7, #24]
  4025d4:	095b      	lsrs	r3, r3, #5
  4025d6:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4025d8:	697b      	ldr	r3, [r7, #20]
  4025da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4025de:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4025e2:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4025e4:	613b      	str	r3, [r7, #16]
	if (level) {
  4025e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  4025ea:	2b00      	cmp	r3, #0
  4025ec:	d009      	beq.n	402602 <ioport_set_pin_level+0x4e>
  4025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4025f0:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  4025f2:	68fb      	ldr	r3, [r7, #12]
  4025f4:	f003 031f 	and.w	r3, r3, #31
  4025f8:	2201      	movs	r2, #1
  4025fa:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4025fc:	693b      	ldr	r3, [r7, #16]
  4025fe:	631a      	str	r2, [r3, #48]	; 0x30
}
  402600:	e008      	b.n	402614 <ioport_set_pin_level+0x60>
  402602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402604:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  402606:	68bb      	ldr	r3, [r7, #8]
  402608:	f003 031f 	and.w	r3, r3, #31
  40260c:	2201      	movs	r2, #1
  40260e:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  402610:	693b      	ldr	r3, [r7, #16]
  402612:	635a      	str	r2, [r3, #52]	; 0x34
  402614:	bf00      	nop
  402616:	372c      	adds	r7, #44	; 0x2c
  402618:	46bd      	mov	sp, r7
  40261a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40261e:	4770      	bx	lr

00402620 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  402620:	b480      	push	{r7}
  402622:	b08d      	sub	sp, #52	; 0x34
  402624:	af00      	add	r7, sp, #0
  402626:	6078      	str	r0, [r7, #4]
  402628:	460b      	mov	r3, r1
  40262a:	70fb      	strb	r3, [r7, #3]
  40262c:	687b      	ldr	r3, [r7, #4]
  40262e:	62fb      	str	r3, [r7, #44]	; 0x2c
  402630:	78fb      	ldrb	r3, [r7, #3]
  402632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402638:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  40263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40263c:	095a      	lsrs	r2, r3, #5
  40263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402640:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  402642:	6a3b      	ldr	r3, [r7, #32]
  402644:	f003 031f 	and.w	r3, r3, #31
  402648:	2101      	movs	r1, #1
  40264a:	fa01 f303 	lsl.w	r3, r1, r3
  40264e:	61fa      	str	r2, [r7, #28]
  402650:	61bb      	str	r3, [r7, #24]
  402652:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402656:	75fb      	strb	r3, [r7, #23]
  402658:	69fb      	ldr	r3, [r7, #28]
  40265a:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40265c:	693b      	ldr	r3, [r7, #16]
  40265e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402662:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402666:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  402668:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  40266a:	7dfb      	ldrb	r3, [r7, #23]
  40266c:	3b01      	subs	r3, #1
  40266e:	2b03      	cmp	r3, #3
  402670:	d82e      	bhi.n	4026d0 <ioport_set_pin_sense_mode+0xb0>
  402672:	a201      	add	r2, pc, #4	; (adr r2, 402678 <ioport_set_pin_sense_mode+0x58>)
  402674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402678:	004026ad 	.word	0x004026ad
  40267c:	004026bf 	.word	0x004026bf
  402680:	00402689 	.word	0x00402689
  402684:	0040269b 	.word	0x0040269b
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  402688:	68fb      	ldr	r3, [r7, #12]
  40268a:	69ba      	ldr	r2, [r7, #24]
  40268c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  402690:	68fb      	ldr	r3, [r7, #12]
  402692:	69ba      	ldr	r2, [r7, #24]
  402694:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  402698:	e01f      	b.n	4026da <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  40269a:	68fb      	ldr	r3, [r7, #12]
  40269c:	69ba      	ldr	r2, [r7, #24]
  40269e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  4026a2:	68fb      	ldr	r3, [r7, #12]
  4026a4:	69ba      	ldr	r2, [r7, #24]
  4026a6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4026aa:	e016      	b.n	4026da <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  4026ac:	68fb      	ldr	r3, [r7, #12]
  4026ae:	69ba      	ldr	r2, [r7, #24]
  4026b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  4026b4:	68fb      	ldr	r3, [r7, #12]
  4026b6:	69ba      	ldr	r2, [r7, #24]
  4026b8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  4026bc:	e00d      	b.n	4026da <ioport_set_pin_sense_mode+0xba>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4026be:	68fb      	ldr	r3, [r7, #12]
  4026c0:	69ba      	ldr	r2, [r7, #24]
  4026c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4026c6:	68fb      	ldr	r3, [r7, #12]
  4026c8:	69ba      	ldr	r2, [r7, #24]
  4026ca:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  4026ce:	e004      	b.n	4026da <ioport_set_pin_sense_mode+0xba>
		break;
	default:
		base->PIO_AIMDR = mask;
  4026d0:	68fb      	ldr	r3, [r7, #12]
  4026d2:	69ba      	ldr	r2, [r7, #24]
  4026d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  4026d8:	e003      	b.n	4026e2 <ioport_set_pin_sense_mode+0xc2>
		return;
	}
	base->PIO_AIMER = mask;
  4026da:	68fb      	ldr	r3, [r7, #12]
  4026dc:	69ba      	ldr	r2, [r7, #24]
  4026de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  4026e2:	bf00      	nop
  4026e4:	3734      	adds	r7, #52	; 0x34
  4026e6:	46bd      	mov	sp, r7
  4026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026ec:	4770      	bx	lr
  4026ee:	bf00      	nop

004026f0 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_set_pin_sense_mode(pin, sense);\
	} while (0)

void board_init(void)
{
  4026f0:	b580      	push	{r7, lr}
  4026f2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4026f4:	4b0d      	ldr	r3, [pc, #52]	; (40272c <board_init+0x3c>)
  4026f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4026fa:	605a      	str	r2, [r3, #4]
#endif

	/* Initialize IOPORTs */
	ioport_init();
  4026fc:	4b0c      	ldr	r3, [pc, #48]	; (402730 <board_init+0x40>)
  4026fe:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  402700:	2101      	movs	r1, #1
  402702:	2076      	movs	r0, #118	; 0x76
  402704:	4b0b      	ldr	r3, [pc, #44]	; (402734 <board_init+0x44>)
  402706:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  402708:	2101      	movs	r1, #1
  40270a:	2076      	movs	r0, #118	; 0x76
  40270c:	4b0a      	ldr	r3, [pc, #40]	; (402738 <board_init+0x48>)
  40270e:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  402710:	2100      	movs	r1, #0
  402712:	2002      	movs	r0, #2
  402714:	4b07      	ldr	r3, [pc, #28]	; (402734 <board_init+0x44>)
  402716:	4798      	blx	r3
  402718:	2188      	movs	r1, #136	; 0x88
  40271a:	2002      	movs	r0, #2
  40271c:	4b07      	ldr	r3, [pc, #28]	; (40273c <board_init+0x4c>)
  40271e:	4798      	blx	r3
  402720:	2102      	movs	r1, #2
  402722:	2002      	movs	r0, #2
  402724:	4b06      	ldr	r3, [pc, #24]	; (402740 <board_init+0x50>)
  402726:	4798      	blx	r3
#if (defined(CONF_BOARD_TWI0) || defined(CONF_BOARD_EDBG_TWI))
	ioport_set_pin_peripheral_mode(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
	ioport_set_pin_peripheral_mode(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
#endif

}
  402728:	bf00      	nop
  40272a:	bd80      	pop	{r7, pc}
  40272c:	400e1850 	.word	0x400e1850
  402730:	004023e5 	.word	0x004023e5
  402734:	0040252d 	.word	0x0040252d
  402738:	004025b5 	.word	0x004025b5
  40273c:	00402411 	.word	0x00402411
  402740:	00402621 	.word	0x00402621

00402744 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  402744:	b480      	push	{r7}
  402746:	b083      	sub	sp, #12
  402748:	af00      	add	r7, sp, #0
  40274a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  40274c:	687b      	ldr	r3, [r7, #4]
  40274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  402750:	4618      	mov	r0, r3
  402752:	370c      	adds	r7, #12
  402754:	46bd      	mov	sp, r7
  402756:	f85d 7b04 	ldr.w	r7, [sp], #4
  40275a:	4770      	bx	lr

0040275c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  40275c:	b480      	push	{r7}
  40275e:	b083      	sub	sp, #12
  402760:	af00      	add	r7, sp, #0
  402762:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  402764:	687b      	ldr	r3, [r7, #4]
  402766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  402768:	4618      	mov	r0, r3
  40276a:	370c      	adds	r7, #12
  40276c:	46bd      	mov	sp, r7
  40276e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402772:	4770      	bx	lr

00402774 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  402774:	b580      	push	{r7, lr}
  402776:	b084      	sub	sp, #16
  402778:	af00      	add	r7, sp, #0
  40277a:	6078      	str	r0, [r7, #4]
  40277c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40277e:	6878      	ldr	r0, [r7, #4]
  402780:	4b2c      	ldr	r3, [pc, #176]	; (402834 <pio_handler_process+0xc0>)
  402782:	4798      	blx	r3
  402784:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  402786:	6878      	ldr	r0, [r7, #4]
  402788:	4b2b      	ldr	r3, [pc, #172]	; (402838 <pio_handler_process+0xc4>)
  40278a:	4798      	blx	r3
  40278c:	4602      	mov	r2, r0
  40278e:	68fb      	ldr	r3, [r7, #12]
  402790:	4013      	ands	r3, r2
  402792:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  402794:	68fb      	ldr	r3, [r7, #12]
  402796:	2b00      	cmp	r3, #0
  402798:	d03c      	beq.n	402814 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40279a:	2300      	movs	r3, #0
  40279c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40279e:	e034      	b.n	40280a <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  4027a0:	4a26      	ldr	r2, [pc, #152]	; (40283c <pio_handler_process+0xc8>)
  4027a2:	68bb      	ldr	r3, [r7, #8]
  4027a4:	011b      	lsls	r3, r3, #4
  4027a6:	4413      	add	r3, r2
  4027a8:	681a      	ldr	r2, [r3, #0]
  4027aa:	683b      	ldr	r3, [r7, #0]
  4027ac:	429a      	cmp	r2, r3
  4027ae:	d126      	bne.n	4027fe <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4027b0:	4a22      	ldr	r2, [pc, #136]	; (40283c <pio_handler_process+0xc8>)
  4027b2:	68bb      	ldr	r3, [r7, #8]
  4027b4:	011b      	lsls	r3, r3, #4
  4027b6:	4413      	add	r3, r2
  4027b8:	3304      	adds	r3, #4
  4027ba:	681a      	ldr	r2, [r3, #0]
  4027bc:	68fb      	ldr	r3, [r7, #12]
  4027be:	4013      	ands	r3, r2
  4027c0:	2b00      	cmp	r3, #0
  4027c2:	d01c      	beq.n	4027fe <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4027c4:	4a1d      	ldr	r2, [pc, #116]	; (40283c <pio_handler_process+0xc8>)
  4027c6:	68bb      	ldr	r3, [r7, #8]
  4027c8:	011b      	lsls	r3, r3, #4
  4027ca:	4413      	add	r3, r2
  4027cc:	330c      	adds	r3, #12
  4027ce:	681b      	ldr	r3, [r3, #0]
  4027d0:	491a      	ldr	r1, [pc, #104]	; (40283c <pio_handler_process+0xc8>)
  4027d2:	68ba      	ldr	r2, [r7, #8]
  4027d4:	0112      	lsls	r2, r2, #4
  4027d6:	440a      	add	r2, r1
  4027d8:	6810      	ldr	r0, [r2, #0]
  4027da:	4918      	ldr	r1, [pc, #96]	; (40283c <pio_handler_process+0xc8>)
  4027dc:	68ba      	ldr	r2, [r7, #8]
  4027de:	0112      	lsls	r2, r2, #4
  4027e0:	440a      	add	r2, r1
  4027e2:	3204      	adds	r2, #4
  4027e4:	6812      	ldr	r2, [r2, #0]
  4027e6:	4611      	mov	r1, r2
  4027e8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  4027ea:	4a14      	ldr	r2, [pc, #80]	; (40283c <pio_handler_process+0xc8>)
  4027ec:	68bb      	ldr	r3, [r7, #8]
  4027ee:	011b      	lsls	r3, r3, #4
  4027f0:	4413      	add	r3, r2
  4027f2:	3304      	adds	r3, #4
  4027f4:	681b      	ldr	r3, [r3, #0]
  4027f6:	43db      	mvns	r3, r3
  4027f8:	68fa      	ldr	r2, [r7, #12]
  4027fa:	4013      	ands	r3, r2
  4027fc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  4027fe:	68bb      	ldr	r3, [r7, #8]
  402800:	3301      	adds	r3, #1
  402802:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  402804:	68bb      	ldr	r3, [r7, #8]
  402806:	2b06      	cmp	r3, #6
  402808:	d803      	bhi.n	402812 <pio_handler_process+0x9e>
		while (status != 0) {
  40280a:	68fb      	ldr	r3, [r7, #12]
  40280c:	2b00      	cmp	r3, #0
  40280e:	d1c7      	bne.n	4027a0 <pio_handler_process+0x2c>
  402810:	e000      	b.n	402814 <pio_handler_process+0xa0>
				break;
  402812:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  402814:	4b0a      	ldr	r3, [pc, #40]	; (402840 <pio_handler_process+0xcc>)
  402816:	681b      	ldr	r3, [r3, #0]
  402818:	2b00      	cmp	r3, #0
  40281a:	d007      	beq.n	40282c <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  40281c:	4b09      	ldr	r3, [pc, #36]	; (402844 <pio_handler_process+0xd0>)
  40281e:	681b      	ldr	r3, [r3, #0]
  402820:	2b00      	cmp	r3, #0
  402822:	d003      	beq.n	40282c <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  402824:	4b07      	ldr	r3, [pc, #28]	; (402844 <pio_handler_process+0xd0>)
  402826:	681b      	ldr	r3, [r3, #0]
  402828:	6878      	ldr	r0, [r7, #4]
  40282a:	4798      	blx	r3
		}
	}
#endif
}
  40282c:	bf00      	nop
  40282e:	3710      	adds	r7, #16
  402830:	46bd      	mov	sp, r7
  402832:	bd80      	pop	{r7, pc}
  402834:	00402745 	.word	0x00402745
  402838:	0040275d 	.word	0x0040275d
  40283c:	20006598 	.word	0x20006598
  402840:	2000a744 	.word	0x2000a744
  402844:	20006608 	.word	0x20006608

00402848 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402848:	b580      	push	{r7, lr}
  40284a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40284c:	2109      	movs	r1, #9
  40284e:	4802      	ldr	r0, [pc, #8]	; (402858 <PIOA_Handler+0x10>)
  402850:	4b02      	ldr	r3, [pc, #8]	; (40285c <PIOA_Handler+0x14>)
  402852:	4798      	blx	r3
}
  402854:	bf00      	nop
  402856:	bd80      	pop	{r7, pc}
  402858:	400e0e00 	.word	0x400e0e00
  40285c:	00402775 	.word	0x00402775

00402860 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  402860:	b580      	push	{r7, lr}
  402862:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  402864:	210a      	movs	r1, #10
  402866:	4802      	ldr	r0, [pc, #8]	; (402870 <PIOB_Handler+0x10>)
  402868:	4b02      	ldr	r3, [pc, #8]	; (402874 <PIOB_Handler+0x14>)
  40286a:	4798      	blx	r3
}
  40286c:	bf00      	nop
  40286e:	bd80      	pop	{r7, pc}
  402870:	400e1000 	.word	0x400e1000
  402874:	00402775 	.word	0x00402775

00402878 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  402878:	b580      	push	{r7, lr}
  40287a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  40287c:	210b      	movs	r1, #11
  40287e:	4802      	ldr	r0, [pc, #8]	; (402888 <PIOC_Handler+0x10>)
  402880:	4b02      	ldr	r3, [pc, #8]	; (40288c <PIOC_Handler+0x14>)
  402882:	4798      	blx	r3
}
  402884:	bf00      	nop
  402886:	bd80      	pop	{r7, pc}
  402888:	400e1200 	.word	0x400e1200
  40288c:	00402775 	.word	0x00402775

00402890 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  402890:	b580      	push	{r7, lr}
  402892:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  402894:	210c      	movs	r1, #12
  402896:	4802      	ldr	r0, [pc, #8]	; (4028a0 <PIOD_Handler+0x10>)
  402898:	4b02      	ldr	r3, [pc, #8]	; (4028a4 <PIOD_Handler+0x14>)
  40289a:	4798      	blx	r3
}
  40289c:	bf00      	nop
  40289e:	bd80      	pop	{r7, pc}
  4028a0:	400e1400 	.word	0x400e1400
  4028a4:	00402775 	.word	0x00402775

004028a8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4028a8:	b580      	push	{r7, lr}
  4028aa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4028ac:	210d      	movs	r1, #13
  4028ae:	4802      	ldr	r0, [pc, #8]	; (4028b8 <PIOE_Handler+0x10>)
  4028b0:	4b02      	ldr	r3, [pc, #8]	; (4028bc <PIOE_Handler+0x14>)
  4028b2:	4798      	blx	r3
}
  4028b4:	bf00      	nop
  4028b6:	bd80      	pop	{r7, pc}
  4028b8:	400e1600 	.word	0x400e1600
  4028bc:	00402775 	.word	0x00402775

004028c0 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  4028c0:	b480      	push	{r7}
  4028c2:	b085      	sub	sp, #20
  4028c4:	af00      	add	r7, sp, #0
  4028c6:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4028c8:	491d      	ldr	r1, [pc, #116]	; (402940 <pmc_switch_mck_to_pllack+0x80>)
  4028ca:	4b1d      	ldr	r3, [pc, #116]	; (402940 <pmc_switch_mck_to_pllack+0x80>)
  4028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4028ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  4028d2:	687b      	ldr	r3, [r7, #4]
  4028d4:	4313      	orrs	r3, r2
  4028d6:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4028d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4028dc:	60fb      	str	r3, [r7, #12]
  4028de:	e007      	b.n	4028f0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4028e0:	68fb      	ldr	r3, [r7, #12]
  4028e2:	2b00      	cmp	r3, #0
  4028e4:	d101      	bne.n	4028ea <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4028e6:	2301      	movs	r3, #1
  4028e8:	e023      	b.n	402932 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4028ea:	68fb      	ldr	r3, [r7, #12]
  4028ec:	3b01      	subs	r3, #1
  4028ee:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4028f0:	4b13      	ldr	r3, [pc, #76]	; (402940 <pmc_switch_mck_to_pllack+0x80>)
  4028f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4028f4:	f003 0308 	and.w	r3, r3, #8
  4028f8:	2b00      	cmp	r3, #0
  4028fa:	d0f1      	beq.n	4028e0 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4028fc:	4a10      	ldr	r2, [pc, #64]	; (402940 <pmc_switch_mck_to_pllack+0x80>)
  4028fe:	4b10      	ldr	r3, [pc, #64]	; (402940 <pmc_switch_mck_to_pllack+0x80>)
  402900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402902:	f023 0303 	bic.w	r3, r3, #3
  402906:	f043 0302 	orr.w	r3, r3, #2
  40290a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40290c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  402910:	60fb      	str	r3, [r7, #12]
  402912:	e007      	b.n	402924 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  402914:	68fb      	ldr	r3, [r7, #12]
  402916:	2b00      	cmp	r3, #0
  402918:	d101      	bne.n	40291e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40291a:	2301      	movs	r3, #1
  40291c:	e009      	b.n	402932 <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  40291e:	68fb      	ldr	r3, [r7, #12]
  402920:	3b01      	subs	r3, #1
  402922:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  402924:	4b06      	ldr	r3, [pc, #24]	; (402940 <pmc_switch_mck_to_pllack+0x80>)
  402926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402928:	f003 0308 	and.w	r3, r3, #8
  40292c:	2b00      	cmp	r3, #0
  40292e:	d0f1      	beq.n	402914 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  402930:	2300      	movs	r3, #0
}
  402932:	4618      	mov	r0, r3
  402934:	3714      	adds	r7, #20
  402936:	46bd      	mov	sp, r7
  402938:	f85d 7b04 	ldr.w	r7, [sp], #4
  40293c:	4770      	bx	lr
  40293e:	bf00      	nop
  402940:	400e0400 	.word	0x400e0400

00402944 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  402944:	b480      	push	{r7}
  402946:	b083      	sub	sp, #12
  402948:	af00      	add	r7, sp, #0
  40294a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  40294c:	687b      	ldr	r3, [r7, #4]
  40294e:	2b01      	cmp	r3, #1
  402950:	d107      	bne.n	402962 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  402952:	4a08      	ldr	r2, [pc, #32]	; (402974 <pmc_switch_sclk_to_32kxtal+0x30>)
  402954:	4b07      	ldr	r3, [pc, #28]	; (402974 <pmc_switch_sclk_to_32kxtal+0x30>)
  402956:	689b      	ldr	r3, [r3, #8]
  402958:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  40295c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  402960:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  402962:	4b04      	ldr	r3, [pc, #16]	; (402974 <pmc_switch_sclk_to_32kxtal+0x30>)
  402964:	4a04      	ldr	r2, [pc, #16]	; (402978 <pmc_switch_sclk_to_32kxtal+0x34>)
  402966:	601a      	str	r2, [r3, #0]
}
  402968:	bf00      	nop
  40296a:	370c      	adds	r7, #12
  40296c:	46bd      	mov	sp, r7
  40296e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402972:	4770      	bx	lr
  402974:	400e1810 	.word	0x400e1810
  402978:	a5000008 	.word	0xa5000008

0040297c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  40297c:	b480      	push	{r7}
  40297e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  402980:	4b09      	ldr	r3, [pc, #36]	; (4029a8 <pmc_osc_is_ready_32kxtal+0x2c>)
  402982:	695b      	ldr	r3, [r3, #20]
  402984:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  402988:	2b00      	cmp	r3, #0
  40298a:	d007      	beq.n	40299c <pmc_osc_is_ready_32kxtal+0x20>
  40298c:	4b07      	ldr	r3, [pc, #28]	; (4029ac <pmc_osc_is_ready_32kxtal+0x30>)
  40298e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402990:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402994:	2b00      	cmp	r3, #0
  402996:	d001      	beq.n	40299c <pmc_osc_is_ready_32kxtal+0x20>
  402998:	2301      	movs	r3, #1
  40299a:	e000      	b.n	40299e <pmc_osc_is_ready_32kxtal+0x22>
  40299c:	2300      	movs	r3, #0
}
  40299e:	4618      	mov	r0, r3
  4029a0:	46bd      	mov	sp, r7
  4029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4029a6:	4770      	bx	lr
  4029a8:	400e1810 	.word	0x400e1810
  4029ac:	400e0400 	.word	0x400e0400

004029b0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  4029b0:	b480      	push	{r7}
  4029b2:	b083      	sub	sp, #12
  4029b4:	af00      	add	r7, sp, #0
  4029b6:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  4029b8:	4a18      	ldr	r2, [pc, #96]	; (402a1c <pmc_switch_mainck_to_fastrc+0x6c>)
  4029ba:	4b18      	ldr	r3, [pc, #96]	; (402a1c <pmc_switch_mainck_to_fastrc+0x6c>)
  4029bc:	6a1b      	ldr	r3, [r3, #32]
  4029be:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4029c2:	f043 0308 	orr.w	r3, r3, #8
  4029c6:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4029c8:	bf00      	nop
  4029ca:	4b14      	ldr	r3, [pc, #80]	; (402a1c <pmc_switch_mainck_to_fastrc+0x6c>)
  4029cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4029d2:	2b00      	cmp	r3, #0
  4029d4:	d0f9      	beq.n	4029ca <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4029d6:	4911      	ldr	r1, [pc, #68]	; (402a1c <pmc_switch_mainck_to_fastrc+0x6c>)
  4029d8:	4b10      	ldr	r3, [pc, #64]	; (402a1c <pmc_switch_mainck_to_fastrc+0x6c>)
  4029da:	6a1b      	ldr	r3, [r3, #32]
  4029dc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4029e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4029e4:	687a      	ldr	r2, [r7, #4]
  4029e6:	4313      	orrs	r3, r2
  4029e8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4029ec:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4029ee:	bf00      	nop
  4029f0:	4b0a      	ldr	r3, [pc, #40]	; (402a1c <pmc_switch_mainck_to_fastrc+0x6c>)
  4029f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4029f8:	2b00      	cmp	r3, #0
  4029fa:	d0f9      	beq.n	4029f0 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4029fc:	4a07      	ldr	r2, [pc, #28]	; (402a1c <pmc_switch_mainck_to_fastrc+0x6c>)
  4029fe:	4b07      	ldr	r3, [pc, #28]	; (402a1c <pmc_switch_mainck_to_fastrc+0x6c>)
  402a00:	6a1b      	ldr	r3, [r3, #32]
  402a02:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  402a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  402a0a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402a0e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  402a10:	bf00      	nop
  402a12:	370c      	adds	r7, #12
  402a14:	46bd      	mov	sp, r7
  402a16:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a1a:	4770      	bx	lr
  402a1c:	400e0400 	.word	0x400e0400

00402a20 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  402a20:	b480      	push	{r7}
  402a22:	b083      	sub	sp, #12
  402a24:	af00      	add	r7, sp, #0
  402a26:	6078      	str	r0, [r7, #4]
  402a28:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  402a2a:	687b      	ldr	r3, [r7, #4]
  402a2c:	2b00      	cmp	r3, #0
  402a2e:	d008      	beq.n	402a42 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402a30:	4916      	ldr	r1, [pc, #88]	; (402a8c <pmc_switch_mainck_to_xtal+0x6c>)
  402a32:	4b16      	ldr	r3, [pc, #88]	; (402a8c <pmc_switch_mainck_to_xtal+0x6c>)
  402a34:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402a36:	4a16      	ldr	r2, [pc, #88]	; (402a90 <pmc_switch_mainck_to_xtal+0x70>)
  402a38:	401a      	ands	r2, r3
  402a3a:	4b16      	ldr	r3, [pc, #88]	; (402a94 <pmc_switch_mainck_to_xtal+0x74>)
  402a3c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402a3e:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  402a40:	e01e      	b.n	402a80 <pmc_switch_mainck_to_xtal+0x60>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402a42:	4912      	ldr	r1, [pc, #72]	; (402a8c <pmc_switch_mainck_to_xtal+0x6c>)
  402a44:	4b11      	ldr	r3, [pc, #68]	; (402a8c <pmc_switch_mainck_to_xtal+0x6c>)
  402a46:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402a48:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402a4c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402a50:	683a      	ldr	r2, [r7, #0]
  402a52:	0212      	lsls	r2, r2, #8
  402a54:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402a56:	4313      	orrs	r3, r2
  402a58:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402a5c:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402a60:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402a62:	bf00      	nop
  402a64:	4b09      	ldr	r3, [pc, #36]	; (402a8c <pmc_switch_mainck_to_xtal+0x6c>)
  402a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402a68:	f003 0301 	and.w	r3, r3, #1
  402a6c:	2b00      	cmp	r3, #0
  402a6e:	d0f9      	beq.n	402a64 <pmc_switch_mainck_to_xtal+0x44>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402a70:	4a06      	ldr	r2, [pc, #24]	; (402a8c <pmc_switch_mainck_to_xtal+0x6c>)
  402a72:	4b06      	ldr	r3, [pc, #24]	; (402a8c <pmc_switch_mainck_to_xtal+0x6c>)
  402a74:	6a1b      	ldr	r3, [r3, #32]
  402a76:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402a7e:	6213      	str	r3, [r2, #32]
}
  402a80:	bf00      	nop
  402a82:	370c      	adds	r7, #12
  402a84:	46bd      	mov	sp, r7
  402a86:	f85d 7b04 	ldr.w	r7, [sp], #4
  402a8a:	4770      	bx	lr
  402a8c:	400e0400 	.word	0x400e0400
  402a90:	fec8fffc 	.word	0xfec8fffc
  402a94:	01370002 	.word	0x01370002

00402a98 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402a98:	b480      	push	{r7}
  402a9a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402a9c:	4b04      	ldr	r3, [pc, #16]	; (402ab0 <pmc_osc_is_ready_mainck+0x18>)
  402a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402aa4:	4618      	mov	r0, r3
  402aa6:	46bd      	mov	sp, r7
  402aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
  402aac:	4770      	bx	lr
  402aae:	bf00      	nop
  402ab0:	400e0400 	.word	0x400e0400

00402ab4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  402ab4:	b480      	push	{r7}
  402ab6:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402ab8:	4b04      	ldr	r3, [pc, #16]	; (402acc <pmc_disable_pllack+0x18>)
  402aba:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  402abe:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  402ac0:	bf00      	nop
  402ac2:	46bd      	mov	sp, r7
  402ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ac8:	4770      	bx	lr
  402aca:	bf00      	nop
  402acc:	400e0400 	.word	0x400e0400

00402ad0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  402ad0:	b480      	push	{r7}
  402ad2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  402ad4:	4b04      	ldr	r3, [pc, #16]	; (402ae8 <pmc_is_locked_pllack+0x18>)
  402ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402ad8:	f003 0302 	and.w	r3, r3, #2
}
  402adc:	4618      	mov	r0, r3
  402ade:	46bd      	mov	sp, r7
  402ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
  402ae4:	4770      	bx	lr
  402ae6:	bf00      	nop
  402ae8:	400e0400 	.word	0x400e0400

00402aec <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  402aec:	b480      	push	{r7}
  402aee:	b083      	sub	sp, #12
  402af0:	af00      	add	r7, sp, #0
  402af2:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402af4:	687b      	ldr	r3, [r7, #4]
  402af6:	2b2f      	cmp	r3, #47	; 0x2f
  402af8:	d901      	bls.n	402afe <pmc_enable_periph_clk+0x12>
		return 1;
  402afa:	2301      	movs	r3, #1
  402afc:	e02f      	b.n	402b5e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  402afe:	687b      	ldr	r3, [r7, #4]
  402b00:	2b1f      	cmp	r3, #31
  402b02:	d813      	bhi.n	402b2c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  402b04:	4b19      	ldr	r3, [pc, #100]	; (402b6c <pmc_enable_periph_clk+0x80>)
  402b06:	699a      	ldr	r2, [r3, #24]
  402b08:	2101      	movs	r1, #1
  402b0a:	687b      	ldr	r3, [r7, #4]
  402b0c:	fa01 f303 	lsl.w	r3, r1, r3
  402b10:	401a      	ands	r2, r3
  402b12:	2101      	movs	r1, #1
  402b14:	687b      	ldr	r3, [r7, #4]
  402b16:	fa01 f303 	lsl.w	r3, r1, r3
  402b1a:	429a      	cmp	r2, r3
  402b1c:	d01e      	beq.n	402b5c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  402b1e:	4a13      	ldr	r2, [pc, #76]	; (402b6c <pmc_enable_periph_clk+0x80>)
  402b20:	2101      	movs	r1, #1
  402b22:	687b      	ldr	r3, [r7, #4]
  402b24:	fa01 f303 	lsl.w	r3, r1, r3
  402b28:	6113      	str	r3, [r2, #16]
  402b2a:	e017      	b.n	402b5c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402b2c:	687b      	ldr	r3, [r7, #4]
  402b2e:	3b20      	subs	r3, #32
  402b30:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  402b32:	4b0e      	ldr	r3, [pc, #56]	; (402b6c <pmc_enable_periph_clk+0x80>)
  402b34:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402b38:	2101      	movs	r1, #1
  402b3a:	687b      	ldr	r3, [r7, #4]
  402b3c:	fa01 f303 	lsl.w	r3, r1, r3
  402b40:	401a      	ands	r2, r3
  402b42:	2101      	movs	r1, #1
  402b44:	687b      	ldr	r3, [r7, #4]
  402b46:	fa01 f303 	lsl.w	r3, r1, r3
  402b4a:	429a      	cmp	r2, r3
  402b4c:	d006      	beq.n	402b5c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  402b4e:	4a07      	ldr	r2, [pc, #28]	; (402b6c <pmc_enable_periph_clk+0x80>)
  402b50:	2101      	movs	r1, #1
  402b52:	687b      	ldr	r3, [r7, #4]
  402b54:	fa01 f303 	lsl.w	r3, r1, r3
  402b58:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402b5c:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402b5e:	4618      	mov	r0, r3
  402b60:	370c      	adds	r7, #12
  402b62:	46bd      	mov	sp, r7
  402b64:	f85d 7b04 	ldr.w	r7, [sp], #4
  402b68:	4770      	bx	lr
  402b6a:	bf00      	nop
  402b6c:	400e0400 	.word	0x400e0400

00402b70 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
  402b70:	b480      	push	{r7}
  402b72:	b083      	sub	sp, #12
  402b74:	af00      	add	r7, sp, #0
  402b76:	6078      	str	r0, [r7, #4]
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  402b78:	687b      	ldr	r3, [r7, #4]
  402b7a:	2b2f      	cmp	r3, #47	; 0x2f
  402b7c:	d901      	bls.n	402b82 <pmc_disable_periph_clk+0x12>
		return 1;
  402b7e:	2301      	movs	r3, #1
  402b80:	e02f      	b.n	402be2 <pmc_disable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  402b82:	687b      	ldr	r3, [r7, #4]
  402b84:	2b1f      	cmp	r3, #31
  402b86:	d813      	bhi.n	402bb0 <pmc_disable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
  402b88:	4b19      	ldr	r3, [pc, #100]	; (402bf0 <pmc_disable_periph_clk+0x80>)
  402b8a:	699a      	ldr	r2, [r3, #24]
  402b8c:	2101      	movs	r1, #1
  402b8e:	687b      	ldr	r3, [r7, #4]
  402b90:	fa01 f303 	lsl.w	r3, r1, r3
  402b94:	401a      	ands	r2, r3
  402b96:	2101      	movs	r1, #1
  402b98:	687b      	ldr	r3, [r7, #4]
  402b9a:	fa01 f303 	lsl.w	r3, r1, r3
  402b9e:	429a      	cmp	r2, r3
  402ba0:	d11e      	bne.n	402be0 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR0 = 1 << ul_id;
  402ba2:	4a13      	ldr	r2, [pc, #76]	; (402bf0 <pmc_disable_periph_clk+0x80>)
  402ba4:	2101      	movs	r1, #1
  402ba6:	687b      	ldr	r3, [r7, #4]
  402ba8:	fa01 f303 	lsl.w	r3, r1, r3
  402bac:	6153      	str	r3, [r2, #20]
  402bae:	e017      	b.n	402be0 <pmc_disable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
		|| SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402bb0:	687b      	ldr	r3, [r7, #4]
  402bb2:	3b20      	subs	r3, #32
  402bb4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
  402bb6:	4b0e      	ldr	r3, [pc, #56]	; (402bf0 <pmc_disable_periph_clk+0x80>)
  402bb8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402bbc:	2101      	movs	r1, #1
  402bbe:	687b      	ldr	r3, [r7, #4]
  402bc0:	fa01 f303 	lsl.w	r3, r1, r3
  402bc4:	401a      	ands	r2, r3
  402bc6:	2101      	movs	r1, #1
  402bc8:	687b      	ldr	r3, [r7, #4]
  402bca:	fa01 f303 	lsl.w	r3, r1, r3
  402bce:	429a      	cmp	r2, r3
  402bd0:	d106      	bne.n	402be0 <pmc_disable_periph_clk+0x70>
			PMC->PMC_PCDR1 = 1 << ul_id;
  402bd2:	4a07      	ldr	r2, [pc, #28]	; (402bf0 <pmc_disable_periph_clk+0x80>)
  402bd4:	2101      	movs	r1, #1
  402bd6:	687b      	ldr	r3, [r7, #4]
  402bd8:	fa01 f303 	lsl.w	r3, r1, r3
  402bdc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		}
#endif
	}
	return 0;
  402be0:	2300      	movs	r3, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  402be2:	4618      	mov	r0, r3
  402be4:	370c      	adds	r7, #12
  402be6:	46bd      	mov	sp, r7
  402be8:	f85d 7b04 	ldr.w	r7, [sp], #4
  402bec:	4770      	bx	lr
  402bee:	bf00      	nop
  402bf0:	400e0400 	.word	0x400e0400

00402bf4 <pmc_switch_udpck_to_pllack>:
 * \brief Switch UDP (USB) clock source selection to PLLA clock.
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_pllack(uint32_t ul_usbdiv)
{
  402bf4:	b480      	push	{r7}
  402bf6:	b083      	sub	sp, #12
  402bf8:	af00      	add	r7, sp, #0
  402bfa:	6078      	str	r0, [r7, #4]
	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
  402bfc:	4a05      	ldr	r2, [pc, #20]	; (402c14 <pmc_switch_udpck_to_pllack+0x20>)
  402bfe:	687b      	ldr	r3, [r7, #4]
  402c00:	021b      	lsls	r3, r3, #8
  402c02:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
  402c06:	6393      	str	r3, [r2, #56]	; 0x38
}
  402c08:	bf00      	nop
  402c0a:	370c      	adds	r7, #12
  402c0c:	46bd      	mov	sp, r7
  402c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c12:	4770      	bx	lr
  402c14:	400e0400 	.word	0x400e0400

00402c18 <pmc_enable_udpck>:
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
/**
 * \brief Enable UDP (USB) clock.
 */
void pmc_enable_udpck(void)
{
  402c18:	b480      	push	{r7}
  402c1a:	af00      	add	r7, sp, #0
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
  402c1c:	4b03      	ldr	r3, [pc, #12]	; (402c2c <pmc_enable_udpck+0x14>)
  402c1e:	2280      	movs	r2, #128	; 0x80
  402c20:	601a      	str	r2, [r3, #0]
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
# endif
}
  402c22:	bf00      	nop
  402c24:	46bd      	mov	sp, r7
  402c26:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c2a:	4770      	bx	lr
  402c2c:	400e0400 	.word	0x400e0400

00402c30 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
  402c30:	b480      	push	{r7}
  402c32:	b083      	sub	sp, #12
  402c34:	af00      	add	r7, sp, #0
  402c36:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
  402c38:	687b      	ldr	r3, [r7, #4]
  402c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
  402c3e:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
  402c40:	4905      	ldr	r1, [pc, #20]	; (402c58 <pmc_set_fast_startup_input+0x28>)
  402c42:	4b05      	ldr	r3, [pc, #20]	; (402c58 <pmc_set_fast_startup_input+0x28>)
  402c44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  402c46:	687b      	ldr	r3, [r7, #4]
  402c48:	4313      	orrs	r3, r2
  402c4a:	670b      	str	r3, [r1, #112]	; 0x70
}
  402c4c:	bf00      	nop
  402c4e:	370c      	adds	r7, #12
  402c50:	46bd      	mov	sp, r7
  402c52:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c56:	4770      	bx	lr
  402c58:	400e0400 	.word	0x400e0400

00402c5c <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  402c5c:	b480      	push	{r7}
  402c5e:	b083      	sub	sp, #12
  402c60:	af00      	add	r7, sp, #0
  402c62:	6078      	str	r0, [r7, #4]
	ul_flash_in_wait_mode = ul_flash_state;
  402c64:	4a04      	ldr	r2, [pc, #16]	; (402c78 <pmc_set_flash_in_wait_mode+0x1c>)
  402c66:	687b      	ldr	r3, [r7, #4]
  402c68:	6013      	str	r3, [r2, #0]
}
  402c6a:	bf00      	nop
  402c6c:	370c      	adds	r7, #12
  402c6e:	46bd      	mov	sp, r7
  402c70:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c74:	4770      	bx	lr
  402c76:	bf00      	nop
  402c78:	200000c4 	.word	0x200000c4

00402c7c <pmc_enable_waitmode>:
 * Generally, this function will be called by pmc_sleep() in order to
 * complete all sequence entering wait mode.
 * See \ref pmc_sleep() for entering different sleep modes.
 */
void pmc_enable_waitmode(void)
{
  402c7c:	b480      	push	{r7}
  402c7e:	b083      	sub	sp, #12
  402c80:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  402c82:	4b22      	ldr	r3, [pc, #136]	; (402d0c <pmc_enable_waitmode+0x90>)
  402c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402c86:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  402c88:	687b      	ldr	r3, [r7, #4]
  402c8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  402c8e:	607b      	str	r3, [r7, #4]
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
  402c90:	4b1f      	ldr	r3, [pc, #124]	; (402d10 <pmc_enable_waitmode+0x94>)
  402c92:	681b      	ldr	r3, [r3, #0]
  402c94:	687a      	ldr	r2, [r7, #4]
  402c96:	4313      	orrs	r3, r2
  402c98:	607b      	str	r3, [r7, #4]
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
#endif
	PMC->PMC_FSMR = i;
  402c9a:	4a1c      	ldr	r2, [pc, #112]	; (402d0c <pmc_enable_waitmode+0x90>)
  402c9c:	687b      	ldr	r3, [r7, #4]
  402c9e:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  402ca0:	4a1a      	ldr	r2, [pc, #104]	; (402d0c <pmc_enable_waitmode+0x90>)
  402ca2:	4b1a      	ldr	r3, [pc, #104]	; (402d0c <pmc_enable_waitmode+0x90>)
  402ca4:	6a1b      	ldr	r3, [r3, #32]
  402ca6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402caa:	f043 0304 	orr.w	r3, r3, #4
  402cae:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402cb0:	bf00      	nop
  402cb2:	4b16      	ldr	r3, [pc, #88]	; (402d0c <pmc_enable_waitmode+0x90>)
  402cb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402cb6:	f003 0308 	and.w	r3, r3, #8
  402cba:	2b00      	cmp	r3, #0
  402cbc:	d0f9      	beq.n	402cb2 <pmc_enable_waitmode+0x36>

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  402cbe:	2300      	movs	r3, #0
  402cc0:	607b      	str	r3, [r7, #4]
  402cc2:	e003      	b.n	402ccc <pmc_enable_waitmode+0x50>
		__NOP();
  402cc4:	bf00      	nop
	for (i = 0; i < 500; i++) {
  402cc6:	687b      	ldr	r3, [r7, #4]
  402cc8:	3301      	adds	r3, #1
  402cca:	607b      	str	r3, [r7, #4]
  402ccc:	687b      	ldr	r3, [r7, #4]
  402cce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
  402cd2:	d3f7      	bcc.n	402cc4 <pmc_enable_waitmode+0x48>
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  402cd4:	bf00      	nop
  402cd6:	4b0d      	ldr	r3, [pc, #52]	; (402d0c <pmc_enable_waitmode+0x90>)
  402cd8:	6a1b      	ldr	r3, [r3, #32]
  402cda:	f003 0308 	and.w	r3, r3, #8
  402cde:	2b00      	cmp	r3, #0
  402ce0:	d0f9      	beq.n	402cd6 <pmc_enable_waitmode+0x5a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  402ce2:	4b0a      	ldr	r3, [pc, #40]	; (402d0c <pmc_enable_waitmode+0x90>)
  402ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  402ce6:	607b      	str	r3, [r7, #4]
	i &= ~PMC_FSMR_FLPM_Msk;
  402ce8:	687b      	ldr	r3, [r7, #4]
  402cea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
  402cee:	607b      	str	r3, [r7, #4]
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  402cf0:	687b      	ldr	r3, [r7, #4]
  402cf2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  402cf6:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR = i;
  402cf8:	4a04      	ldr	r2, [pc, #16]	; (402d0c <pmc_enable_waitmode+0x90>)
  402cfa:	687b      	ldr	r3, [r7, #4]
  402cfc:	6713      	str	r3, [r2, #112]	; 0x70
#endif
}
  402cfe:	bf00      	nop
  402d00:	370c      	adds	r7, #12
  402d02:	46bd      	mov	sp, r7
  402d04:	f85d 7b04 	ldr.w	r7, [sp], #4
  402d08:	4770      	bx	lr
  402d0a:	bf00      	nop
  402d0c:	400e0400 	.word	0x400e0400
  402d10:	200000c4 	.word	0x200000c4

00402d14 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  402d14:	b590      	push	{r4, r7, lr}
  402d16:	b099      	sub	sp, #100	; 0x64
  402d18:	af00      	add	r7, sp, #0
  402d1a:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
  402d1c:	687b      	ldr	r3, [r7, #4]
  402d1e:	3b01      	subs	r3, #1
  402d20:	2b04      	cmp	r3, #4
  402d22:	f200 81ad 	bhi.w	403080 <pmc_sleep+0x36c>
  402d26:	a201      	add	r2, pc, #4	; (adr r2, 402d2c <pmc_sleep+0x18>)
  402d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402d2c:	00402d41 	.word	0x00402d41
  402d30:	00402d41 	.word	0x00402d41
  402d34:	00402d61 	.word	0x00402d61
  402d38:	00402d61 	.word	0x00402d61
  402d3c:	0040305f 	.word	0x0040305f
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  402d40:	4a76      	ldr	r2, [pc, #472]	; (402f1c <pmc_sleep+0x208>)
  402d42:	4b76      	ldr	r3, [pc, #472]	; (402f1c <pmc_sleep+0x208>)
  402d44:	691b      	ldr	r3, [r3, #16]
  402d46:	f023 0304 	bic.w	r3, r3, #4
  402d4a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  402d4c:	4b74      	ldr	r3, [pc, #464]	; (402f20 <pmc_sleep+0x20c>)
  402d4e:	2201      	movs	r2, #1
  402d50:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  402d52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402d56:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
  402d58:	f3bf 8f4f 	dsb	sy
		__DSB();
		__WFI();
  402d5c:	bf30      	wfi
		break;
  402d5e:	e18f      	b.n	403080 <pmc_sleep+0x36c>
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  402d60:	687b      	ldr	r3, [r7, #4]
  402d62:	2b03      	cmp	r3, #3
  402d64:	d103      	bne.n	402d6e <pmc_sleep+0x5a>
  402d66:	2000      	movs	r0, #0
  402d68:	4b6e      	ldr	r3, [pc, #440]	; (402f24 <pmc_sleep+0x210>)
  402d6a:	4798      	blx	r3
  402d6c:	e003      	b.n	402d76 <pmc_sleep+0x62>
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  402d6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  402d72:	4b6c      	ldr	r3, [pc, #432]	; (402f24 <pmc_sleep+0x210>)
  402d74:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  402d76:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402d78:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  402d7c:	4b68      	ldr	r3, [pc, #416]	; (402f20 <pmc_sleep+0x20c>)
  402d7e:	2200      	movs	r2, #0
  402d80:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  402d82:	4b69      	ldr	r3, [pc, #420]	; (402f28 <pmc_sleep+0x214>)
  402d84:	2201      	movs	r2, #1
  402d86:	701a      	strb	r2, [r3, #0]
		/* Backup the sub-system 1 status and stop sub-system 1 */
		uint32_t cpclk_backup = PMC->PMC_SCSR &
				(PMC_SCSR_CPCK | PMC_SCSR_CPBMCK);
		PMC->PMC_SCDR = cpclk_backup | PMC_SCDR_CPKEY_PASSWD;
#endif
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
  402d88:	687b      	ldr	r3, [r7, #4]
  402d8a:	2b04      	cmp	r3, #4
  402d8c:	bf0c      	ite	eq
  402d8e:	2301      	moveq	r3, #1
  402d90:	2300      	movne	r3, #0
  402d92:	b2da      	uxtb	r2, r3
  402d94:	f107 031c 	add.w	r3, r7, #28
  402d98:	643b      	str	r3, [r7, #64]	; 0x40
  402d9a:	f107 0318 	add.w	r3, r7, #24
  402d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  402da0:	f107 0314 	add.w	r3, r7, #20
  402da4:	63bb      	str	r3, [r7, #56]	; 0x38
  402da6:	f107 0310 	add.w	r3, r7, #16
  402daa:	637b      	str	r3, [r7, #52]	; 0x34
  402dac:	f107 030c 	add.w	r3, r7, #12
  402db0:	633b      	str	r3, [r7, #48]	; 0x30
  402db2:	4613      	mov	r3, r2
  402db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t mor  = PMC->CKGR_MOR;
  402db8:	4b5c      	ldr	r3, [pc, #368]	; (402f2c <pmc_sleep+0x218>)
  402dba:	6a1b      	ldr	r3, [r3, #32]
  402dbc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t mckr = PMC->PMC_MCKR;
  402dbe:	4b5b      	ldr	r3, [pc, #364]	; (402f2c <pmc_sleep+0x218>)
  402dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402dc2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fmr  = EFC0->EEFC_FMR;
  402dc4:	4b5a      	ldr	r3, [pc, #360]	; (402f30 <pmc_sleep+0x21c>)
  402dc6:	681b      	ldr	r3, [r3, #0]
  402dc8:	623b      	str	r3, [r7, #32]
	if (p_osc_setting) {
  402dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  402dcc:	2b00      	cmp	r3, #0
  402dce:	d002      	beq.n	402dd6 <pmc_sleep+0xc2>
		*p_osc_setting = mor;
  402dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
  402dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
  402dd4:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
  402dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402dd8:	2b00      	cmp	r3, #0
  402dda:	d003      	beq.n	402de4 <pmc_sleep+0xd0>
		*p_pll0_setting = PMC->CKGR_PLLAR;
  402ddc:	4b53      	ldr	r3, [pc, #332]	; (402f2c <pmc_sleep+0x218>)
  402dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  402de2:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
  402de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  402de6:	2b00      	cmp	r3, #0
  402de8:	d002      	beq.n	402df0 <pmc_sleep+0xdc>
		*p_pll1_setting = 0;
  402dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  402dec:	2200      	movs	r2, #0
  402dee:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
  402df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402df2:	2b00      	cmp	r3, #0
  402df4:	d002      	beq.n	402dfc <pmc_sleep+0xe8>
		*p_mck_setting  = mckr;
  402df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  402df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  402dfa:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
  402dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402dfe:	2b00      	cmp	r3, #0
  402e00:	d002      	beq.n	402e08 <pmc_sleep+0xf4>
		*p_fmr_setting  = fmr;
  402e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  402e04:	6a3a      	ldr	r2, [r7, #32]
  402e06:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  402e08:	4a48      	ldr	r2, [pc, #288]	; (402f2c <pmc_sleep+0x218>)
  402e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  402e0c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402e10:	f043 0308 	orr.w	r3, r3, #8
  402e14:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  402e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e18:	f003 0303 	and.w	r3, r3, #3
  402e1c:	2b01      	cmp	r3, #1
  402e1e:	d90e      	bls.n	402e3e <pmc_sleep+0x12a>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  402e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e22:	f023 0303 	bic.w	r3, r3, #3
  402e26:	f043 0301 	orr.w	r3, r3, #1
  402e2a:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  402e2c:	4a3f      	ldr	r2, [pc, #252]	; (402f2c <pmc_sleep+0x218>)
  402e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e30:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402e32:	4b3e      	ldr	r3, [pc, #248]	; (402f2c <pmc_sleep+0x218>)
  402e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402e36:	f003 0308 	and.w	r3, r3, #8
  402e3a:	2b00      	cmp	r3, #0
  402e3c:	d0f9      	beq.n	402e32 <pmc_sleep+0x11e>
	if (mckr & PMC_MCKR_PRES_Msk) {
  402e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402e44:	2b00      	cmp	r3, #0
  402e46:	d00c      	beq.n	402e62 <pmc_sleep+0x14e>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  402e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  402e4e:	627b      	str	r3, [r7, #36]	; 0x24
		PMC->PMC_MCKR = mckr;
  402e50:	4a36      	ldr	r2, [pc, #216]	; (402f2c <pmc_sleep+0x218>)
  402e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402e54:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  402e56:	4b35      	ldr	r3, [pc, #212]	; (402f2c <pmc_sleep+0x218>)
  402e58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402e5a:	f003 0308 	and.w	r3, r3, #8
  402e5e:	2b00      	cmp	r3, #0
  402e60:	d0f9      	beq.n	402e56 <pmc_sleep+0x142>
	pmc_disable_pllack();
  402e62:	4b34      	ldr	r3, [pc, #208]	; (402f34 <pmc_sleep+0x220>)
  402e64:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402e66:	4b31      	ldr	r3, [pc, #196]	; (402f2c <pmc_sleep+0x218>)
  402e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  402e6e:	2b00      	cmp	r3, #0
  402e70:	d0f9      	beq.n	402e66 <pmc_sleep+0x152>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  402e72:	4a2e      	ldr	r2, [pc, #184]	; (402f2c <pmc_sleep+0x218>)
  402e74:	4b2d      	ldr	r3, [pc, #180]	; (402f2c <pmc_sleep+0x218>)
  402e76:	6a1b      	ldr	r3, [r3, #32]
  402e78:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  402e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  402e80:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402e84:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  402e86:	4b29      	ldr	r3, [pc, #164]	; (402f2c <pmc_sleep+0x218>)
  402e88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402e8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  402e8e:	2b00      	cmp	r3, #0
  402e90:	d0f9      	beq.n	402e86 <pmc_sleep+0x172>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  402e92:	4a27      	ldr	r2, [pc, #156]	; (402f30 <pmc_sleep+0x21c>)
  402e94:	6a3b      	ldr	r3, [r7, #32]
  402e96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
  402e9a:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  402e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
  402ea0:	2b00      	cmp	r3, #0
  402ea2:	d009      	beq.n	402eb8 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402ea4:	4a21      	ldr	r2, [pc, #132]	; (402f2c <pmc_sleep+0x218>)
  402ea6:	4b21      	ldr	r3, [pc, #132]	; (402f2c <pmc_sleep+0x218>)
  402ea8:	6a1b      	ldr	r3, [r3, #32]
  402eaa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402eae:	f023 0301 	bic.w	r3, r3, #1
  402eb2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402eb6:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  402eb8:	4b19      	ldr	r3, [pc, #100]	; (402f20 <pmc_sleep+0x20c>)
  402eba:	2201      	movs	r2, #1
  402ebc:	701a      	strb	r2, [r3, #0]
  402ebe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  402ec2:	b662      	cpsie	i

		pmc_enable_waitmode();
  402ec4:	4b1c      	ldr	r3, [pc, #112]	; (402f38 <pmc_sleep+0x224>)
  402ec6:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  402ec8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  402eca:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  402ece:	4b14      	ldr	r3, [pc, #80]	; (402f20 <pmc_sleep+0x20c>)
  402ed0:	2200      	movs	r2, #0
  402ed2:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
  402ed4:	69fc      	ldr	r4, [r7, #28]
  402ed6:	69b8      	ldr	r0, [r7, #24]
  402ed8:	6979      	ldr	r1, [r7, #20]
  402eda:	693a      	ldr	r2, [r7, #16]
  402edc:	68fb      	ldr	r3, [r7, #12]
  402ede:	65fc      	str	r4, [r7, #92]	; 0x5c
  402ee0:	65b8      	str	r0, [r7, #88]	; 0x58
  402ee2:	6579      	str	r1, [r7, #84]	; 0x54
  402ee4:	653a      	str	r2, [r7, #80]	; 0x50
  402ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t pll_sr = 0;
  402ee8:	2300      	movs	r3, #0
  402eea:	64bb      	str	r3, [r7, #72]	; 0x48
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  402eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  402eee:	f003 0302 	and.w	r3, r3, #2
  402ef2:	2b00      	cmp	r3, #0
  402ef4:	d026      	beq.n	402f44 <pmc_sleep+0x230>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402ef6:	490d      	ldr	r1, [pc, #52]	; (402f2c <pmc_sleep+0x218>)
  402ef8:	4b0c      	ldr	r3, [pc, #48]	; (402f2c <pmc_sleep+0x218>)
  402efa:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402efc:	4a0f      	ldr	r2, [pc, #60]	; (402f3c <pmc_sleep+0x228>)
  402efe:	401a      	ands	r2, r3
  402f00:	4b0f      	ldr	r3, [pc, #60]	; (402f40 <pmc_sleep+0x22c>)
  402f02:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  402f04:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402f06:	4a09      	ldr	r2, [pc, #36]	; (402f2c <pmc_sleep+0x218>)
  402f08:	4b08      	ldr	r3, [pc, #32]	; (402f2c <pmc_sleep+0x218>)
  402f0a:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
  402f0c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402f10:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  402f14:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402f18:	6213      	str	r3, [r2, #32]
  402f1a:	e04e      	b.n	402fba <pmc_sleep+0x2a6>
  402f1c:	e000ed00 	.word	0xe000ed00
  402f20:	200000c2 	.word	0x200000c2
  402f24:	00402c5d 	.word	0x00402c5d
  402f28:	2000660c 	.word	0x2000660c
  402f2c:	400e0400 	.word	0x400e0400
  402f30:	400e0a00 	.word	0x400e0a00
  402f34:	00402ab5 	.word	0x00402ab5
  402f38:	00402c7d 	.word	0x00402c7d
  402f3c:	fec8fffc 	.word	0xfec8fffc
  402f40:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  402f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
  402f46:	f003 0301 	and.w	r3, r3, #1
  402f4a:	2b00      	cmp	r3, #0
  402f4c:	d035      	beq.n	402fba <pmc_sleep+0x2a6>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  402f4e:	4b4e      	ldr	r3, [pc, #312]	; (403088 <pmc_sleep+0x374>)
  402f50:	6a1b      	ldr	r3, [r3, #32]
  402f52:	f003 0301 	and.w	r3, r3, #1
  402f56:	2b00      	cmp	r3, #0
  402f58:	d111      	bne.n	402f7e <pmc_sleep+0x26a>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402f5a:	4a4b      	ldr	r2, [pc, #300]	; (403088 <pmc_sleep+0x374>)
  402f5c:	4b4a      	ldr	r3, [pc, #296]	; (403088 <pmc_sleep+0x374>)
  402f5e:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  402f60:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402f64:	f023 0303 	bic.w	r3, r3, #3
  402f68:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  402f6c:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402f70:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402f72:	4b45      	ldr	r3, [pc, #276]	; (403088 <pmc_sleep+0x374>)
  402f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402f76:	f003 0301 	and.w	r3, r3, #1
  402f7a:	2b00      	cmp	r3, #0
  402f7c:	d0f9      	beq.n	402f72 <pmc_sleep+0x25e>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  402f7e:	4b42      	ldr	r3, [pc, #264]	; (403088 <pmc_sleep+0x374>)
  402f80:	6a1b      	ldr	r3, [r3, #32]
  402f82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  402f86:	2b00      	cmp	r3, #0
  402f88:	d10d      	bne.n	402fa6 <pmc_sleep+0x292>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402f8a:	4a3f      	ldr	r2, [pc, #252]	; (403088 <pmc_sleep+0x374>)
  402f8c:	4b3e      	ldr	r3, [pc, #248]	; (403088 <pmc_sleep+0x374>)
  402f8e:	6a1b      	ldr	r3, [r3, #32]
  402f90:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  402f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  402f98:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  402f9a:	4b3b      	ldr	r3, [pc, #236]	; (403088 <pmc_sleep+0x374>)
  402f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  402fa2:	2b00      	cmp	r3, #0
  402fa4:	d0f9      	beq.n	402f9a <pmc_sleep+0x286>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402fa6:	4a38      	ldr	r2, [pc, #224]	; (403088 <pmc_sleep+0x374>)
  402fa8:	4b37      	ldr	r3, [pc, #220]	; (403088 <pmc_sleep+0x374>)
  402faa:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
  402fac:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  402fb0:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  402fb4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  402fb8:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  402fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
  402fbc:	4b33      	ldr	r3, [pc, #204]	; (40308c <pmc_sleep+0x378>)
  402fbe:	4013      	ands	r3, r2
  402fc0:	2b00      	cmp	r3, #0
  402fc2:	d008      	beq.n	402fd6 <pmc_sleep+0x2c2>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  402fc4:	4a30      	ldr	r2, [pc, #192]	; (403088 <pmc_sleep+0x374>)
  402fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  402fc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  402fcc:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  402fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  402fd0:	f043 0302 	orr.w	r3, r3, #2
  402fd4:	64bb      	str	r3, [r7, #72]	; 0x48
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  402fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  402fd8:	f003 0303 	and.w	r3, r3, #3
  402fdc:	2b02      	cmp	r3, #2
  402fde:	d105      	bne.n	402fec <pmc_sleep+0x2d8>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  402fe0:	4b29      	ldr	r3, [pc, #164]	; (403088 <pmc_sleep+0x374>)
  402fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402fe4:	f003 0302 	and.w	r3, r3, #2
  402fe8:	2b00      	cmp	r3, #0
  402fea:	d0f9      	beq.n	402fe0 <pmc_sleep+0x2cc>
	mckr = PMC->PMC_MCKR;
  402fec:	4b26      	ldr	r3, [pc, #152]	; (403088 <pmc_sleep+0x374>)
  402fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402ff0:	647b      	str	r3, [r7, #68]	; 0x44
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  402ff2:	4925      	ldr	r1, [pc, #148]	; (403088 <pmc_sleep+0x374>)
  402ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
  402ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  402ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  402ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  403000:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  403002:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  403004:	4b20      	ldr	r3, [pc, #128]	; (403088 <pmc_sleep+0x374>)
  403006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403008:	f003 0308 	and.w	r3, r3, #8
  40300c:	2b00      	cmp	r3, #0
  40300e:	d0f9      	beq.n	403004 <pmc_sleep+0x2f0>
	EFC0->EEFC_FMR = fmr_setting;
  403010:	4a1f      	ldr	r2, [pc, #124]	; (403090 <pmc_sleep+0x37c>)
  403012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  403014:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
  403016:	4a1c      	ldr	r2, [pc, #112]	; (403088 <pmc_sleep+0x374>)
  403018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
  40301a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40301c:	4b1a      	ldr	r3, [pc, #104]	; (403088 <pmc_sleep+0x374>)
  40301e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  403020:	f003 0308 	and.w	r3, r3, #8
  403024:	2b00      	cmp	r3, #0
  403026:	d0f9      	beq.n	40301c <pmc_sleep+0x308>
	while (!(PMC->PMC_SR & pll_sr));
  403028:	4b17      	ldr	r3, [pc, #92]	; (403088 <pmc_sleep+0x374>)
  40302a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  40302c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  40302e:	4013      	ands	r3, r2
  403030:	2b00      	cmp	r3, #0
  403032:	d0f9      	beq.n	403028 <pmc_sleep+0x314>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  403034:	4b17      	ldr	r3, [pc, #92]	; (403094 <pmc_sleep+0x380>)
  403036:	2200      	movs	r2, #0
  403038:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  40303a:	4b17      	ldr	r3, [pc, #92]	; (403098 <pmc_sleep+0x384>)
  40303c:	681b      	ldr	r3, [r3, #0]
  40303e:	2b00      	cmp	r3, #0
  403040:	d005      	beq.n	40304e <pmc_sleep+0x33a>
			callback_clocks_restored();
  403042:	4b15      	ldr	r3, [pc, #84]	; (403098 <pmc_sleep+0x384>)
  403044:	681b      	ldr	r3, [r3, #0]
  403046:	4798      	blx	r3
			callback_clocks_restored = NULL;
  403048:	4b13      	ldr	r3, [pc, #76]	; (403098 <pmc_sleep+0x384>)
  40304a:	2200      	movs	r2, #0
  40304c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  40304e:	4b13      	ldr	r3, [pc, #76]	; (40309c <pmc_sleep+0x388>)
  403050:	2201      	movs	r2, #1
  403052:	701a      	strb	r2, [r3, #0]
  403054:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  403058:	b662      	cpsie	i

		break;
  40305a:	bf00      	nop
  40305c:	e010      	b.n	403080 <pmc_sleep+0x36c>
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40305e:	4a10      	ldr	r2, [pc, #64]	; (4030a0 <pmc_sleep+0x38c>)
  403060:	4b0f      	ldr	r3, [pc, #60]	; (4030a0 <pmc_sleep+0x38c>)
  403062:	691b      	ldr	r3, [r3, #16]
  403064:	f043 0304 	orr.w	r3, r3, #4
  403068:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  40306a:	4b0e      	ldr	r3, [pc, #56]	; (4030a4 <pmc_sleep+0x390>)
  40306c:	4a0e      	ldr	r2, [pc, #56]	; (4030a8 <pmc_sleep+0x394>)
  40306e:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  403070:	4b0a      	ldr	r3, [pc, #40]	; (40309c <pmc_sleep+0x388>)
  403072:	2201      	movs	r2, #1
  403074:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  403076:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40307a:	b662      	cpsie	i
		__WFI() ;
  40307c:	bf30      	wfi
#else
		cpu_irq_enable();
		__WFE() ;
#endif
		break;
  40307e:	bf00      	nop
#endif
	}
}
  403080:	bf00      	nop
  403082:	3764      	adds	r7, #100	; 0x64
  403084:	46bd      	mov	sp, r7
  403086:	bd90      	pop	{r4, r7, pc}
  403088:	400e0400 	.word	0x400e0400
  40308c:	07ff0000 	.word	0x07ff0000
  403090:	400e0a00 	.word	0x400e0a00
  403094:	2000660c 	.word	0x2000660c
  403098:	20006610 	.word	0x20006610
  40309c:	200000c2 	.word	0x200000c2
  4030a0:	e000ed00 	.word	0xe000ed00
  4030a4:	400e1810 	.word	0x400e1810
  4030a8:	a5000004 	.word	0xa5000004

004030ac <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
  4030ac:	b480      	push	{r7}
  4030ae:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
  4030b0:	4b09      	ldr	r3, [pc, #36]	; (4030d8 <pmc_is_wakeup_clocks_restored+0x2c>)
  4030b2:	781b      	ldrb	r3, [r3, #0]
  4030b4:	b2db      	uxtb	r3, r3
  4030b6:	2b00      	cmp	r3, #0
  4030b8:	bf14      	ite	ne
  4030ba:	2301      	movne	r3, #1
  4030bc:	2300      	moveq	r3, #0
  4030be:	b2db      	uxtb	r3, r3
  4030c0:	f083 0301 	eor.w	r3, r3, #1
  4030c4:	b2db      	uxtb	r3, r3
  4030c6:	f003 0301 	and.w	r3, r3, #1
  4030ca:	b2db      	uxtb	r3, r3
}
  4030cc:	4618      	mov	r0, r3
  4030ce:	46bd      	mov	sp, r7
  4030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4030d4:	4770      	bx	lr
  4030d6:	bf00      	nop
  4030d8:	2000660c 	.word	0x2000660c

004030dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  4030dc:	b480      	push	{r7}
  4030de:	b083      	sub	sp, #12
  4030e0:	af00      	add	r7, sp, #0
  4030e2:	4603      	mov	r3, r0
  4030e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  4030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4030ea:	2b00      	cmp	r3, #0
  4030ec:	db0b      	blt.n	403106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4030ee:	4909      	ldr	r1, [pc, #36]	; (403114 <__NVIC_EnableIRQ+0x38>)
  4030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4030f4:	095b      	lsrs	r3, r3, #5
  4030f6:	79fa      	ldrb	r2, [r7, #7]
  4030f8:	f002 021f 	and.w	r2, r2, #31
  4030fc:	2001      	movs	r0, #1
  4030fe:	fa00 f202 	lsl.w	r2, r0, r2
  403102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
  403106:	bf00      	nop
  403108:	370c      	adds	r7, #12
  40310a:	46bd      	mov	sp, r7
  40310c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403110:	4770      	bx	lr
  403112:	bf00      	nop
  403114:	e000e100 	.word	0xe000e100

00403118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  403118:	b480      	push	{r7}
  40311a:	b083      	sub	sp, #12
  40311c:	af00      	add	r7, sp, #0
  40311e:	4603      	mov	r3, r0
  403120:	6039      	str	r1, [r7, #0]
  403122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
  403124:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403128:	2b00      	cmp	r3, #0
  40312a:	db0a      	blt.n	403142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40312c:	490d      	ldr	r1, [pc, #52]	; (403164 <__NVIC_SetPriority+0x4c>)
  40312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  403132:	683a      	ldr	r2, [r7, #0]
  403134:	b2d2      	uxtb	r2, r2
  403136:	0112      	lsls	r2, r2, #4
  403138:	b2d2      	uxtb	r2, r2
  40313a:	440b      	add	r3, r1
  40313c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
  403140:	e00a      	b.n	403158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403142:	4909      	ldr	r1, [pc, #36]	; (403168 <__NVIC_SetPriority+0x50>)
  403144:	79fb      	ldrb	r3, [r7, #7]
  403146:	f003 030f 	and.w	r3, r3, #15
  40314a:	3b04      	subs	r3, #4
  40314c:	683a      	ldr	r2, [r7, #0]
  40314e:	b2d2      	uxtb	r2, r2
  403150:	0112      	lsls	r2, r2, #4
  403152:	b2d2      	uxtb	r2, r2
  403154:	440b      	add	r3, r1
  403156:	761a      	strb	r2, [r3, #24]
}
  403158:	bf00      	nop
  40315a:	370c      	adds	r7, #12
  40315c:	46bd      	mov	sp, r7
  40315e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403162:	4770      	bx	lr
  403164:	e000e100 	.word	0xe000e100
  403168:	e000ed00 	.word	0xe000ed00

0040316c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  40316c:	b480      	push	{r7}
  40316e:	b083      	sub	sp, #12
  403170:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  403172:	f3ef 8310 	mrs	r3, PRIMASK
  403176:	607b      	str	r3, [r7, #4]
  return(result);
  403178:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40317a:	2b00      	cmp	r3, #0
  40317c:	bf0c      	ite	eq
  40317e:	2301      	moveq	r3, #1
  403180:	2300      	movne	r3, #0
  403182:	b2db      	uxtb	r3, r3
  403184:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  403186:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  403188:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40318c:	4b04      	ldr	r3, [pc, #16]	; (4031a0 <cpu_irq_save+0x34>)
  40318e:	2200      	movs	r2, #0
  403190:	701a      	strb	r2, [r3, #0]
	return flags;
  403192:	683b      	ldr	r3, [r7, #0]
}
  403194:	4618      	mov	r0, r3
  403196:	370c      	adds	r7, #12
  403198:	46bd      	mov	sp, r7
  40319a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40319e:	4770      	bx	lr
  4031a0:	200000c2 	.word	0x200000c2

004031a4 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  4031a4:	b480      	push	{r7}
  4031a6:	b083      	sub	sp, #12
  4031a8:	af00      	add	r7, sp, #0
  4031aa:	6078      	str	r0, [r7, #4]
	return (flags);
  4031ac:	687b      	ldr	r3, [r7, #4]
  4031ae:	2b00      	cmp	r3, #0
  4031b0:	bf14      	ite	ne
  4031b2:	2301      	movne	r3, #1
  4031b4:	2300      	moveq	r3, #0
  4031b6:	b2db      	uxtb	r3, r3
}
  4031b8:	4618      	mov	r0, r3
  4031ba:	370c      	adds	r7, #12
  4031bc:	46bd      	mov	sp, r7
  4031be:	f85d 7b04 	ldr.w	r7, [sp], #4
  4031c2:	4770      	bx	lr

004031c4 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4031c4:	b580      	push	{r7, lr}
  4031c6:	b082      	sub	sp, #8
  4031c8:	af00      	add	r7, sp, #0
  4031ca:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4031cc:	6878      	ldr	r0, [r7, #4]
  4031ce:	4b07      	ldr	r3, [pc, #28]	; (4031ec <cpu_irq_restore+0x28>)
  4031d0:	4798      	blx	r3
  4031d2:	4603      	mov	r3, r0
  4031d4:	2b00      	cmp	r3, #0
  4031d6:	d005      	beq.n	4031e4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4031d8:	4b05      	ldr	r3, [pc, #20]	; (4031f0 <cpu_irq_restore+0x2c>)
  4031da:	2201      	movs	r2, #1
  4031dc:	701a      	strb	r2, [r3, #0]
  4031de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4031e2:	b662      	cpsie	i
}
  4031e4:	bf00      	nop
  4031e6:	3708      	adds	r7, #8
  4031e8:	46bd      	mov	sp, r7
  4031ea:	bd80      	pop	{r7, pc}
  4031ec:	004031a5 	.word	0x004031a5
  4031f0:	200000c2 	.word	0x200000c2

004031f4 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
  4031f4:	b580      	push	{r7, lr}
  4031f6:	b084      	sub	sp, #16
  4031f8:	af00      	add	r7, sp, #0
  4031fa:	4603      	mov	r3, r0
  4031fc:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4031fe:	79fb      	ldrb	r3, [r7, #7]
  403200:	4a0a      	ldr	r2, [pc, #40]	; (40322c <sleepmgr_lock_mode+0x38>)
  403202:	5cd3      	ldrb	r3, [r2, r3]
  403204:	2bff      	cmp	r3, #255	; 0xff
  403206:	d100      	bne.n	40320a <sleepmgr_lock_mode+0x16>
		while (true) {
  403208:	e7fe      	b.n	403208 <sleepmgr_lock_mode+0x14>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  40320a:	4b09      	ldr	r3, [pc, #36]	; (403230 <sleepmgr_lock_mode+0x3c>)
  40320c:	4798      	blx	r3
  40320e:	60f8      	str	r0, [r7, #12]

	++sleepmgr_locks[mode];
  403210:	79fb      	ldrb	r3, [r7, #7]
  403212:	4a06      	ldr	r2, [pc, #24]	; (40322c <sleepmgr_lock_mode+0x38>)
  403214:	5cd2      	ldrb	r2, [r2, r3]
  403216:	3201      	adds	r2, #1
  403218:	b2d1      	uxtb	r1, r2
  40321a:	4a04      	ldr	r2, [pc, #16]	; (40322c <sleepmgr_lock_mode+0x38>)
  40321c:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  40321e:	68f8      	ldr	r0, [r7, #12]
  403220:	4b04      	ldr	r3, [pc, #16]	; (403234 <sleepmgr_lock_mode+0x40>)
  403222:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  403224:	bf00      	nop
  403226:	3710      	adds	r7, #16
  403228:	46bd      	mov	sp, r7
  40322a:	bd80      	pop	{r7, pc}
  40322c:	2000a73c 	.word	0x2000a73c
  403230:	0040316d 	.word	0x0040316d
  403234:	004031c5 	.word	0x004031c5

00403238 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
  403238:	b580      	push	{r7, lr}
  40323a:	b084      	sub	sp, #16
  40323c:	af00      	add	r7, sp, #0
  40323e:	4603      	mov	r3, r0
  403240:	71fb      	strb	r3, [r7, #7]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
  403242:	79fb      	ldrb	r3, [r7, #7]
  403244:	4a0a      	ldr	r2, [pc, #40]	; (403270 <sleepmgr_unlock_mode+0x38>)
  403246:	5cd3      	ldrb	r3, [r2, r3]
  403248:	2b00      	cmp	r3, #0
  40324a:	d100      	bne.n	40324e <sleepmgr_unlock_mode+0x16>
		while (true) {
  40324c:	e7fe      	b.n	40324c <sleepmgr_unlock_mode+0x14>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
  40324e:	4b09      	ldr	r3, [pc, #36]	; (403274 <sleepmgr_unlock_mode+0x3c>)
  403250:	4798      	blx	r3
  403252:	60f8      	str	r0, [r7, #12]

	--sleepmgr_locks[mode];
  403254:	79fb      	ldrb	r3, [r7, #7]
  403256:	4a06      	ldr	r2, [pc, #24]	; (403270 <sleepmgr_unlock_mode+0x38>)
  403258:	5cd2      	ldrb	r2, [r2, r3]
  40325a:	3a01      	subs	r2, #1
  40325c:	b2d1      	uxtb	r1, r2
  40325e:	4a04      	ldr	r2, [pc, #16]	; (403270 <sleepmgr_unlock_mode+0x38>)
  403260:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
  403262:	68f8      	ldr	r0, [r7, #12]
  403264:	4b04      	ldr	r3, [pc, #16]	; (403278 <sleepmgr_unlock_mode+0x40>)
  403266:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  403268:	bf00      	nop
  40326a:	3710      	adds	r7, #16
  40326c:	46bd      	mov	sp, r7
  40326e:	bd80      	pop	{r7, pc}
  403270:	2000a73c 	.word	0x2000a73c
  403274:	0040316d 	.word	0x0040316d
  403278:	004031c5 	.word	0x004031c5

0040327c <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
  40327c:	b580      	push	{r7, lr}
  40327e:	b082      	sub	sp, #8
  403280:	af00      	add	r7, sp, #0
  403282:	4603      	mov	r3, r0
  403284:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
  403286:	79fb      	ldrb	r3, [r7, #7]
  403288:	f083 0301 	eor.w	r3, r3, #1
  40328c:	b2db      	uxtb	r3, r3
  40328e:	2b00      	cmp	r3, #0
  403290:	d006      	beq.n	4032a0 <udd_sleep_mode+0x24>
  403292:	4b0d      	ldr	r3, [pc, #52]	; (4032c8 <udd_sleep_mode+0x4c>)
  403294:	781b      	ldrb	r3, [r3, #0]
  403296:	2b00      	cmp	r3, #0
  403298:	d002      	beq.n	4032a0 <udd_sleep_mode+0x24>
		sleepmgr_unlock_mode(UDP_SLEEP_MODE_USB_IDLE);
  40329a:	2002      	movs	r0, #2
  40329c:	4b0b      	ldr	r3, [pc, #44]	; (4032cc <udd_sleep_mode+0x50>)
  40329e:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
  4032a0:	79fb      	ldrb	r3, [r7, #7]
  4032a2:	2b00      	cmp	r3, #0
  4032a4:	d009      	beq.n	4032ba <udd_sleep_mode+0x3e>
  4032a6:	4b08      	ldr	r3, [pc, #32]	; (4032c8 <udd_sleep_mode+0x4c>)
  4032a8:	781b      	ldrb	r3, [r3, #0]
  4032aa:	f083 0301 	eor.w	r3, r3, #1
  4032ae:	b2db      	uxtb	r3, r3
  4032b0:	2b00      	cmp	r3, #0
  4032b2:	d002      	beq.n	4032ba <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_IDLE);
  4032b4:	2002      	movs	r0, #2
  4032b6:	4b06      	ldr	r3, [pc, #24]	; (4032d0 <udd_sleep_mode+0x54>)
  4032b8:	4798      	blx	r3
	}
	udd_b_idle = b_idle;
  4032ba:	4a03      	ldr	r2, [pc, #12]	; (4032c8 <udd_sleep_mode+0x4c>)
  4032bc:	79fb      	ldrb	r3, [r7, #7]
  4032be:	7013      	strb	r3, [r2, #0]
}
  4032c0:	bf00      	nop
  4032c2:	3708      	adds	r7, #8
  4032c4:	46bd      	mov	sp, r7
  4032c6:	bd80      	pop	{r7, pc}
  4032c8:	20006614 	.word	0x20006614
  4032cc:	00403239 	.word	0x00403239
  4032d0:	004031f5 	.word	0x004031f5

004032d4 <UDP_Handler>:
 * - control endpoint events (setup reception, end of data transfer, underflow, overflow, stall)
 * - bulk/interrupt/isochronous endpoints events (end of data transfer)
 *
 */
ISR(UDD_USB_INT_FUN)
{
  4032d4:	b580      	push	{r7, lr}
  4032d6:	af00      	add	r7, sp, #0
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
  4032d8:	4b66      	ldr	r3, [pc, #408]	; (403474 <UDP_Handler+0x1a0>)
  4032da:	4798      	blx	r3
  4032dc:	4603      	mov	r3, r0
  4032de:	f083 0301 	eor.w	r3, r3, #1
  4032e2:	b2db      	uxtb	r3, r3
  4032e4:	2b00      	cmp	r3, #0
  4032e6:	d00c      	beq.n	403302 <UDP_Handler+0x2e>
  4032e8:	4b63      	ldr	r3, [pc, #396]	; (403478 <UDP_Handler+0x1a4>)
  4032ea:	69db      	ldr	r3, [r3, #28]
  4032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4032f0:	2b00      	cmp	r3, #0
  4032f2:	d106      	bne.n	403302 <UDP_Handler+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
  4032f4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4032f6:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
  4032fa:	4b60      	ldr	r3, [pc, #384]	; (40347c <UDP_Handler+0x1a8>)
  4032fc:	2200      	movs	r2, #0
  4032fe:	701a      	strb	r2, [r3, #0]
		return;
  403300:	e0b7      	b.n	403472 <UDP_Handler+0x19e>
	}
#endif
	/* The UDP peripheral clock in the Power Management Controller (PMC)
	   must be enabled before any read/write operations to the UDP registers
	   including the UDP_TXVC register. */
	udd_enable_periph_ck();
  403302:	2023      	movs	r0, #35	; 0x23
  403304:	4b5e      	ldr	r3, [pc, #376]	; (403480 <UDP_Handler+0x1ac>)
  403306:	4798      	blx	r3

	if (Is_udd_sof_interrupt_enabled() && Is_udd_sof()) {
  403308:	4b5b      	ldr	r3, [pc, #364]	; (403478 <UDP_Handler+0x1a4>)
  40330a:	699b      	ldr	r3, [r3, #24]
  40330c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  403310:	2b00      	cmp	r3, #0
  403312:	d00e      	beq.n	403332 <UDP_Handler+0x5e>
  403314:	4b58      	ldr	r3, [pc, #352]	; (403478 <UDP_Handler+0x1a4>)
  403316:	69db      	ldr	r3, [r3, #28]
  403318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  40331c:	2b00      	cmp	r3, #0
  40331e:	d008      	beq.n	403332 <UDP_Handler+0x5e>
		udd_ack_sof();
  403320:	4b55      	ldr	r3, [pc, #340]	; (403478 <UDP_Handler+0x1a4>)
  403322:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403326:	621a      	str	r2, [r3, #32]
		udc_sof_notify();
  403328:	4b56      	ldr	r3, [pc, #344]	; (403484 <UDP_Handler+0x1b0>)
  40332a:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
  40332c:	4b56      	ldr	r3, [pc, #344]	; (403488 <UDP_Handler+0x1b4>)
  40332e:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
  403330:	e09d      	b.n	40346e <UDP_Handler+0x19a>
	}

	if (udd_ctrl_interrupt()) {
  403332:	4b56      	ldr	r3, [pc, #344]	; (40348c <UDP_Handler+0x1b8>)
  403334:	4798      	blx	r3
  403336:	4603      	mov	r3, r0
  403338:	2b00      	cmp	r3, #0
  40333a:	f040 8095 	bne.w	403468 <UDP_Handler+0x194>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
  40333e:	4b54      	ldr	r3, [pc, #336]	; (403490 <UDP_Handler+0x1bc>)
  403340:	4798      	blx	r3
  403342:	4603      	mov	r3, r0
  403344:	2b00      	cmp	r3, #0
  403346:	f040 8091 	bne.w	40346c <UDP_Handler+0x198>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40334a:	4b4b      	ldr	r3, [pc, #300]	; (403478 <UDP_Handler+0x1a4>)
  40334c:	699b      	ldr	r3, [r3, #24]
  40334e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  403352:	2b00      	cmp	r3, #0
  403354:	d005      	beq.n	403362 <UDP_Handler+0x8e>
  403356:	4b48      	ldr	r3, [pc, #288]	; (403478 <UDP_Handler+0x1a4>)
  403358:	69db      	ldr	r3, [r3, #28]
  40335a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  40335e:	2b00      	cmp	r3, #0
  403360:	d117      	bne.n	403392 <UDP_Handler+0xbe>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  403362:	4b45      	ldr	r3, [pc, #276]	; (403478 <UDP_Handler+0x1a4>)
  403364:	699b      	ldr	r3, [r3, #24]
  403366:	f403 7300 	and.w	r3, r3, #512	; 0x200
	if ((Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) ||
  40336a:	2b00      	cmp	r3, #0
  40336c:	d005      	beq.n	40337a <UDP_Handler+0xa6>
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  40336e:	4b42      	ldr	r3, [pc, #264]	; (403478 <UDP_Handler+0x1a4>)
  403370:	69db      	ldr	r3, [r3, #28]
  403372:	f403 7300 	and.w	r3, r3, #512	; 0x200
  403376:	2b00      	cmp	r3, #0
  403378:	d10b      	bne.n	403392 <UDP_Handler+0xbe>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  40337a:	4b3f      	ldr	r3, [pc, #252]	; (403478 <UDP_Handler+0x1a4>)
  40337c:	699b      	ldr	r3, [r3, #24]
  40337e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
		(Is_udd_resume_interrupt_enabled() && Is_udd_resume()) ||
  403382:	2b00      	cmp	r3, #0
  403384:	d01f      	beq.n	4033c6 <UDP_Handler+0xf2>
		(Is_udd_ext_resume_interrupt_enabled() && Is_udd_ext_resume())) {
  403386:	4b3c      	ldr	r3, [pc, #240]	; (403478 <UDP_Handler+0x1a4>)
  403388:	69db      	ldr	r3, [r3, #28]
  40338a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  40338e:	2b00      	cmp	r3, #0
  403390:	d019      	beq.n	4033c6 <UDP_Handler+0xf2>
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wakeups();
  403392:	4b39      	ldr	r3, [pc, #228]	; (403478 <UDP_Handler+0x1a4>)
  403394:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  403398:	621a      	str	r2, [r3, #32]
		// Do resume operations
		udd_disable_wakeups();
  40339a:	4b37      	ldr	r3, [pc, #220]	; (403478 <UDP_Handler+0x1a4>)
  40339c:	f44f 5218 	mov.w	r2, #9728	; 0x2600
  4033a0:	615a      	str	r2, [r3, #20]

		udd_sleep_mode(true); // Enter in IDLE mode
  4033a2:	2001      	movs	r0, #1
  4033a4:	4b3b      	ldr	r3, [pc, #236]	; (403494 <UDP_Handler+0x1c0>)
  4033a6:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
  4033a8:	4b3b      	ldr	r3, [pc, #236]	; (403498 <UDP_Handler+0x1c4>)
  4033aa:	4798      	blx	r3
#endif
		udd_ack_suspend();
  4033ac:	4b32      	ldr	r3, [pc, #200]	; (403478 <UDP_Handler+0x1a4>)
  4033ae:	f44f 7280 	mov.w	r2, #256	; 0x100
  4033b2:	621a      	str	r2, [r3, #32]
		udd_enable_suspend_interrupt();
  4033b4:	4b30      	ldr	r3, [pc, #192]	; (403478 <UDP_Handler+0x1a4>)
  4033b6:	f44f 7280 	mov.w	r2, #256	; 0x100
  4033ba:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  4033bc:	4b2e      	ldr	r3, [pc, #184]	; (403478 <UDP_Handler+0x1a4>)
  4033be:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4033c2:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  4033c4:	e053      	b.n	40346e <UDP_Handler+0x19a>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
  4033c6:	4b2c      	ldr	r3, [pc, #176]	; (403478 <UDP_Handler+0x1a4>)
  4033c8:	699b      	ldr	r3, [r3, #24]
  4033ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4033ce:	2b00      	cmp	r3, #0
  4033d0:	d022      	beq.n	403418 <UDP_Handler+0x144>
  4033d2:	4b29      	ldr	r3, [pc, #164]	; (403478 <UDP_Handler+0x1a4>)
  4033d4:	69db      	ldr	r3, [r3, #28]
  4033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  4033da:	2b00      	cmp	r3, #0
  4033dc:	d01c      	beq.n	403418 <UDP_Handler+0x144>
		// Ack suspend interrupt and enable resume interrupt
		udd_ack_suspend();
  4033de:	4b26      	ldr	r3, [pc, #152]	; (403478 <UDP_Handler+0x1a4>)
  4033e0:	f44f 7280 	mov.w	r2, #256	; 0x100
  4033e4:	621a      	str	r2, [r3, #32]
		udd_disable_suspend_interrupt();
  4033e6:	4b24      	ldr	r3, [pc, #144]	; (403478 <UDP_Handler+0x1a4>)
  4033e8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4033ec:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
  4033ee:	4b22      	ldr	r3, [pc, #136]	; (403478 <UDP_Handler+0x1a4>)
  4033f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4033f4:	611a      	str	r2, [r3, #16]
		udd_enable_resume_interrupt();
  4033f6:	4b20      	ldr	r3, [pc, #128]	; (403478 <UDP_Handler+0x1a4>)
  4033f8:	f44f 7200 	mov.w	r2, #512	; 0x200
  4033fc:	611a      	str	r2, [r3, #16]
		udd_enable_ext_resume_interrupt();
  4033fe:	4b1e      	ldr	r3, [pc, #120]	; (403478 <UDP_Handler+0x1a4>)
  403400:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403404:	611a      	str	r2, [r3, #16]
		udd_disable_periph_ck();
  403406:	2023      	movs	r0, #35	; 0x23
  403408:	4b24      	ldr	r3, [pc, #144]	; (40349c <UDP_Handler+0x1c8>)
  40340a:	4798      	blx	r3

		udd_sleep_mode(false); // Enter in SUSPEND mode
  40340c:	2000      	movs	r0, #0
  40340e:	4b21      	ldr	r3, [pc, #132]	; (403494 <UDP_Handler+0x1c0>)
  403410:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
  403412:	4b23      	ldr	r3, [pc, #140]	; (4034a0 <UDP_Handler+0x1cc>)
  403414:	4798      	blx	r3
#endif
		goto udd_interrupt_end;
  403416:	e02a      	b.n	40346e <UDP_Handler+0x19a>
	}
	if (Is_udd_reset()) {
  403418:	4b17      	ldr	r3, [pc, #92]	; (403478 <UDP_Handler+0x1a4>)
  40341a:	69db      	ldr	r3, [r3, #28]
  40341c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  403420:	2b00      	cmp	r3, #0
  403422:	d025      	beq.n	403470 <UDP_Handler+0x19c>
		// USB bus reset detection
		udd_ack_reset();
  403424:	4b14      	ldr	r3, [pc, #80]	; (403478 <UDP_Handler+0x1a4>)
  403426:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  40342a:	621a      	str	r2, [r3, #32]

		// Abort all jobs on-going
#if (0 != USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
  40342c:	4b1d      	ldr	r3, [pc, #116]	; (4034a4 <UDP_Handler+0x1d0>)
  40342e:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
  403430:	4b1d      	ldr	r3, [pc, #116]	; (4034a8 <UDP_Handler+0x1d4>)
  403432:	4798      	blx	r3
		// Reset device state
		udd_disable_address_state();
  403434:	4a10      	ldr	r2, [pc, #64]	; (403478 <UDP_Handler+0x1a4>)
  403436:	4b10      	ldr	r3, [pc, #64]	; (403478 <UDP_Handler+0x1a4>)
  403438:	685b      	ldr	r3, [r3, #4]
  40343a:	f023 0301 	bic.w	r3, r3, #1
  40343e:	6053      	str	r3, [r2, #4]
		udd_disable_configured_state();
  403440:	4a0d      	ldr	r2, [pc, #52]	; (403478 <UDP_Handler+0x1a4>)
  403442:	4b0d      	ldr	r3, [pc, #52]	; (403478 <UDP_Handler+0x1a4>)
  403444:	685b      	ldr	r3, [r3, #4]
  403446:	f023 0302 	bic.w	r3, r3, #2
  40344a:	6053      	str	r3, [r2, #4]
		// Reset endpoint control
		udd_reset_ep_ctrl();
  40344c:	4b17      	ldr	r3, [pc, #92]	; (4034ac <UDP_Handler+0x1d8>)
  40344e:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
  403450:	4b17      	ldr	r3, [pc, #92]	; (4034b0 <UDP_Handler+0x1dc>)
  403452:	4798      	blx	r3
		// After a USB reset, the suspend and SOF interrupt masks has been reseted
		// Thus, re-enable these
		udd_enable_suspend_interrupt();
  403454:	4b08      	ldr	r3, [pc, #32]	; (403478 <UDP_Handler+0x1a4>)
  403456:	f44f 7280 	mov.w	r2, #256	; 0x100
  40345a:	611a      	str	r2, [r3, #16]
		udd_enable_sof_interrupt();
  40345c:	4b06      	ldr	r3, [pc, #24]	; (403478 <UDP_Handler+0x1a4>)
  40345e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403462:	611a      	str	r2, [r3, #16]
		goto udd_interrupt_end;
  403464:	bf00      	nop
  403466:	e002      	b.n	40346e <UDP_Handler+0x19a>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
  403468:	bf00      	nop
  40346a:	e000      	b.n	40346e <UDP_Handler+0x19a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
  40346c:	bf00      	nop
	}

udd_interrupt_end:
udd_interrupt_sof_end:
	return;
  40346e:	bf00      	nop
  403470:	bf00      	nop
}
  403472:	bd80      	pop	{r7, pc}
  403474:	004030ad 	.word	0x004030ad
  403478:	40084000 	.word	0x40084000
  40347c:	200000c2 	.word	0x200000c2
  403480:	00402aed 	.word	0x00402aed
  403484:	00401abd 	.word	0x00401abd
  403488:	00406dc9 	.word	0x00406dc9
  40348c:	00404741 	.word	0x00404741
  403490:	00404e45 	.word	0x00404e45
  403494:	0040327d 	.word	0x0040327d
  403498:	00406db9 	.word	0x00406db9
  40349c:	00402b71 	.word	0x00402b71
  4034a0:	00406da9 	.word	0x00406da9
  4034a4:	00404895 	.word	0x00404895
  4034a8:	00401a69 	.word	0x00401a69
  4034ac:	00403f91 	.word	0x00403f91
  4034b0:	00404039 	.word	0x00404039

004034b4 <udd_enable>:
#endif
}


void udd_enable(void)
{
  4034b4:	b580      	push	{r7, lr}
  4034b6:	b082      	sub	sp, #8
  4034b8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	flags = cpu_irq_save();
  4034ba:	4b12      	ldr	r3, [pc, #72]	; (403504 <udd_enable+0x50>)
  4034bc:	4798      	blx	r3
  4034be:	6078      	str	r0, [r7, #4]
#if SAMG55
	matrix_set_usb_device();
#endif

	// Enable USB hardware
	udd_enable_periph_ck();
  4034c0:	2023      	movs	r0, #35	; 0x23
  4034c2:	4b11      	ldr	r3, [pc, #68]	; (403508 <udd_enable+0x54>)
  4034c4:	4798      	blx	r3
	sysclk_enable_usb();
  4034c6:	4b11      	ldr	r3, [pc, #68]	; (40350c <udd_enable+0x58>)
  4034c8:	4798      	blx	r3
	// Cortex, uses NVIC, no need to register IRQ handler
	NVIC_SetPriority((IRQn_Type) ID_UDP, UDD_USB_INT_LEVEL);
  4034ca:	2105      	movs	r1, #5
  4034cc:	2023      	movs	r0, #35	; 0x23
  4034ce:	4b10      	ldr	r3, [pc, #64]	; (403510 <udd_enable+0x5c>)
  4034d0:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDP);
  4034d2:	2023      	movs	r0, #35	; 0x23
  4034d4:	4b0f      	ldr	r3, [pc, #60]	; (403514 <udd_enable+0x60>)
  4034d6:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
  4034d8:	4b0f      	ldr	r3, [pc, #60]	; (403518 <udd_enable+0x64>)
  4034da:	4798      	blx	r3
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
  4034dc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  4034e0:	4b0e      	ldr	r3, [pc, #56]	; (40351c <udd_enable+0x68>)
  4034e2:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
  4034e4:	4b0e      	ldr	r3, [pc, #56]	; (403520 <udd_enable+0x6c>)
  4034e6:	2200      	movs	r2, #0
  4034e8:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDP_SLEEP_MODE_USB_SUSPEND);
  4034ea:	2000      	movs	r0, #0
  4034ec:	4b0d      	ldr	r3, [pc, #52]	; (403524 <udd_enable+0x70>)
  4034ee:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
  4034f0:	4b0d      	ldr	r3, [pc, #52]	; (403528 <udd_enable+0x74>)
  4034f2:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
  4034f4:	6878      	ldr	r0, [r7, #4]
  4034f6:	4b0d      	ldr	r3, [pc, #52]	; (40352c <udd_enable+0x78>)
  4034f8:	4798      	blx	r3
}
  4034fa:	bf00      	nop
  4034fc:	3708      	adds	r7, #8
  4034fe:	46bd      	mov	sp, r7
  403500:	bd80      	pop	{r7, pc}
  403502:	bf00      	nop
  403504:	0040316d 	.word	0x0040316d
  403508:	00402aed 	.word	0x00402aed
  40350c:	00400665 	.word	0x00400665
  403510:	00403119 	.word	0x00403119
  403514:	004030dd 	.word	0x004030dd
  403518:	004047e9 	.word	0x004047e9
  40351c:	00402c31 	.word	0x00402c31
  403520:	20006614 	.word	0x20006614
  403524:	004031f5 	.word	0x004031f5
  403528:	00403531 	.word	0x00403531
  40352c:	004031c5 	.word	0x004031c5

00403530 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
  403530:	b580      	push	{r7, lr}
  403532:	b082      	sub	sp, #8
  403534:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
  403536:	4b18      	ldr	r3, [pc, #96]	; (403598 <udd_attach+0x68>)
  403538:	4798      	blx	r3
  40353a:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
  40353c:	2001      	movs	r0, #1
  40353e:	4b17      	ldr	r3, [pc, #92]	; (40359c <udd_attach+0x6c>)
  403540:	4798      	blx	r3

	// Enable peripheral clock and USB clock
	udd_enable_periph_ck();
  403542:	2023      	movs	r0, #35	; 0x23
  403544:	4b16      	ldr	r3, [pc, #88]	; (4035a0 <udd_attach+0x70>)
  403546:	4798      	blx	r3

	// Authorize attach if VBus is present
	udd_enable_transceiver();
  403548:	4a16      	ldr	r2, [pc, #88]	; (4035a4 <udd_attach+0x74>)
  40354a:	4b16      	ldr	r3, [pc, #88]	; (4035a4 <udd_attach+0x74>)
  40354c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40354e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  403552:	6753      	str	r3, [r2, #116]	; 0x74
	udd_attach_device();
  403554:	4a13      	ldr	r2, [pc, #76]	; (4035a4 <udd_attach+0x74>)
  403556:	4b13      	ldr	r3, [pc, #76]	; (4035a4 <udd_attach+0x74>)
  403558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40355a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  40355e:	6753      	str	r3, [r2, #116]	; 0x74

	// Enable USB line events
	udd_enable_suspend_interrupt();
  403560:	4b10      	ldr	r3, [pc, #64]	; (4035a4 <udd_attach+0x74>)
  403562:	f44f 7280 	mov.w	r2, #256	; 0x100
  403566:	611a      	str	r2, [r3, #16]
	udd_enable_wake_up_interrupt();
  403568:	4b0e      	ldr	r3, [pc, #56]	; (4035a4 <udd_attach+0x74>)
  40356a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  40356e:	611a      	str	r2, [r3, #16]
	udd_enable_resume_interrupt();
  403570:	4b0c      	ldr	r3, [pc, #48]	; (4035a4 <udd_attach+0x74>)
  403572:	f44f 7200 	mov.w	r2, #512	; 0x200
  403576:	611a      	str	r2, [r3, #16]
	udd_enable_ext_resume_interrupt();
  403578:	4b0a      	ldr	r3, [pc, #40]	; (4035a4 <udd_attach+0x74>)
  40357a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40357e:	611a      	str	r2, [r3, #16]
	udd_enable_sof_interrupt();
  403580:	4b08      	ldr	r3, [pc, #32]	; (4035a4 <udd_attach+0x74>)
  403582:	f44f 6200 	mov.w	r2, #2048	; 0x800
  403586:	611a      	str	r2, [r3, #16]

	cpu_irq_restore(flags);
  403588:	6878      	ldr	r0, [r7, #4]
  40358a:	4b07      	ldr	r3, [pc, #28]	; (4035a8 <udd_attach+0x78>)
  40358c:	4798      	blx	r3
}
  40358e:	bf00      	nop
  403590:	3708      	adds	r7, #8
  403592:	46bd      	mov	sp, r7
  403594:	bd80      	pop	{r7, pc}
  403596:	bf00      	nop
  403598:	0040316d 	.word	0x0040316d
  40359c:	0040327d 	.word	0x0040327d
  4035a0:	00402aed 	.word	0x00402aed
  4035a4:	40084000 	.word	0x40084000
  4035a8:	004031c5 	.word	0x004031c5

004035ac <udd_set_address>:
	return false;
}


void udd_set_address(uint8_t address)
{
  4035ac:	b480      	push	{r7}
  4035ae:	b083      	sub	sp, #12
  4035b0:	af00      	add	r7, sp, #0
  4035b2:	4603      	mov	r3, r0
  4035b4:	71fb      	strb	r3, [r7, #7]
	udd_disable_address_state();
  4035b6:	4a15      	ldr	r2, [pc, #84]	; (40360c <udd_set_address+0x60>)
  4035b8:	4b14      	ldr	r3, [pc, #80]	; (40360c <udd_set_address+0x60>)
  4035ba:	685b      	ldr	r3, [r3, #4]
  4035bc:	f023 0301 	bic.w	r3, r3, #1
  4035c0:	6053      	str	r3, [r2, #4]
	udd_disable_address();
  4035c2:	4a12      	ldr	r2, [pc, #72]	; (40360c <udd_set_address+0x60>)
  4035c4:	4b11      	ldr	r3, [pc, #68]	; (40360c <udd_set_address+0x60>)
  4035c6:	689b      	ldr	r3, [r3, #8]
  4035c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  4035cc:	6093      	str	r3, [r2, #8]
	if (address) {
  4035ce:	79fb      	ldrb	r3, [r7, #7]
  4035d0:	2b00      	cmp	r3, #0
  4035d2:	d015      	beq.n	403600 <udd_set_address+0x54>
		udd_configure_address(address);
  4035d4:	490d      	ldr	r1, [pc, #52]	; (40360c <udd_set_address+0x60>)
  4035d6:	4b0d      	ldr	r3, [pc, #52]	; (40360c <udd_set_address+0x60>)
  4035d8:	689b      	ldr	r3, [r3, #8]
  4035da:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
  4035de:	79fb      	ldrb	r3, [r7, #7]
  4035e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4035e4:	4313      	orrs	r3, r2
  4035e6:	608b      	str	r3, [r1, #8]
		udd_enable_address();
  4035e8:	4a08      	ldr	r2, [pc, #32]	; (40360c <udd_set_address+0x60>)
  4035ea:	4b08      	ldr	r3, [pc, #32]	; (40360c <udd_set_address+0x60>)
  4035ec:	689b      	ldr	r3, [r3, #8]
  4035ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  4035f2:	6093      	str	r3, [r2, #8]
		udd_enable_address_state();
  4035f4:	4a05      	ldr	r2, [pc, #20]	; (40360c <udd_set_address+0x60>)
  4035f6:	4b05      	ldr	r3, [pc, #20]	; (40360c <udd_set_address+0x60>)
  4035f8:	685b      	ldr	r3, [r3, #4]
  4035fa:	f043 0301 	orr.w	r3, r3, #1
  4035fe:	6053      	str	r3, [r2, #4]
	}
}
  403600:	bf00      	nop
  403602:	370c      	adds	r7, #12
  403604:	46bd      	mov	sp, r7
  403606:	f85d 7b04 	ldr.w	r7, [sp], #4
  40360a:	4770      	bx	lr
  40360c:	40084000 	.word	0x40084000

00403610 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
  403610:	b480      	push	{r7}
  403612:	af00      	add	r7, sp, #0
	if (Is_udd_address_state_enabled())
  403614:	4b09      	ldr	r3, [pc, #36]	; (40363c <udd_getaddress+0x2c>)
  403616:	685b      	ldr	r3, [r3, #4]
  403618:	f003 0301 	and.w	r3, r3, #1
  40361c:	2b00      	cmp	r3, #0
  40361e:	d006      	beq.n	40362e <udd_getaddress+0x1e>
		return udd_get_configured_address();
  403620:	4b06      	ldr	r3, [pc, #24]	; (40363c <udd_getaddress+0x2c>)
  403622:	689b      	ldr	r3, [r3, #8]
  403624:	b2db      	uxtb	r3, r3
  403626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  40362a:	b2db      	uxtb	r3, r3
  40362c:	e000      	b.n	403630 <udd_getaddress+0x20>
	return 0;
  40362e:	2300      	movs	r3, #0
}
  403630:	4618      	mov	r0, r3
  403632:	46bd      	mov	sp, r7
  403634:	f85d 7b04 	ldr.w	r7, [sp], #4
  403638:	4770      	bx	lr
  40363a:	bf00      	nop
  40363c:	40084000 	.word	0x40084000

00403640 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
  403640:	b480      	push	{r7}
  403642:	af00      	add	r7, sp, #0
	return udd_frame_number();
  403644:	4b05      	ldr	r3, [pc, #20]	; (40365c <udd_get_frame_number+0x1c>)
  403646:	681b      	ldr	r3, [r3, #0]
  403648:	b29b      	uxth	r3, r3
  40364a:	f3c3 030a 	ubfx	r3, r3, #0, #11
  40364e:	b29b      	uxth	r3, r3
}
  403650:	4618      	mov	r0, r3
  403652:	46bd      	mov	sp, r7
  403654:	f85d 7b04 	ldr.w	r7, [sp], #4
  403658:	4770      	bx	lr
  40365a:	bf00      	nop
  40365c:	40084000 	.word	0x40084000

00403660 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
  403660:	b480      	push	{r7}
  403662:	b083      	sub	sp, #12
  403664:	af00      	add	r7, sp, #0
  403666:	6078      	str	r0, [r7, #4]
  403668:	460b      	mov	r3, r1
  40366a:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
  40366c:	4a05      	ldr	r2, [pc, #20]	; (403684 <udd_set_setup_payload+0x24>)
  40366e:	687b      	ldr	r3, [r7, #4]
  403670:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
  403672:	4a04      	ldr	r2, [pc, #16]	; (403684 <udd_set_setup_payload+0x24>)
  403674:	887b      	ldrh	r3, [r7, #2]
  403676:	8193      	strh	r3, [r2, #12]
}
  403678:	bf00      	nop
  40367a:	370c      	adds	r7, #12
  40367c:	46bd      	mov	sp, r7
  40367e:	f85d 7b04 	ldr.w	r7, [sp], #4
  403682:	4770      	bx	lr
  403684:	2000a748 	.word	0x2000a748

00403688 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
  403688:	b480      	push	{r7}
  40368a:	b087      	sub	sp, #28
  40368c:	af00      	add	r7, sp, #0
  40368e:	4603      	mov	r3, r0
  403690:	71fb      	strb	r3, [r7, #7]
  403692:	460b      	mov	r3, r1
  403694:	71bb      	strb	r3, [r7, #6]
  403696:	4613      	mov	r3, r2
  403698:	80bb      	strh	r3, [r7, #4]
	udd_ep_job_t *ptr_job;
	bool b_dir_in;
	bool b_iso;
	b_dir_in = ep & USB_EP_DIR_IN;
  40369a:	79fb      	ldrb	r3, [r7, #7]
  40369c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4036a0:	2b00      	cmp	r3, #0
  4036a2:	bf14      	ite	ne
  4036a4:	2301      	movne	r3, #1
  4036a6:	2300      	moveq	r3, #0
  4036a8:	75fb      	strb	r3, [r7, #23]
	b_iso = (bmAttributes&USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS;
  4036aa:	79bb      	ldrb	r3, [r7, #6]
  4036ac:	f003 0303 	and.w	r3, r3, #3
  4036b0:	2b01      	cmp	r3, #1
  4036b2:	bf0c      	ite	eq
  4036b4:	2301      	moveq	r3, #1
  4036b6:	2300      	movne	r3, #0
  4036b8:	75bb      	strb	r3, [r7, #22]
	ep = ep & USB_EP_ADDR_MASK;
  4036ba:	79fb      	ldrb	r3, [r7, #7]
  4036bc:	f003 030f 	and.w	r3, r3, #15
  4036c0:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
  4036c2:	79fb      	ldrb	r3, [r7, #7]
  4036c4:	2b02      	cmp	r3, #2
  4036c6:	d901      	bls.n	4036cc <udd_ep_alloc+0x44>
		return false;
  4036c8:	2300      	movs	r3, #0
  4036ca:	e0ca      	b.n	403862 <udd_ep_alloc+0x1da>
	}
	if (Is_udd_endpoint_enabled(ep)) {
  4036cc:	4a68      	ldr	r2, [pc, #416]	; (403870 <udd_ep_alloc+0x1e8>)
  4036ce:	79fb      	ldrb	r3, [r7, #7]
  4036d0:	330c      	adds	r3, #12
  4036d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4036d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4036da:	2b00      	cmp	r3, #0
  4036dc:	d001      	beq.n	4036e2 <udd_ep_alloc+0x5a>
		return false;
  4036de:	2300      	movs	r3, #0
  4036e0:	e0bf      	b.n	403862 <udd_ep_alloc+0x1da>
	}

	// Check parameters
	if (b_iso && (!udd_is_endpoint_support_iso(ep))) {
  4036e2:	7dbb      	ldrb	r3, [r7, #22]
  4036e4:	2b00      	cmp	r3, #0
  4036e6:	d007      	beq.n	4036f8 <udd_ep_alloc+0x70>
  4036e8:	79fb      	ldrb	r3, [r7, #7]
  4036ea:	2b00      	cmp	r3, #0
  4036ec:	d002      	beq.n	4036f4 <udd_ep_alloc+0x6c>
  4036ee:	79fb      	ldrb	r3, [r7, #7]
  4036f0:	2b03      	cmp	r3, #3
  4036f2:	d101      	bne.n	4036f8 <udd_ep_alloc+0x70>
		return false;
  4036f4:	2300      	movs	r3, #0
  4036f6:	e0b4      	b.n	403862 <udd_ep_alloc+0x1da>
	}
	if (MaxEndpointSize > udd_get_endpoint_size_max(ep)) {
  4036f8:	88ba      	ldrh	r2, [r7, #4]
  4036fa:	79fb      	ldrb	r3, [r7, #7]
  4036fc:	2b04      	cmp	r3, #4
  4036fe:	d002      	beq.n	403706 <udd_ep_alloc+0x7e>
  403700:	79fb      	ldrb	r3, [r7, #7]
  403702:	2b05      	cmp	r3, #5
  403704:	d102      	bne.n	40370c <udd_ep_alloc+0x84>
  403706:	f44f 7300 	mov.w	r3, #512	; 0x200
  40370a:	e000      	b.n	40370e <udd_ep_alloc+0x86>
  40370c:	2340      	movs	r3, #64	; 0x40
  40370e:	429a      	cmp	r2, r3
  403710:	dd01      	ble.n	403716 <udd_ep_alloc+0x8e>
		return false;
  403712:	2300      	movs	r3, #0
  403714:	e0a5      	b.n	403862 <udd_ep_alloc+0x1da>
	}
	ptr_job = &udd_ep_job[ep - 1];
  403716:	79fb      	ldrb	r3, [r7, #7]
  403718:	1e5a      	subs	r2, r3, #1
  40371a:	4613      	mov	r3, r2
  40371c:	009b      	lsls	r3, r3, #2
  40371e:	4413      	add	r3, r2
  403720:	009b      	lsls	r3, r3, #2
  403722:	4a54      	ldr	r2, [pc, #336]	; (403874 <udd_ep_alloc+0x1ec>)
  403724:	4413      	add	r3, r2
  403726:	613b      	str	r3, [r7, #16]

	// Set endpoint size
	ptr_job->size = MaxEndpointSize;
  403728:	88bb      	ldrh	r3, [r7, #4]
  40372a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40372e:	b299      	uxth	r1, r3
  403730:	693a      	ldr	r2, [r7, #16]
  403732:	8a13      	ldrh	r3, [r2, #16]
  403734:	f361 0309 	bfi	r3, r1, #0, #10
  403738:	8213      	strh	r3, [r2, #16]
	ptr_job->b_buf_end = false;
  40373a:	693a      	ldr	r2, [r7, #16]
  40373c:	7c53      	ldrb	r3, [r2, #17]
  40373e:	f36f 13c7 	bfc	r3, #7, #1
  403742:	7453      	strb	r3, [r2, #17]
	ptr_job->b_stall_requested = false;
  403744:	693a      	ldr	r2, [r7, #16]
  403746:	7c53      	ldrb	r3, [r2, #17]
  403748:	f36f 1345 	bfc	r3, #5, #1
  40374c:	7453      	strb	r3, [r2, #17]
	if (b_dir_in) {
  40374e:	7dfb      	ldrb	r3, [r7, #23]
  403750:	2b00      	cmp	r3, #0
  403752:	d004      	beq.n	40375e <udd_ep_alloc+0xd6>
		// No data buffered in FIFO
		ptr_job->bank = 0;
  403754:	693a      	ldr	r2, [r7, #16]
  403756:	7c53      	ldrb	r3, [r2, #17]
  403758:	f36f 0383 	bfc	r3, #2, #2
  40375c:	7453      	strb	r3, [r2, #17]
	}

	// Reset FIFOs
	udd_reset_endpoint(ep);
  40375e:	4944      	ldr	r1, [pc, #272]	; (403870 <udd_ep_alloc+0x1e8>)
  403760:	4b43      	ldr	r3, [pc, #268]	; (403870 <udd_ep_alloc+0x1e8>)
  403762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403764:	79fb      	ldrb	r3, [r7, #7]
  403766:	2001      	movs	r0, #1
  403768:	fa00 f303 	lsl.w	r3, r0, r3
  40376c:	4313      	orrs	r3, r2
  40376e:	628b      	str	r3, [r1, #40]	; 0x28
  403770:	bf00      	nop
  403772:	4b3f      	ldr	r3, [pc, #252]	; (403870 <udd_ep_alloc+0x1e8>)
  403774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403776:	79fb      	ldrb	r3, [r7, #7]
  403778:	2101      	movs	r1, #1
  40377a:	fa01 f303 	lsl.w	r3, r1, r3
  40377e:	4013      	ands	r3, r2
  403780:	2b00      	cmp	r3, #0
  403782:	d0f6      	beq.n	403772 <udd_ep_alloc+0xea>
  403784:	493a      	ldr	r1, [pc, #232]	; (403870 <udd_ep_alloc+0x1e8>)
  403786:	4b3a      	ldr	r3, [pc, #232]	; (403870 <udd_ep_alloc+0x1e8>)
  403788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  40378a:	79fb      	ldrb	r3, [r7, #7]
  40378c:	2001      	movs	r0, #1
  40378e:	fa00 f303 	lsl.w	r3, r0, r3
  403792:	43db      	mvns	r3, r3
  403794:	4013      	ands	r3, r2
  403796:	628b      	str	r3, [r1, #40]	; 0x28
	// Set configuration of new endpoint
	udd_configure_endpoint(ep,
  403798:	4a35      	ldr	r2, [pc, #212]	; (403870 <udd_ep_alloc+0x1e8>)
  40379a:	79fb      	ldrb	r3, [r7, #7]
  40379c:	330c      	adds	r3, #12
  40379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4037a2:	60fb      	str	r3, [r7, #12]
  4037a4:	68fb      	ldr	r3, [r7, #12]
  4037a6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4037aa:	60fb      	str	r3, [r7, #12]
  4037ac:	68fb      	ldr	r3, [r7, #12]
  4037ae:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  4037b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4037b6:	60fb      	str	r3, [r7, #12]
  4037b8:	7dfb      	ldrb	r3, [r7, #23]
  4037ba:	2b00      	cmp	r3, #0
  4037bc:	d00d      	beq.n	4037da <udd_ep_alloc+0x152>
  4037be:	79bb      	ldrb	r3, [r7, #6]
  4037c0:	021b      	lsls	r3, r3, #8
  4037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4037c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  4037ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4037ce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  4037d2:	f248 7380 	movw	r3, #34688	; 0x8780
  4037d6:	4013      	ands	r3, r2
  4037d8:	e008      	b.n	4037ec <udd_ep_alloc+0x164>
  4037da:	79bb      	ldrb	r3, [r7, #6]
  4037dc:	021b      	lsls	r3, r3, #8
  4037de:	f403 7340 	and.w	r3, r3, #768	; 0x300
  4037e2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
  4037e6:	f248 7380 	movw	r3, #34688	; 0x8780
  4037ea:	4013      	ands	r3, r2
  4037ec:	68fa      	ldr	r2, [r7, #12]
  4037ee:	4313      	orrs	r3, r2
  4037f0:	60fb      	str	r3, [r7, #12]
  4037f2:	491f      	ldr	r1, [pc, #124]	; (403870 <udd_ep_alloc+0x1e8>)
  4037f4:	79fb      	ldrb	r3, [r7, #7]
  4037f6:	68fa      	ldr	r2, [r7, #12]
  4037f8:	330c      	adds	r3, #12
  4037fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4037fe:	bf00      	nop
  403800:	4a1b      	ldr	r2, [pc, #108]	; (403870 <udd_ep_alloc+0x1e8>)
  403802:	79fb      	ldrb	r3, [r7, #7]
  403804:	330c      	adds	r3, #12
  403806:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40380a:	7dfb      	ldrb	r3, [r7, #23]
  40380c:	2b00      	cmp	r3, #0
  40380e:	d00a      	beq.n	403826 <udd_ep_alloc+0x19e>
  403810:	79bb      	ldrb	r3, [r7, #6]
  403812:	021b      	lsls	r3, r3, #8
  403814:	f403 7340 	and.w	r3, r3, #768	; 0x300
  403818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  40381c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  403820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  403824:	e005      	b.n	403832 <udd_ep_alloc+0x1aa>
  403826:	79bb      	ldrb	r3, [r7, #6]
  403828:	021b      	lsls	r3, r3, #8
  40382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40382e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  403832:	401a      	ands	r2, r3
  403834:	7dfb      	ldrb	r3, [r7, #23]
  403836:	2b00      	cmp	r3, #0
  403838:	d00a      	beq.n	403850 <udd_ep_alloc+0x1c8>
  40383a:	79bb      	ldrb	r3, [r7, #6]
  40383c:	021b      	lsls	r3, r3, #8
  40383e:	f403 7340 	and.w	r3, r3, #768	; 0x300
  403842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  403846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40384a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40384e:	e005      	b.n	40385c <udd_ep_alloc+0x1d4>
  403850:	79bb      	ldrb	r3, [r7, #6]
  403852:	021b      	lsls	r3, r3, #8
  403854:	f403 7340 	and.w	r3, r3, #768	; 0x300
  403858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  40385c:	429a      	cmp	r2, r3
  40385e:	d1cf      	bne.n	403800 <udd_ep_alloc+0x178>
		(b_dir_in ? ((bmAttributes&USB_EP_TYPE_MASK) | 0x4) : (bmAttributes&USB_EP_TYPE_MASK)),
		0);
	return true;
  403860:	2301      	movs	r3, #1
}
  403862:	4618      	mov	r0, r3
  403864:	371c      	adds	r7, #28
  403866:	46bd      	mov	sp, r7
  403868:	f85d 7b04 	ldr.w	r7, [sp], #4
  40386c:	4770      	bx	lr
  40386e:	bf00      	nop
  403870:	40084000 	.word	0x40084000
  403874:	2000661c 	.word	0x2000661c

00403878 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
  403878:	b580      	push	{r7, lr}
  40387a:	b084      	sub	sp, #16
  40387c:	af00      	add	r7, sp, #0
  40387e:	4603      	mov	r3, r0
  403880:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  403882:	79fb      	ldrb	r3, [r7, #7]
  403884:	f003 030f 	and.w	r3, r3, #15
  403888:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep_index) {
  40388a:	7bfb      	ldrb	r3, [r7, #15]
  40388c:	2b02      	cmp	r3, #2
  40388e:	d822      	bhi.n	4038d6 <udd_ep_free+0x5e>
		return;
	}
	udd_disable_endpoint(ep_index);
  403890:	4a13      	ldr	r2, [pc, #76]	; (4038e0 <udd_ep_free+0x68>)
  403892:	7bfb      	ldrb	r3, [r7, #15]
  403894:	330c      	adds	r3, #12
  403896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40389a:	60bb      	str	r3, [r7, #8]
  40389c:	68bb      	ldr	r3, [r7, #8]
  40389e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4038a2:	60bb      	str	r3, [r7, #8]
  4038a4:	68bb      	ldr	r3, [r7, #8]
  4038a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  4038aa:	60bb      	str	r3, [r7, #8]
  4038ac:	490c      	ldr	r1, [pc, #48]	; (4038e0 <udd_ep_free+0x68>)
  4038ae:	7bfb      	ldrb	r3, [r7, #15]
  4038b0:	68ba      	ldr	r2, [r7, #8]
  4038b2:	330c      	adds	r3, #12
  4038b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4038b8:	bf00      	nop
  4038ba:	4a09      	ldr	r2, [pc, #36]	; (4038e0 <udd_ep_free+0x68>)
  4038bc:	7bfb      	ldrb	r3, [r7, #15]
  4038be:	330c      	adds	r3, #12
  4038c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4038c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  4038c8:	2b00      	cmp	r3, #0
  4038ca:	d1f6      	bne.n	4038ba <udd_ep_free+0x42>
	udd_ep_abort_job(ep);
  4038cc:	79fb      	ldrb	r3, [r7, #7]
  4038ce:	4618      	mov	r0, r3
  4038d0:	4b04      	ldr	r3, [pc, #16]	; (4038e4 <udd_ep_free+0x6c>)
  4038d2:	4798      	blx	r3
  4038d4:	e000      	b.n	4038d8 <udd_ep_free+0x60>
		return;
  4038d6:	bf00      	nop
}
  4038d8:	3710      	adds	r7, #16
  4038da:	46bd      	mov	sp, r7
  4038dc:	bd80      	pop	{r7, pc}
  4038de:	bf00      	nop
  4038e0:	40084000 	.word	0x40084000
  4038e4:	004048d9 	.word	0x004048d9

004038e8 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
  4038e8:	b480      	push	{r7}
  4038ea:	b085      	sub	sp, #20
  4038ec:	af00      	add	r7, sp, #0
  4038ee:	4603      	mov	r3, r0
  4038f0:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  4038f2:	79fb      	ldrb	r3, [r7, #7]
  4038f4:	f003 030f 	and.w	r3, r3, #15
  4038f8:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  4038fa:	7bfb      	ldrb	r3, [r7, #15]
  4038fc:	1e5a      	subs	r2, r3, #1
  4038fe:	4613      	mov	r3, r2
  403900:	009b      	lsls	r3, r3, #2
  403902:	4413      	add	r3, r2
  403904:	009b      	lsls	r3, r3, #2
  403906:	4a13      	ldr	r2, [pc, #76]	; (403954 <udd_ep_is_halted+0x6c>)
  403908:	4413      	add	r3, r2
  40390a:	60bb      	str	r3, [r7, #8]
	if (USB_DEVICE_MAX_EP < ep_index) {
  40390c:	7bfb      	ldrb	r3, [r7, #15]
  40390e:	2b02      	cmp	r3, #2
  403910:	d901      	bls.n	403916 <udd_ep_is_halted+0x2e>
		return false;
  403912:	2300      	movs	r3, #0
  403914:	e017      	b.n	403946 <udd_ep_is_halted+0x5e>
	}
	return ptr_job->b_stall_requested ||
  403916:	68bb      	ldr	r3, [r7, #8]
  403918:	7c5b      	ldrb	r3, [r3, #17]
  40391a:	f003 0320 	and.w	r3, r3, #32
  40391e:	b2db      	uxtb	r3, r3
  403920:	2b00      	cmp	r3, #0
  403922:	d10a      	bne.n	40393a <udd_ep_is_halted+0x52>
			Is_udd_endpoint_stall_pending(ep & USB_EP_ADDR_MASK);
  403924:	4a0c      	ldr	r2, [pc, #48]	; (403958 <udd_ep_is_halted+0x70>)
  403926:	79fb      	ldrb	r3, [r7, #7]
  403928:	f003 030f 	and.w	r3, r3, #15
  40392c:	330c      	adds	r3, #12
  40392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403932:	f003 0328 	and.w	r3, r3, #40	; 0x28
	return ptr_job->b_stall_requested ||
  403936:	2b00      	cmp	r3, #0
  403938:	d001      	beq.n	40393e <udd_ep_is_halted+0x56>
  40393a:	2301      	movs	r3, #1
  40393c:	e000      	b.n	403940 <udd_ep_is_halted+0x58>
  40393e:	2300      	movs	r3, #0
  403940:	f003 0301 	and.w	r3, r3, #1
  403944:	b2db      	uxtb	r3, r3
}
  403946:	4618      	mov	r0, r3
  403948:	3714      	adds	r7, #20
  40394a:	46bd      	mov	sp, r7
  40394c:	f85d 7b04 	ldr.w	r7, [sp], #4
  403950:	4770      	bx	lr
  403952:	bf00      	nop
  403954:	2000661c 	.word	0x2000661c
  403958:	40084000 	.word	0x40084000

0040395c <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
  40395c:	b580      	push	{r7, lr}
  40395e:	b086      	sub	sp, #24
  403960:	af00      	add	r7, sp, #0
  403962:	4603      	mov	r3, r0
  403964:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  403966:	79fb      	ldrb	r3, [r7, #7]
  403968:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40396c:	2b00      	cmp	r3, #0
  40396e:	bf14      	ite	ne
  403970:	2301      	movne	r3, #1
  403972:	2300      	moveq	r3, #0
  403974:	75fb      	strb	r3, [r7, #23]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
  403976:	79fb      	ldrb	r3, [r7, #7]
  403978:	f003 030f 	and.w	r3, r3, #15
  40397c:	75bb      	strb	r3, [r7, #22]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
  40397e:	7dbb      	ldrb	r3, [r7, #22]
  403980:	1e5a      	subs	r2, r3, #1
  403982:	4613      	mov	r3, r2
  403984:	009b      	lsls	r3, r3, #2
  403986:	4413      	add	r3, r2
  403988:	009b      	lsls	r3, r3, #2
  40398a:	4a2d      	ldr	r2, [pc, #180]	; (403a40 <udd_ep_set_halt+0xe4>)
  40398c:	4413      	add	r3, r2
  40398e:	613b      	str	r3, [r7, #16]
	irqflags_t flags;
	if (USB_DEVICE_MAX_EP < ep_index) {
  403990:	7dbb      	ldrb	r3, [r7, #22]
  403992:	2b02      	cmp	r3, #2
  403994:	d901      	bls.n	40399a <udd_ep_set_halt+0x3e>
		return false;
  403996:	2300      	movs	r3, #0
  403998:	e04d      	b.n	403a36 <udd_ep_set_halt+0xda>
	}
	flags = cpu_irq_save();
  40399a:	4b2a      	ldr	r3, [pc, #168]	; (403a44 <udd_ep_set_halt+0xe8>)
  40399c:	4798      	blx	r3
  40399e:	60f8      	str	r0, [r7, #12]
	if (b_dir_in && (Is_udd_transmit_ready(ep_index)
  4039a0:	7dfb      	ldrb	r3, [r7, #23]
  4039a2:	2b00      	cmp	r3, #0
  4039a4:	d01f      	beq.n	4039e6 <udd_ep_set_halt+0x8a>
  4039a6:	4a28      	ldr	r2, [pc, #160]	; (403a48 <udd_ep_set_halt+0xec>)
  4039a8:	7dbb      	ldrb	r3, [r7, #22]
  4039aa:	330c      	adds	r3, #12
  4039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4039b0:	f003 0310 	and.w	r3, r3, #16
  4039b4:	2b00      	cmp	r3, #0
  4039b6:	d106      	bne.n	4039c6 <udd_ep_set_halt+0x6a>
				|| ptr_job->bank > 1)) {
  4039b8:	693b      	ldr	r3, [r7, #16]
  4039ba:	7c5b      	ldrb	r3, [r3, #17]
  4039bc:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4039c0:	b2db      	uxtb	r3, r3
  4039c2:	2b01      	cmp	r3, #1
  4039c4:	dd0f      	ble.n	4039e6 <udd_ep_set_halt+0x8a>
		// Halt until banks sent
		ptr_job->b_stall_requested = true;
  4039c6:	693a      	ldr	r2, [r7, #16]
  4039c8:	7c53      	ldrb	r3, [r2, #17]
  4039ca:	f043 0320 	orr.w	r3, r3, #32
  4039ce:	7453      	strb	r3, [r2, #17]
		udd_enable_endpoint_interrupt(ep_index);
  4039d0:	4a1d      	ldr	r2, [pc, #116]	; (403a48 <udd_ep_set_halt+0xec>)
  4039d2:	7dbb      	ldrb	r3, [r7, #22]
  4039d4:	2101      	movs	r1, #1
  4039d6:	fa01 f303 	lsl.w	r3, r1, r3
  4039da:	6113      	str	r3, [r2, #16]
		cpu_irq_restore(flags);
  4039dc:	68f8      	ldr	r0, [r7, #12]
  4039de:	4b1b      	ldr	r3, [pc, #108]	; (403a4c <udd_ep_set_halt+0xf0>)
  4039e0:	4798      	blx	r3
		return true;
  4039e2:	2301      	movs	r3, #1
  4039e4:	e027      	b.n	403a36 <udd_ep_set_halt+0xda>
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(ep_index);
  4039e6:	4a18      	ldr	r2, [pc, #96]	; (403a48 <udd_ep_set_halt+0xec>)
  4039e8:	7dbb      	ldrb	r3, [r7, #22]
  4039ea:	330c      	adds	r3, #12
  4039ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4039f0:	60bb      	str	r3, [r7, #8]
  4039f2:	68bb      	ldr	r3, [r7, #8]
  4039f4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4039f8:	60bb      	str	r3, [r7, #8]
  4039fa:	68bb      	ldr	r3, [r7, #8]
  4039fc:	f043 0320 	orr.w	r3, r3, #32
  403a00:	60bb      	str	r3, [r7, #8]
  403a02:	4911      	ldr	r1, [pc, #68]	; (403a48 <udd_ep_set_halt+0xec>)
  403a04:	7dbb      	ldrb	r3, [r7, #22]
  403a06:	68ba      	ldr	r2, [r7, #8]
  403a08:	330c      	adds	r3, #12
  403a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403a0e:	bf00      	nop
  403a10:	4a0d      	ldr	r2, [pc, #52]	; (403a48 <udd_ep_set_halt+0xec>)
  403a12:	7dbb      	ldrb	r3, [r7, #22]
  403a14:	330c      	adds	r3, #12
  403a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403a1a:	f003 0320 	and.w	r3, r3, #32
  403a1e:	2b20      	cmp	r3, #32
  403a20:	d1f6      	bne.n	403a10 <udd_ep_set_halt+0xb4>
		udd_enable_endpoint_interrupt(ep_index);
  403a22:	4a09      	ldr	r2, [pc, #36]	; (403a48 <udd_ep_set_halt+0xec>)
  403a24:	7dbb      	ldrb	r3, [r7, #22]
  403a26:	2101      	movs	r1, #1
  403a28:	fa01 f303 	lsl.w	r3, r1, r3
  403a2c:	6113      	str	r3, [r2, #16]
		cpu_irq_restore(flags);
  403a2e:	68f8      	ldr	r0, [r7, #12]
  403a30:	4b06      	ldr	r3, [pc, #24]	; (403a4c <udd_ep_set_halt+0xf0>)
  403a32:	4798      	blx	r3
	}
	return true;
  403a34:	2301      	movs	r3, #1
}
  403a36:	4618      	mov	r0, r3
  403a38:	3718      	adds	r7, #24
  403a3a:	46bd      	mov	sp, r7
  403a3c:	bd80      	pop	{r7, pc}
  403a3e:	bf00      	nop
  403a40:	2000661c 	.word	0x2000661c
  403a44:	0040316d 	.word	0x0040316d
  403a48:	40084000 	.word	0x40084000
  403a4c:	004031c5 	.word	0x004031c5

00403a50 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
  403a50:	b580      	push	{r7, lr}
  403a52:	b086      	sub	sp, #24
  403a54:	af00      	add	r7, sp, #0
  403a56:	4603      	mov	r3, r0
  403a58:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  403a5a:	79fb      	ldrb	r3, [r7, #7]
  403a5c:	f003 030f 	and.w	r3, r3, #15
  403a60:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  403a62:	79fb      	ldrb	r3, [r7, #7]
  403a64:	2b02      	cmp	r3, #2
  403a66:	d901      	bls.n	403a6c <udd_ep_clear_halt+0x1c>
		return false;
  403a68:	2300      	movs	r3, #0
  403a6a:	e07f      	b.n	403b6c <udd_ep_clear_halt+0x11c>
	ptr_job = &udd_ep_job[ep - 1];
  403a6c:	79fb      	ldrb	r3, [r7, #7]
  403a6e:	1e5a      	subs	r2, r3, #1
  403a70:	4613      	mov	r3, r2
  403a72:	009b      	lsls	r3, r3, #2
  403a74:	4413      	add	r3, r2
  403a76:	009b      	lsls	r3, r3, #2
  403a78:	4a3e      	ldr	r2, [pc, #248]	; (403b74 <udd_ep_clear_halt+0x124>)
  403a7a:	4413      	add	r3, r2
  403a7c:	617b      	str	r3, [r7, #20]

	ptr_job->b_stall_requested = false;
  403a7e:	697a      	ldr	r2, [r7, #20]
  403a80:	7c53      	ldrb	r3, [r2, #17]
  403a82:	f36f 1345 	bfc	r3, #5, #1
  403a86:	7453      	strb	r3, [r2, #17]
	if (Is_udd_endpoint_stall_requested(ep)) {
  403a88:	4a3b      	ldr	r2, [pc, #236]	; (403b78 <udd_ep_clear_halt+0x128>)
  403a8a:	79fb      	ldrb	r3, [r7, #7]
  403a8c:	330c      	adds	r3, #12
  403a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403a92:	f003 0320 	and.w	r3, r3, #32
  403a96:	2b00      	cmp	r3, #0
  403a98:	d067      	beq.n	403b6a <udd_ep_clear_halt+0x11a>
		// Remove stall
		udd_disable_stall_handshake(ep);
  403a9a:	4a37      	ldr	r2, [pc, #220]	; (403b78 <udd_ep_clear_halt+0x128>)
  403a9c:	79fb      	ldrb	r3, [r7, #7]
  403a9e:	330c      	adds	r3, #12
  403aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403aa4:	613b      	str	r3, [r7, #16]
  403aa6:	693b      	ldr	r3, [r7, #16]
  403aa8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403aac:	613b      	str	r3, [r7, #16]
  403aae:	693b      	ldr	r3, [r7, #16]
  403ab0:	f023 0320 	bic.w	r3, r3, #32
  403ab4:	613b      	str	r3, [r7, #16]
  403ab6:	4930      	ldr	r1, [pc, #192]	; (403b78 <udd_ep_clear_halt+0x128>)
  403ab8:	79fb      	ldrb	r3, [r7, #7]
  403aba:	693a      	ldr	r2, [r7, #16]
  403abc:	330c      	adds	r3, #12
  403abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403ac2:	bf00      	nop
  403ac4:	4a2c      	ldr	r2, [pc, #176]	; (403b78 <udd_ep_clear_halt+0x128>)
  403ac6:	79fb      	ldrb	r3, [r7, #7]
  403ac8:	330c      	adds	r3, #12
  403aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403ace:	f003 0320 	and.w	r3, r3, #32
  403ad2:	2b00      	cmp	r3, #0
  403ad4:	d1f6      	bne.n	403ac4 <udd_ep_clear_halt+0x74>
		// Reset FIFO and data toggle (after stall cleared)
		udd_reset_endpoint(ep);
  403ad6:	4928      	ldr	r1, [pc, #160]	; (403b78 <udd_ep_clear_halt+0x128>)
  403ad8:	4b27      	ldr	r3, [pc, #156]	; (403b78 <udd_ep_clear_halt+0x128>)
  403ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403adc:	79fb      	ldrb	r3, [r7, #7]
  403ade:	2001      	movs	r0, #1
  403ae0:	fa00 f303 	lsl.w	r3, r0, r3
  403ae4:	4313      	orrs	r3, r2
  403ae6:	628b      	str	r3, [r1, #40]	; 0x28
  403ae8:	bf00      	nop
  403aea:	4b23      	ldr	r3, [pc, #140]	; (403b78 <udd_ep_clear_halt+0x128>)
  403aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403aee:	79fb      	ldrb	r3, [r7, #7]
  403af0:	2101      	movs	r1, #1
  403af2:	fa01 f303 	lsl.w	r3, r1, r3
  403af6:	4013      	ands	r3, r2
  403af8:	2b00      	cmp	r3, #0
  403afa:	d0f6      	beq.n	403aea <udd_ep_clear_halt+0x9a>
  403afc:	491e      	ldr	r1, [pc, #120]	; (403b78 <udd_ep_clear_halt+0x128>)
  403afe:	4b1e      	ldr	r3, [pc, #120]	; (403b78 <udd_ep_clear_halt+0x128>)
  403b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403b02:	79fb      	ldrb	r3, [r7, #7]
  403b04:	2001      	movs	r0, #1
  403b06:	fa00 f303 	lsl.w	r3, r0, r3
  403b0a:	43db      	mvns	r3, r3
  403b0c:	4013      	ands	r3, r2
  403b0e:	628b      	str	r3, [r1, #40]	; 0x28
		// Clear stall status
		udd_ack_stall(ep);
  403b10:	4a19      	ldr	r2, [pc, #100]	; (403b78 <udd_ep_clear_halt+0x128>)
  403b12:	79fb      	ldrb	r3, [r7, #7]
  403b14:	330c      	adds	r3, #12
  403b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403b1a:	60fb      	str	r3, [r7, #12]
  403b1c:	68fb      	ldr	r3, [r7, #12]
  403b1e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403b22:	60fb      	str	r3, [r7, #12]
  403b24:	68fb      	ldr	r3, [r7, #12]
  403b26:	f023 0308 	bic.w	r3, r3, #8
  403b2a:	60fb      	str	r3, [r7, #12]
  403b2c:	4912      	ldr	r1, [pc, #72]	; (403b78 <udd_ep_clear_halt+0x128>)
  403b2e:	79fb      	ldrb	r3, [r7, #7]
  403b30:	68fa      	ldr	r2, [r7, #12]
  403b32:	330c      	adds	r3, #12
  403b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403b38:	bf00      	nop
  403b3a:	4a0f      	ldr	r2, [pc, #60]	; (403b78 <udd_ep_clear_halt+0x128>)
  403b3c:	79fb      	ldrb	r3, [r7, #7]
  403b3e:	330c      	adds	r3, #12
  403b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403b44:	f003 0308 	and.w	r3, r3, #8
  403b48:	2b00      	cmp	r3, #0
  403b4a:	d1f6      	bne.n	403b3a <udd_ep_clear_halt+0xea>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
  403b4c:	697b      	ldr	r3, [r7, #20]
  403b4e:	7c5b      	ldrb	r3, [r3, #17]
  403b50:	f003 0310 	and.w	r3, r3, #16
  403b54:	b2db      	uxtb	r3, r3
  403b56:	2b00      	cmp	r3, #0
  403b58:	d007      	beq.n	403b6a <udd_ep_clear_halt+0x11a>
			ptr_job->busy = false;
  403b5a:	697a      	ldr	r2, [r7, #20]
  403b5c:	7c53      	ldrb	r3, [r2, #17]
  403b5e:	f36f 1304 	bfc	r3, #4, #1
  403b62:	7453      	strb	r3, [r2, #17]
			ptr_job->call_nohalt();
  403b64:	697b      	ldr	r3, [r7, #20]
  403b66:	681b      	ldr	r3, [r3, #0]
  403b68:	4798      	blx	r3
		}
	}
	return true;
  403b6a:	2301      	movs	r3, #1
}
  403b6c:	4618      	mov	r0, r3
  403b6e:	3718      	adds	r7, #24
  403b70:	46bd      	mov	sp, r7
  403b72:	bd80      	pop	{r7, pc}
  403b74:	2000661c 	.word	0x2000661c
  403b78:	40084000 	.word	0x40084000

00403b7c <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
  403b7c:	b580      	push	{r7, lr}
  403b7e:	b088      	sub	sp, #32
  403b80:	af00      	add	r7, sp, #0
  403b82:	60ba      	str	r2, [r7, #8]
  403b84:	607b      	str	r3, [r7, #4]
  403b86:	4603      	mov	r3, r0
  403b88:	73fb      	strb	r3, [r7, #15]
  403b8a:	460b      	mov	r3, r1
  403b8c:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;
	bool b_dir_in = ep & USB_EP_DIR_IN;
  403b8e:	7bfb      	ldrb	r3, [r7, #15]
  403b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403b94:	2b00      	cmp	r3, #0
  403b96:	bf14      	ite	ne
  403b98:	2301      	movne	r3, #1
  403b9a:	2300      	moveq	r3, #0
  403b9c:	77fb      	strb	r3, [r7, #31]

	ep &= USB_EP_ADDR_MASK;
  403b9e:	7bfb      	ldrb	r3, [r7, #15]
  403ba0:	f003 030f 	and.w	r3, r3, #15
  403ba4:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
  403ba6:	7bfb      	ldrb	r3, [r7, #15]
  403ba8:	2b02      	cmp	r3, #2
  403baa:	d901      	bls.n	403bb0 <udd_ep_run+0x34>
		return false;
  403bac:	2300      	movs	r3, #0
  403bae:	e083      	b.n	403cb8 <udd_ep_run+0x13c>
	}
	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
  403bb0:	7bfb      	ldrb	r3, [r7, #15]
  403bb2:	1e5a      	subs	r2, r3, #1
  403bb4:	4613      	mov	r3, r2
  403bb6:	009b      	lsls	r3, r3, #2
  403bb8:	4413      	add	r3, r2
  403bba:	009b      	lsls	r3, r3, #2
  403bbc:	4a40      	ldr	r2, [pc, #256]	; (403cc0 <udd_ep_run+0x144>)
  403bbe:	4413      	add	r3, r2
  403bc0:	61bb      	str	r3, [r7, #24]

	if ((!Is_udd_endpoint_enabled(ep))
  403bc2:	4a40      	ldr	r2, [pc, #256]	; (403cc4 <udd_ep_run+0x148>)
  403bc4:	7bfb      	ldrb	r3, [r7, #15]
  403bc6:	330c      	adds	r3, #12
  403bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  403bd0:	2b00      	cmp	r3, #0
  403bd2:	d00f      	beq.n	403bf4 <udd_ep_run+0x78>
			|| ptr_job->b_stall_requested
  403bd4:	69bb      	ldr	r3, [r7, #24]
  403bd6:	7c5b      	ldrb	r3, [r3, #17]
  403bd8:	f003 0320 	and.w	r3, r3, #32
  403bdc:	b2db      	uxtb	r3, r3
  403bde:	2b00      	cmp	r3, #0
  403be0:	d108      	bne.n	403bf4 <udd_ep_run+0x78>
			|| Is_udd_endpoint_stall_requested(ep)) {
  403be2:	4a38      	ldr	r2, [pc, #224]	; (403cc4 <udd_ep_run+0x148>)
  403be4:	7bfb      	ldrb	r3, [r7, #15]
  403be6:	330c      	adds	r3, #12
  403be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403bec:	f003 0320 	and.w	r3, r3, #32
  403bf0:	2b00      	cmp	r3, #0
  403bf2:	d001      	beq.n	403bf8 <udd_ep_run+0x7c>
		return false; // Endpoint is halted
  403bf4:	2300      	movs	r3, #0
  403bf6:	e05f      	b.n	403cb8 <udd_ep_run+0x13c>
	}

	flags = cpu_irq_save();
  403bf8:	4b33      	ldr	r3, [pc, #204]	; (403cc8 <udd_ep_run+0x14c>)
  403bfa:	4798      	blx	r3
  403bfc:	6178      	str	r0, [r7, #20]
	if (ptr_job->busy == true) {
  403bfe:	69bb      	ldr	r3, [r7, #24]
  403c00:	7c5b      	ldrb	r3, [r3, #17]
  403c02:	f003 0310 	and.w	r3, r3, #16
  403c06:	b2db      	uxtb	r3, r3
  403c08:	2b00      	cmp	r3, #0
  403c0a:	d004      	beq.n	403c16 <udd_ep_run+0x9a>
		cpu_irq_restore(flags);
  403c0c:	6978      	ldr	r0, [r7, #20]
  403c0e:	4b2f      	ldr	r3, [pc, #188]	; (403ccc <udd_ep_run+0x150>)
  403c10:	4798      	blx	r3
		return false; // Job already on going
  403c12:	2300      	movs	r3, #0
  403c14:	e050      	b.n	403cb8 <udd_ep_run+0x13c>
	}
	ptr_job->busy = true;
  403c16:	69ba      	ldr	r2, [r7, #24]
  403c18:	7c53      	ldrb	r3, [r2, #17]
  403c1a:	f043 0310 	orr.w	r3, r3, #16
  403c1e:	7453      	strb	r3, [r2, #17]
	cpu_irq_restore(flags);
  403c20:	6978      	ldr	r0, [r7, #20]
  403c22:	4b2a      	ldr	r3, [pc, #168]	; (403ccc <udd_ep_run+0x150>)
  403c24:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
  403c26:	69bb      	ldr	r3, [r7, #24]
  403c28:	68ba      	ldr	r2, [r7, #8]
  403c2a:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
  403c2c:	69bb      	ldr	r3, [r7, #24]
  403c2e:	687a      	ldr	r2, [r7, #4]
  403c30:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
  403c32:	69bb      	ldr	r3, [r7, #24]
  403c34:	2200      	movs	r2, #0
  403c36:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
  403c38:	69bb      	ldr	r3, [r7, #24]
  403c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  403c3c:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
  403c3e:	7bbb      	ldrb	r3, [r7, #14]
  403c40:	2b00      	cmp	r3, #0
  403c42:	d102      	bne.n	403c4a <udd_ep_run+0xce>
  403c44:	687b      	ldr	r3, [r7, #4]
  403c46:	2b00      	cmp	r3, #0
  403c48:	d101      	bne.n	403c4e <udd_ep_run+0xd2>
  403c4a:	2301      	movs	r3, #1
  403c4c:	e000      	b.n	403c50 <udd_ep_run+0xd4>
  403c4e:	2300      	movs	r3, #0
  403c50:	b2db      	uxtb	r3, r3
  403c52:	f003 0301 	and.w	r3, r3, #1
  403c56:	b2d9      	uxtb	r1, r3
  403c58:	69ba      	ldr	r2, [r7, #24]
  403c5a:	7c53      	ldrb	r3, [r2, #17]
  403c5c:	f361 1386 	bfi	r3, r1, #6, #1
  403c60:	7453      	strb	r3, [r2, #17]
	ptr_job->b_buf_end = false;
  403c62:	69ba      	ldr	r2, [r7, #24]
  403c64:	7c53      	ldrb	r3, [r2, #17]
  403c66:	f36f 13c7 	bfc	r3, #7, #1
  403c6a:	7453      	strb	r3, [r2, #17]

	flags = cpu_irq_save();
  403c6c:	4b16      	ldr	r3, [pc, #88]	; (403cc8 <udd_ep_run+0x14c>)
  403c6e:	4798      	blx	r3
  403c70:	6178      	str	r0, [r7, #20]
	udd_enable_endpoint_interrupt(ep);
  403c72:	4a14      	ldr	r2, [pc, #80]	; (403cc4 <udd_ep_run+0x148>)
  403c74:	7bfb      	ldrb	r3, [r7, #15]
  403c76:	2101      	movs	r1, #1
  403c78:	fa01 f303 	lsl.w	r3, r1, r3
  403c7c:	6113      	str	r3, [r2, #16]
	// Request first transfer
	if (b_dir_in) {
  403c7e:	7ffb      	ldrb	r3, [r7, #31]
  403c80:	2b00      	cmp	r3, #0
  403c82:	d015      	beq.n	403cb0 <udd_ep_run+0x134>
		if (Is_udd_in_pending(ep)) {
  403c84:	4a0f      	ldr	r2, [pc, #60]	; (403cc4 <udd_ep_run+0x148>)
  403c86:	7bfb      	ldrb	r3, [r7, #15]
  403c88:	330c      	adds	r3, #12
  403c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403c8e:	f003 0311 	and.w	r3, r3, #17
  403c92:	2b00      	cmp	r3, #0
  403c94:	d10c      	bne.n	403cb0 <udd_ep_run+0x134>
			// Append more data (handled in interrupt service)
		} else {
			// Start new, try to fill 1~2 banks before handling status
			if (udd_ep_in_sent(ep, true)) {
  403c96:	7bfb      	ldrb	r3, [r7, #15]
  403c98:	2101      	movs	r1, #1
  403c9a:	4618      	mov	r0, r3
  403c9c:	4b0c      	ldr	r3, [pc, #48]	; (403cd0 <udd_ep_run+0x154>)
  403c9e:	4798      	blx	r3
  403ca0:	4603      	mov	r3, r0
  403ca2:	2b00      	cmp	r3, #0
  403ca4:	d004      	beq.n	403cb0 <udd_ep_run+0x134>
				// Over one bank
				udd_ep_in_sent(ep, false);
  403ca6:	7bfb      	ldrb	r3, [r7, #15]
  403ca8:	2100      	movs	r1, #0
  403caa:	4618      	mov	r0, r3
  403cac:	4b08      	ldr	r3, [pc, #32]	; (403cd0 <udd_ep_run+0x154>)
  403cae:	4798      	blx	r3
			}
		}
	} else {
		// Waiting for OUT received interrupt
	}
	cpu_irq_restore(flags);
  403cb0:	6978      	ldr	r0, [r7, #20]
  403cb2:	4b06      	ldr	r3, [pc, #24]	; (403ccc <udd_ep_run+0x150>)
  403cb4:	4798      	blx	r3

	return true;
  403cb6:	2301      	movs	r3, #1
}
  403cb8:	4618      	mov	r0, r3
  403cba:	3720      	adds	r7, #32
  403cbc:	46bd      	mov	sp, r7
  403cbe:	bd80      	pop	{r7, pc}
  403cc0:	2000661c 	.word	0x2000661c
  403cc4:	40084000 	.word	0x40084000
  403cc8:	0040316d 	.word	0x0040316d
  403ccc:	004031c5 	.word	0x004031c5
  403cd0:	00404c31 	.word	0x00404c31

00403cd4 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
  403cd4:	b580      	push	{r7, lr}
  403cd6:	b088      	sub	sp, #32
  403cd8:	af00      	add	r7, sp, #0
  403cda:	4603      	mov	r3, r0
  403cdc:	71fb      	strb	r3, [r7, #7]
	bool b_dir_in = ep & USB_EP_DIR_IN;
  403cde:	79fb      	ldrb	r3, [r7, #7]
  403ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  403ce4:	2b00      	cmp	r3, #0
  403ce6:	bf14      	ite	ne
  403ce8:	2301      	movne	r3, #1
  403cea:	2300      	moveq	r3, #0
  403cec:	77fb      	strb	r3, [r7, #31]
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
  403cee:	79fb      	ldrb	r3, [r7, #7]
  403cf0:	f003 030f 	and.w	r3, r3, #15
  403cf4:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
  403cf6:	79fb      	ldrb	r3, [r7, #7]
  403cf8:	2b02      	cmp	r3, #2
  403cfa:	f200 80e9 	bhi.w	403ed0 <udd_ep_abort+0x1fc>
		return;

	// Disable interrupts
	flags = cpu_irq_save();
  403cfe:	4b76      	ldr	r3, [pc, #472]	; (403ed8 <udd_ep_abort+0x204>)
  403d00:	4798      	blx	r3
  403d02:	61b8      	str	r0, [r7, #24]
	udd_disable_endpoint_interrupt(ep);
  403d04:	4a75      	ldr	r2, [pc, #468]	; (403edc <udd_ep_abort+0x208>)
  403d06:	79fb      	ldrb	r3, [r7, #7]
  403d08:	2101      	movs	r1, #1
  403d0a:	fa01 f303 	lsl.w	r3, r1, r3
  403d0e:	6153      	str	r3, [r2, #20]
	cpu_irq_restore(flags);
  403d10:	69b8      	ldr	r0, [r7, #24]
  403d12:	4b73      	ldr	r3, [pc, #460]	; (403ee0 <udd_ep_abort+0x20c>)
  403d14:	4798      	blx	r3
	// Clear pending statuses
	if (b_dir_in) {
  403d16:	7ffb      	ldrb	r3, [r7, #31]
  403d18:	2b00      	cmp	r3, #0
  403d1a:	f000 80ae 	beq.w	403e7a <udd_ep_abort+0x1a6>
		// Kill banks
		if (Is_udd_transmit_ready(ep)) {
  403d1e:	4a6f      	ldr	r2, [pc, #444]	; (403edc <udd_ep_abort+0x208>)
  403d20:	79fb      	ldrb	r3, [r7, #7]
  403d22:	330c      	adds	r3, #12
  403d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403d28:	f003 0310 	and.w	r3, r3, #16
  403d2c:	2b00      	cmp	r3, #0
  403d2e:	d073      	beq.n	403e18 <udd_ep_abort+0x144>
			udd_kill_data_in_fifo(ep,
  403d30:	79fb      	ldrb	r3, [r7, #7]
  403d32:	2b00      	cmp	r3, #0
  403d34:	d052      	beq.n	403ddc <udd_ep_abort+0x108>
  403d36:	79fb      	ldrb	r3, [r7, #7]
  403d38:	2b03      	cmp	r3, #3
  403d3a:	d04f      	beq.n	403ddc <udd_ep_abort+0x108>
  403d3c:	4a67      	ldr	r2, [pc, #412]	; (403edc <udd_ep_abort+0x208>)
  403d3e:	79fb      	ldrb	r3, [r7, #7]
  403d40:	330c      	adds	r3, #12
  403d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403d46:	617b      	str	r3, [r7, #20]
  403d48:	697b      	ldr	r3, [r7, #20]
  403d4a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403d4e:	617b      	str	r3, [r7, #20]
  403d50:	697b      	ldr	r3, [r7, #20]
  403d52:	f023 0310 	bic.w	r3, r3, #16
  403d56:	617b      	str	r3, [r7, #20]
  403d58:	4960      	ldr	r1, [pc, #384]	; (403edc <udd_ep_abort+0x208>)
  403d5a:	79fb      	ldrb	r3, [r7, #7]
  403d5c:	697a      	ldr	r2, [r7, #20]
  403d5e:	330c      	adds	r3, #12
  403d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403d64:	bf00      	nop
  403d66:	4a5d      	ldr	r2, [pc, #372]	; (403edc <udd_ep_abort+0x208>)
  403d68:	79fb      	ldrb	r3, [r7, #7]
  403d6a:	330c      	adds	r3, #12
  403d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403d70:	f003 0310 	and.w	r3, r3, #16
  403d74:	2b00      	cmp	r3, #0
  403d76:	d1f6      	bne.n	403d66 <udd_ep_abort+0x92>
  403d78:	bf00      	nop
  403d7a:	4a58      	ldr	r2, [pc, #352]	; (403edc <udd_ep_abort+0x208>)
  403d7c:	79fb      	ldrb	r3, [r7, #7]
  403d7e:	330c      	adds	r3, #12
  403d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403d84:	f003 0310 	and.w	r3, r3, #16
  403d88:	2b00      	cmp	r3, #0
  403d8a:	d1f6      	bne.n	403d7a <udd_ep_abort+0xa6>
  403d8c:	4a53      	ldr	r2, [pc, #332]	; (403edc <udd_ep_abort+0x208>)
  403d8e:	79fb      	ldrb	r3, [r7, #7]
  403d90:	330c      	adds	r3, #12
  403d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403d96:	613b      	str	r3, [r7, #16]
  403d98:	693b      	ldr	r3, [r7, #16]
  403d9a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403d9e:	613b      	str	r3, [r7, #16]
  403da0:	693b      	ldr	r3, [r7, #16]
  403da2:	f043 0310 	orr.w	r3, r3, #16
  403da6:	613b      	str	r3, [r7, #16]
  403da8:	494c      	ldr	r1, [pc, #304]	; (403edc <udd_ep_abort+0x208>)
  403daa:	79fb      	ldrb	r3, [r7, #7]
  403dac:	693a      	ldr	r2, [r7, #16]
  403dae:	330c      	adds	r3, #12
  403db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403db4:	bf00      	nop
  403db6:	4a49      	ldr	r2, [pc, #292]	; (403edc <udd_ep_abort+0x208>)
  403db8:	79fb      	ldrb	r3, [r7, #7]
  403dba:	330c      	adds	r3, #12
  403dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403dc0:	f003 0310 	and.w	r3, r3, #16
  403dc4:	2b10      	cmp	r3, #16
  403dc6:	d1f6      	bne.n	403db6 <udd_ep_abort+0xe2>
  403dc8:	bf00      	nop
  403dca:	4a44      	ldr	r2, [pc, #272]	; (403edc <udd_ep_abort+0x208>)
  403dcc:	79fb      	ldrb	r3, [r7, #7]
  403dce:	330c      	adds	r3, #12
  403dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403dd4:	f003 0310 	and.w	r3, r3, #16
  403dd8:	2b00      	cmp	r3, #0
  403dda:	d0f6      	beq.n	403dca <udd_ep_abort+0xf6>
  403ddc:	4a3f      	ldr	r2, [pc, #252]	; (403edc <udd_ep_abort+0x208>)
  403dde:	79fb      	ldrb	r3, [r7, #7]
  403de0:	330c      	adds	r3, #12
  403de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403de6:	60fb      	str	r3, [r7, #12]
  403de8:	68fb      	ldr	r3, [r7, #12]
  403dea:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403dee:	60fb      	str	r3, [r7, #12]
  403df0:	68fb      	ldr	r3, [r7, #12]
  403df2:	f023 0310 	bic.w	r3, r3, #16
  403df6:	60fb      	str	r3, [r7, #12]
  403df8:	4938      	ldr	r1, [pc, #224]	; (403edc <udd_ep_abort+0x208>)
  403dfa:	79fb      	ldrb	r3, [r7, #7]
  403dfc:	68fa      	ldr	r2, [r7, #12]
  403dfe:	330c      	adds	r3, #12
  403e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403e04:	bf00      	nop
  403e06:	4a35      	ldr	r2, [pc, #212]	; (403edc <udd_ep_abort+0x208>)
  403e08:	79fb      	ldrb	r3, [r7, #7]
  403e0a:	330c      	adds	r3, #12
  403e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403e10:	f003 0310 	and.w	r3, r3, #16
  403e14:	2b00      	cmp	r3, #0
  403e16:	d1f6      	bne.n	403e06 <udd_ep_abort+0x132>
					udd_get_endpoint_bank_max_nbr(ep)>1);
		}
		udd_ack_in_sent(ep);
  403e18:	4a30      	ldr	r2, [pc, #192]	; (403edc <udd_ep_abort+0x208>)
  403e1a:	79fb      	ldrb	r3, [r7, #7]
  403e1c:	330c      	adds	r3, #12
  403e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403e22:	60bb      	str	r3, [r7, #8]
  403e24:	68bb      	ldr	r3, [r7, #8]
  403e26:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403e2a:	60bb      	str	r3, [r7, #8]
  403e2c:	68bb      	ldr	r3, [r7, #8]
  403e2e:	f023 0301 	bic.w	r3, r3, #1
  403e32:	60bb      	str	r3, [r7, #8]
  403e34:	4929      	ldr	r1, [pc, #164]	; (403edc <udd_ep_abort+0x208>)
  403e36:	79fb      	ldrb	r3, [r7, #7]
  403e38:	68ba      	ldr	r2, [r7, #8]
  403e3a:	330c      	adds	r3, #12
  403e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  403e40:	bf00      	nop
  403e42:	4a26      	ldr	r2, [pc, #152]	; (403edc <udd_ep_abort+0x208>)
  403e44:	79fb      	ldrb	r3, [r7, #7]
  403e46:	330c      	adds	r3, #12
  403e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403e4c:	f003 0301 	and.w	r3, r3, #1
  403e50:	2b00      	cmp	r3, #0
  403e52:	d1f6      	bne.n	403e42 <udd_ep_abort+0x16e>
		// Reset number of buffered banks
		udd_ep_job[ep - 1].bank = 0;
  403e54:	79fb      	ldrb	r3, [r7, #7]
  403e56:	1e5a      	subs	r2, r3, #1
  403e58:	4922      	ldr	r1, [pc, #136]	; (403ee4 <udd_ep_abort+0x210>)
  403e5a:	4613      	mov	r3, r2
  403e5c:	009b      	lsls	r3, r3, #2
  403e5e:	4413      	add	r3, r2
  403e60:	009b      	lsls	r3, r3, #2
  403e62:	440b      	add	r3, r1
  403e64:	f103 0210 	add.w	r2, r3, #16
  403e68:	7853      	ldrb	r3, [r2, #1]
  403e6a:	f36f 0383 	bfc	r3, #2, #2
  403e6e:	7053      	strb	r3, [r2, #1]
  403e70:	e00c      	b.n	403e8c <udd_ep_abort+0x1b8>
	} else {
		// Clear all pending banks statuses
		while(Is_udd_any_bank_received(ep)) {
			udd_ep_ack_out_received(ep);
  403e72:	79fb      	ldrb	r3, [r7, #7]
  403e74:	4618      	mov	r0, r3
  403e76:	4b1c      	ldr	r3, [pc, #112]	; (403ee8 <udd_ep_abort+0x214>)
  403e78:	4798      	blx	r3
		while(Is_udd_any_bank_received(ep)) {
  403e7a:	4a18      	ldr	r2, [pc, #96]	; (403edc <udd_ep_abort+0x208>)
  403e7c:	79fb      	ldrb	r3, [r7, #7]
  403e7e:	330c      	adds	r3, #12
  403e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403e84:	f003 0342 	and.w	r3, r3, #66	; 0x42
  403e88:	2b00      	cmp	r3, #0
  403e8a:	d1f2      	bne.n	403e72 <udd_ep_abort+0x19e>
		}
	}
	// Reset FIFO and data toggle
	udd_reset_endpoint(ep);
  403e8c:	4913      	ldr	r1, [pc, #76]	; (403edc <udd_ep_abort+0x208>)
  403e8e:	4b13      	ldr	r3, [pc, #76]	; (403edc <udd_ep_abort+0x208>)
  403e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403e92:	79fb      	ldrb	r3, [r7, #7]
  403e94:	2001      	movs	r0, #1
  403e96:	fa00 f303 	lsl.w	r3, r0, r3
  403e9a:	4313      	orrs	r3, r2
  403e9c:	628b      	str	r3, [r1, #40]	; 0x28
  403e9e:	bf00      	nop
  403ea0:	4b0e      	ldr	r3, [pc, #56]	; (403edc <udd_ep_abort+0x208>)
  403ea2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403ea4:	79fb      	ldrb	r3, [r7, #7]
  403ea6:	2101      	movs	r1, #1
  403ea8:	fa01 f303 	lsl.w	r3, r1, r3
  403eac:	4013      	ands	r3, r2
  403eae:	2b00      	cmp	r3, #0
  403eb0:	d0f6      	beq.n	403ea0 <udd_ep_abort+0x1cc>
  403eb2:	490a      	ldr	r1, [pc, #40]	; (403edc <udd_ep_abort+0x208>)
  403eb4:	4b09      	ldr	r3, [pc, #36]	; (403edc <udd_ep_abort+0x208>)
  403eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  403eb8:	79fb      	ldrb	r3, [r7, #7]
  403eba:	2001      	movs	r0, #1
  403ebc:	fa00 f303 	lsl.w	r3, r0, r3
  403ec0:	43db      	mvns	r3, r3
  403ec2:	4013      	ands	r3, r2
  403ec4:	628b      	str	r3, [r1, #40]	; 0x28
	// Abort job
	udd_ep_abort_job(ep);
  403ec6:	79fb      	ldrb	r3, [r7, #7]
  403ec8:	4618      	mov	r0, r3
  403eca:	4b08      	ldr	r3, [pc, #32]	; (403eec <udd_ep_abort+0x218>)
  403ecc:	4798      	blx	r3
  403ece:	e000      	b.n	403ed2 <udd_ep_abort+0x1fe>
		return;
  403ed0:	bf00      	nop
}
  403ed2:	3720      	adds	r7, #32
  403ed4:	46bd      	mov	sp, r7
  403ed6:	bd80      	pop	{r7, pc}
  403ed8:	0040316d 	.word	0x0040316d
  403edc:	40084000 	.word	0x40084000
  403ee0:	004031c5 	.word	0x004031c5
  403ee4:	2000661c 	.word	0x2000661c
  403ee8:	00404989 	.word	0x00404989
  403eec:	004048d9 	.word	0x004048d9

00403ef0 <udd_ep_wait_stall_clear>:


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
  403ef0:	b580      	push	{r7, lr}
  403ef2:	b084      	sub	sp, #16
  403ef4:	af00      	add	r7, sp, #0
  403ef6:	4603      	mov	r3, r0
  403ef8:	6039      	str	r1, [r7, #0]
  403efa:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
  403efc:	79fb      	ldrb	r3, [r7, #7]
  403efe:	f003 030f 	and.w	r3, r3, #15
  403f02:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep) {
  403f04:	79fb      	ldrb	r3, [r7, #7]
  403f06:	2b02      	cmp	r3, #2
  403f08:	d901      	bls.n	403f0e <udd_ep_wait_stall_clear+0x1e>
		return false;
  403f0a:	2300      	movs	r3, #0
  403f0c:	e038      	b.n	403f80 <udd_ep_wait_stall_clear+0x90>
	}

	ptr_job = &udd_ep_job[ep - 1];
  403f0e:	79fb      	ldrb	r3, [r7, #7]
  403f10:	1e5a      	subs	r2, r3, #1
  403f12:	4613      	mov	r3, r2
  403f14:	009b      	lsls	r3, r3, #2
  403f16:	4413      	add	r3, r2
  403f18:	009b      	lsls	r3, r3, #2
  403f1a:	4a1b      	ldr	r2, [pc, #108]	; (403f88 <udd_ep_wait_stall_clear+0x98>)
  403f1c:	4413      	add	r3, r2
  403f1e:	60fb      	str	r3, [r7, #12]

	if (!Is_udd_endpoint_enabled(ep)) {
  403f20:	4a1a      	ldr	r2, [pc, #104]	; (403f8c <udd_ep_wait_stall_clear+0x9c>)
  403f22:	79fb      	ldrb	r3, [r7, #7]
  403f24:	330c      	adds	r3, #12
  403f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  403f2e:	2b00      	cmp	r3, #0
  403f30:	d101      	bne.n	403f36 <udd_ep_wait_stall_clear+0x46>
		return false; // Endpoint not enabled
  403f32:	2300      	movs	r3, #0
  403f34:	e024      	b.n	403f80 <udd_ep_wait_stall_clear+0x90>
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
  403f36:	68fb      	ldr	r3, [r7, #12]
  403f38:	7c5b      	ldrb	r3, [r3, #17]
  403f3a:	f003 0310 	and.w	r3, r3, #16
  403f3e:	b2db      	uxtb	r3, r3
  403f40:	2b00      	cmp	r3, #0
  403f42:	d001      	beq.n	403f48 <udd_ep_wait_stall_clear+0x58>
		return false; // Job already on going
  403f44:	2300      	movs	r3, #0
  403f46:	e01b      	b.n	403f80 <udd_ep_wait_stall_clear+0x90>
	}

	if (Is_udd_endpoint_stall_requested(ep)
  403f48:	4a10      	ldr	r2, [pc, #64]	; (403f8c <udd_ep_wait_stall_clear+0x9c>)
  403f4a:	79fb      	ldrb	r3, [r7, #7]
  403f4c:	330c      	adds	r3, #12
  403f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  403f52:	f003 0320 	and.w	r3, r3, #32
  403f56:	2b00      	cmp	r3, #0
  403f58:	d106      	bne.n	403f68 <udd_ep_wait_stall_clear+0x78>
			|| ptr_job->b_stall_requested) {
  403f5a:	68fb      	ldr	r3, [r7, #12]
  403f5c:	7c5b      	ldrb	r3, [r3, #17]
  403f5e:	f003 0320 	and.w	r3, r3, #32
  403f62:	b2db      	uxtb	r3, r3
  403f64:	2b00      	cmp	r3, #0
  403f66:	d008      	beq.n	403f7a <udd_ep_wait_stall_clear+0x8a>
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
  403f68:	68fa      	ldr	r2, [r7, #12]
  403f6a:	7c53      	ldrb	r3, [r2, #17]
  403f6c:	f043 0310 	orr.w	r3, r3, #16
  403f70:	7453      	strb	r3, [r2, #17]
		ptr_job->call_nohalt = callback;
  403f72:	68fb      	ldr	r3, [r7, #12]
  403f74:	683a      	ldr	r2, [r7, #0]
  403f76:	601a      	str	r2, [r3, #0]
  403f78:	e001      	b.n	403f7e <udd_ep_wait_stall_clear+0x8e>
	} else {
		// endpoint not halted then call directly callback
		callback();
  403f7a:	683b      	ldr	r3, [r7, #0]
  403f7c:	4798      	blx	r3
	}
	return true;
  403f7e:	2301      	movs	r3, #1
}
  403f80:	4618      	mov	r0, r3
  403f82:	3710      	adds	r7, #16
  403f84:	46bd      	mov	sp, r7
  403f86:	bd80      	pop	{r7, pc}
  403f88:	2000661c 	.word	0x2000661c
  403f8c:	40084000 	.word	0x40084000

00403f90 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
  403f90:	b580      	push	{r7, lr}
  403f92:	b084      	sub	sp, #16
  403f94:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_enable_address();
  403f96:	4a25      	ldr	r2, [pc, #148]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  403f98:	4b24      	ldr	r3, [pc, #144]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  403f9a:	689b      	ldr	r3, [r3, #8]
  403f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  403fa0:	6093      	str	r3, [r2, #8]
	udd_configure_address(0);
  403fa2:	4a22      	ldr	r2, [pc, #136]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  403fa4:	4b21      	ldr	r3, [pc, #132]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  403fa6:	689b      	ldr	r3, [r3, #8]
  403fa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  403fac:	6093      	str	r3, [r2, #8]
	// Alloc and configure control endpoint in OUT direction
	udd_configure_endpoint(0, USB_EP_TYPE_CONTROL, 0);
  403fae:	4b1f      	ldr	r3, [pc, #124]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  403fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403fb2:	60bb      	str	r3, [r7, #8]
  403fb4:	68bb      	ldr	r3, [r7, #8]
  403fb6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403fba:	60bb      	str	r3, [r7, #8]
  403fbc:	68bb      	ldr	r3, [r7, #8]
  403fbe:	f423 4307 	bic.w	r3, r3, #34560	; 0x8700
  403fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  403fc6:	60bb      	str	r3, [r7, #8]
  403fc8:	68bb      	ldr	r3, [r7, #8]
  403fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  403fce:	60bb      	str	r3, [r7, #8]
  403fd0:	4a16      	ldr	r2, [pc, #88]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  403fd2:	68bb      	ldr	r3, [r7, #8]
  403fd4:	6313      	str	r3, [r2, #48]	; 0x30
  403fd6:	bf00      	nop
  403fd8:	4b14      	ldr	r3, [pc, #80]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  403fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  403fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  403fe4:	d1f8      	bne.n	403fd8 <udd_reset_ep_ctrl+0x48>
	udd_enable_endpoint(0);
  403fe6:	4b11      	ldr	r3, [pc, #68]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  403fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403fea:	607b      	str	r3, [r7, #4]
  403fec:	687b      	ldr	r3, [r7, #4]
  403fee:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  403ff2:	607b      	str	r3, [r7, #4]
  403ff4:	687b      	ldr	r3, [r7, #4]
  403ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
  403ffa:	607b      	str	r3, [r7, #4]
  403ffc:	4a0b      	ldr	r2, [pc, #44]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  403ffe:	687b      	ldr	r3, [r7, #4]
  404000:	6313      	str	r3, [r2, #48]	; 0x30
  404002:	bf00      	nop
  404004:	4b09      	ldr	r3, [pc, #36]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  404006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  40400c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  404010:	d1f8      	bne.n	404004 <udd_reset_ep_ctrl+0x74>

	flags = cpu_irq_save();
  404012:	4b07      	ldr	r3, [pc, #28]	; (404030 <udd_reset_ep_ctrl+0xa0>)
  404014:	4798      	blx	r3
  404016:	60f8      	str	r0, [r7, #12]
	udd_enable_endpoint_interrupt(0);
  404018:	4b04      	ldr	r3, [pc, #16]	; (40402c <udd_reset_ep_ctrl+0x9c>)
  40401a:	2201      	movs	r2, #1
  40401c:	611a      	str	r2, [r3, #16]
	cpu_irq_restore(flags);
  40401e:	68f8      	ldr	r0, [r7, #12]
  404020:	4b04      	ldr	r3, [pc, #16]	; (404034 <udd_reset_ep_ctrl+0xa4>)
  404022:	4798      	blx	r3
}
  404024:	bf00      	nop
  404026:	3710      	adds	r7, #16
  404028:	46bd      	mov	sp, r7
  40402a:	bd80      	pop	{r7, pc}
  40402c:	40084000 	.word	0x40084000
  404030:	0040316d 	.word	0x0040316d
  404034:	004031c5 	.word	0x004031c5

00404038 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
  404038:	b480      	push	{r7}
  40403a:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.callback = NULL;
  40403c:	4b08      	ldr	r3, [pc, #32]	; (404060 <udd_ctrl_init+0x28>)
  40403e:	2200      	movs	r2, #0
  404040:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
  404042:	4b07      	ldr	r3, [pc, #28]	; (404060 <udd_ctrl_init+0x28>)
  404044:	2200      	movs	r2, #0
  404046:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
  404048:	4b05      	ldr	r3, [pc, #20]	; (404060 <udd_ctrl_init+0x28>)
  40404a:	2200      	movs	r2, #0
  40404c:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
  40404e:	4b05      	ldr	r3, [pc, #20]	; (404064 <udd_ctrl_init+0x2c>)
  404050:	2200      	movs	r2, #0
  404052:	701a      	strb	r2, [r3, #0]
}
  404054:	bf00      	nop
  404056:	46bd      	mov	sp, r7
  404058:	f85d 7b04 	ldr.w	r7, [sp], #4
  40405c:	4770      	bx	lr
  40405e:	bf00      	nop
  404060:	2000a748 	.word	0x2000a748
  404064:	20006615 	.word	0x20006615

00404068 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
  404068:	b580      	push	{r7, lr}
  40406a:	b086      	sub	sp, #24
  40406c:	af00      	add	r7, sp, #0
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
  40406e:	4b63      	ldr	r3, [pc, #396]	; (4041fc <udd_ctrl_setup_received+0x194>)
  404070:	781b      	ldrb	r3, [r3, #0]
  404072:	2b00      	cmp	r3, #0
  404074:	d003      	beq.n	40407e <udd_ctrl_setup_received+0x16>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
  404076:	4b62      	ldr	r3, [pc, #392]	; (404200 <udd_ctrl_setup_received+0x198>)
  404078:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
  40407a:	4b62      	ldr	r3, [pc, #392]	; (404204 <udd_ctrl_setup_received+0x19c>)
  40407c:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
  40407e:	4b62      	ldr	r3, [pc, #392]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  404080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404082:	0c1b      	lsrs	r3, r3, #16
  404084:	f3c3 030a 	ubfx	r3, r3, #0, #11
  404088:	2b08      	cmp	r3, #8
  40408a:	d017      	beq.n	4040bc <udd_ctrl_setup_received+0x54>
		udd_ack_setup_received(0);
  40408c:	4b5e      	ldr	r3, [pc, #376]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  40408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404090:	613b      	str	r3, [r7, #16]
  404092:	693b      	ldr	r3, [r7, #16]
  404094:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404098:	613b      	str	r3, [r7, #16]
  40409a:	693b      	ldr	r3, [r7, #16]
  40409c:	f023 0304 	bic.w	r3, r3, #4
  4040a0:	613b      	str	r3, [r7, #16]
  4040a2:	4a59      	ldr	r2, [pc, #356]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  4040a4:	693b      	ldr	r3, [r7, #16]
  4040a6:	6313      	str	r3, [r2, #48]	; 0x30
  4040a8:	bf00      	nop
  4040aa:	4b57      	ldr	r3, [pc, #348]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  4040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4040ae:	f003 0304 	and.w	r3, r3, #4
  4040b2:	2b00      	cmp	r3, #0
  4040b4:	d1f9      	bne.n	4040aa <udd_ctrl_setup_received+0x42>
		udd_ctrl_stall_data();
  4040b6:	4b55      	ldr	r3, [pc, #340]	; (40420c <udd_ctrl_setup_received+0x1a4>)
  4040b8:	4798      	blx	r3
		return; // Error data number doesn't correspond to SETUP packet
  4040ba:	e09b      	b.n	4041f4 <udd_ctrl_setup_received+0x18c>
	}
	for (i = 0; i < 8; i++) {
  4040bc:	2300      	movs	r3, #0
  4040be:	75fb      	strb	r3, [r7, #23]
  4040c0:	e009      	b.n	4040d6 <udd_ctrl_setup_received+0x6e>
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4040c2:	7dfb      	ldrb	r3, [r7, #23]
  4040c4:	4a52      	ldr	r2, [pc, #328]	; (404210 <udd_ctrl_setup_received+0x1a8>)
  4040c6:	4413      	add	r3, r2
			udd_endpoint_fifo_read(0);
  4040c8:	4a4f      	ldr	r2, [pc, #316]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  4040ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
		((uint8_t *) & udd_g_ctrlreq.req)[i] =
  4040cc:	b2d2      	uxtb	r2, r2
  4040ce:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
  4040d0:	7dfb      	ldrb	r3, [r7, #23]
  4040d2:	3301      	adds	r3, #1
  4040d4:	75fb      	strb	r3, [r7, #23]
  4040d6:	7dfb      	ldrb	r3, [r7, #23]
  4040d8:	2b07      	cmp	r3, #7
  4040da:	d9f2      	bls.n	4040c2 <udd_ctrl_setup_received+0x5a>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
  4040dc:	4b4c      	ldr	r3, [pc, #304]	; (404210 <udd_ctrl_setup_received+0x1a8>)
  4040de:	885a      	ldrh	r2, [r3, #2]
  4040e0:	4b4b      	ldr	r3, [pc, #300]	; (404210 <udd_ctrl_setup_received+0x1a8>)
  4040e2:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
  4040e4:	4b4a      	ldr	r3, [pc, #296]	; (404210 <udd_ctrl_setup_received+0x1a8>)
  4040e6:	889a      	ldrh	r2, [r3, #4]
  4040e8:	4b49      	ldr	r3, [pc, #292]	; (404210 <udd_ctrl_setup_received+0x1a8>)
  4040ea:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
  4040ec:	4b48      	ldr	r3, [pc, #288]	; (404210 <udd_ctrl_setup_received+0x1a8>)
  4040ee:	88da      	ldrh	r2, [r3, #6]
  4040f0:	4b47      	ldr	r3, [pc, #284]	; (404210 <udd_ctrl_setup_received+0x1a8>)
  4040f2:	80da      	strh	r2, [r3, #6]

	// Decode setup request
	if (udc_process_setup() == false) {
  4040f4:	4b47      	ldr	r3, [pc, #284]	; (404214 <udd_ctrl_setup_received+0x1ac>)
  4040f6:	4798      	blx	r3
  4040f8:	4603      	mov	r3, r0
  4040fa:	f083 0301 	eor.w	r3, r3, #1
  4040fe:	b2db      	uxtb	r3, r3
  404100:	2b00      	cmp	r3, #0
  404102:	d017      	beq.n	404134 <udd_ctrl_setup_received+0xcc>
		// Setup request unknown then stall it
		udd_ack_setup_received(0);
  404104:	4b40      	ldr	r3, [pc, #256]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  404106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404108:	60fb      	str	r3, [r7, #12]
  40410a:	68fb      	ldr	r3, [r7, #12]
  40410c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404110:	60fb      	str	r3, [r7, #12]
  404112:	68fb      	ldr	r3, [r7, #12]
  404114:	f023 0304 	bic.w	r3, r3, #4
  404118:	60fb      	str	r3, [r7, #12]
  40411a:	4a3b      	ldr	r2, [pc, #236]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  40411c:	68fb      	ldr	r3, [r7, #12]
  40411e:	6313      	str	r3, [r2, #48]	; 0x30
  404120:	bf00      	nop
  404122:	4b39      	ldr	r3, [pc, #228]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  404124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404126:	f003 0304 	and.w	r3, r3, #4
  40412a:	2b00      	cmp	r3, #0
  40412c:	d1f9      	bne.n	404122 <udd_ctrl_setup_received+0xba>
		udd_ctrl_stall_data();
  40412e:	4b37      	ldr	r3, [pc, #220]	; (40420c <udd_ctrl_setup_received+0x1a4>)
  404130:	4798      	blx	r3
		return;
  404132:	e05f      	b.n	4041f4 <udd_ctrl_setup_received+0x18c>
	}

	if (Udd_setup_is_in()) {
  404134:	4b36      	ldr	r3, [pc, #216]	; (404210 <udd_ctrl_setup_received+0x1a8>)
  404136:	781b      	ldrb	r3, [r3, #0]
  404138:	b25b      	sxtb	r3, r3
  40413a:	2b00      	cmp	r3, #0
  40413c:	da35      	bge.n	4041aa <udd_ctrl_setup_received+0x142>
		// Set DIR
		udd_set_endpoint_direction_in(0);
  40413e:	4b32      	ldr	r3, [pc, #200]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  404140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404142:	60bb      	str	r3, [r7, #8]
  404144:	68bb      	ldr	r3, [r7, #8]
  404146:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40414a:	60bb      	str	r3, [r7, #8]
  40414c:	68bb      	ldr	r3, [r7, #8]
  40414e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404152:	60bb      	str	r3, [r7, #8]
  404154:	4a2c      	ldr	r2, [pc, #176]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  404156:	68bb      	ldr	r3, [r7, #8]
  404158:	6313      	str	r3, [r2, #48]	; 0x30
  40415a:	bf00      	nop
  40415c:	4b2a      	ldr	r3, [pc, #168]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  40415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404160:	f003 0380 	and.w	r3, r3, #128	; 0x80
  404164:	2b80      	cmp	r3, #128	; 0x80
  404166:	d1f9      	bne.n	40415c <udd_ctrl_setup_received+0xf4>
		udd_ack_setup_received(0);
  404168:	4b27      	ldr	r3, [pc, #156]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  40416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40416c:	607b      	str	r3, [r7, #4]
  40416e:	687b      	ldr	r3, [r7, #4]
  404170:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404174:	607b      	str	r3, [r7, #4]
  404176:	687b      	ldr	r3, [r7, #4]
  404178:	f023 0304 	bic.w	r3, r3, #4
  40417c:	607b      	str	r3, [r7, #4]
  40417e:	4a22      	ldr	r2, [pc, #136]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  404180:	687b      	ldr	r3, [r7, #4]
  404182:	6313      	str	r3, [r2, #48]	; 0x30
  404184:	bf00      	nop
  404186:	4b20      	ldr	r3, [pc, #128]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  404188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40418a:	f003 0304 	and.w	r3, r3, #4
  40418e:	2b00      	cmp	r3, #0
  404190:	d1f9      	bne.n	404186 <udd_ctrl_setup_received+0x11e>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  404192:	4b21      	ldr	r3, [pc, #132]	; (404218 <udd_ctrl_setup_received+0x1b0>)
  404194:	2200      	movs	r2, #0
  404196:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  404198:	4b20      	ldr	r3, [pc, #128]	; (40421c <udd_ctrl_setup_received+0x1b4>)
  40419a:	2200      	movs	r2, #0
  40419c:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
  40419e:	4b17      	ldr	r3, [pc, #92]	; (4041fc <udd_ctrl_setup_received+0x194>)
  4041a0:	2202      	movs	r2, #2
  4041a2:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
  4041a4:	4b1e      	ldr	r3, [pc, #120]	; (404220 <udd_ctrl_setup_received+0x1b8>)
  4041a6:	4798      	blx	r3
  4041a8:	e024      	b.n	4041f4 <udd_ctrl_setup_received+0x18c>
	} else {
		udd_ack_setup_received(0);
  4041aa:	4b17      	ldr	r3, [pc, #92]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  4041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4041ae:	603b      	str	r3, [r7, #0]
  4041b0:	683b      	ldr	r3, [r7, #0]
  4041b2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4041b6:	603b      	str	r3, [r7, #0]
  4041b8:	683b      	ldr	r3, [r7, #0]
  4041ba:	f023 0304 	bic.w	r3, r3, #4
  4041be:	603b      	str	r3, [r7, #0]
  4041c0:	4a11      	ldr	r2, [pc, #68]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  4041c2:	683b      	ldr	r3, [r7, #0]
  4041c4:	6313      	str	r3, [r2, #48]	; 0x30
  4041c6:	bf00      	nop
  4041c8:	4b0f      	ldr	r3, [pc, #60]	; (404208 <udd_ctrl_setup_received+0x1a0>)
  4041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4041cc:	f003 0304 	and.w	r3, r3, #4
  4041d0:	2b00      	cmp	r3, #0
  4041d2:	d1f9      	bne.n	4041c8 <udd_ctrl_setup_received+0x160>
		if (0 == udd_g_ctrlreq.req.wLength) {
  4041d4:	4b0e      	ldr	r3, [pc, #56]	; (404210 <udd_ctrl_setup_received+0x1a8>)
  4041d6:	88db      	ldrh	r3, [r3, #6]
  4041d8:	2b00      	cmp	r3, #0
  4041da:	d102      	bne.n	4041e2 <udd_ctrl_setup_received+0x17a>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
  4041dc:	4b11      	ldr	r3, [pc, #68]	; (404224 <udd_ctrl_setup_received+0x1bc>)
  4041de:	4798      	blx	r3
			return;
  4041e0:	e008      	b.n	4041f4 <udd_ctrl_setup_received+0x18c>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
  4041e2:	4b0d      	ldr	r3, [pc, #52]	; (404218 <udd_ctrl_setup_received+0x1b0>)
  4041e4:	2200      	movs	r2, #0
  4041e6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_nb_trans = 0;
  4041e8:	4b0c      	ldr	r3, [pc, #48]	; (40421c <udd_ctrl_setup_received+0x1b4>)
  4041ea:	2200      	movs	r2, #0
  4041ec:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
  4041ee:	4b03      	ldr	r3, [pc, #12]	; (4041fc <udd_ctrl_setup_received+0x194>)
  4041f0:	2201      	movs	r2, #1
  4041f2:	701a      	strb	r2, [r3, #0]
	}
}
  4041f4:	3718      	adds	r7, #24
  4041f6:	46bd      	mov	sp, r7
  4041f8:	bd80      	pop	{r7, pc}
  4041fa:	bf00      	nop
  4041fc:	20006615 	.word	0x20006615
  404200:	00404725 	.word	0x00404725
  404204:	00404039 	.word	0x00404039
  404208:	40084000 	.word	0x40084000
  40420c:	00404675 	.word	0x00404675
  404210:	2000a748 	.word	0x2000a748
  404214:	00402339 	.word	0x00402339
  404218:	20006616 	.word	0x20006616
  40421c:	20006618 	.word	0x20006618
  404220:	00404229 	.word	0x00404229
  404224:	004046c1 	.word	0x004046c1

00404228 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
  404228:	b580      	push	{r7, lr}
  40422a:	b088      	sub	sp, #32
  40422c:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_src;
	irqflags_t flags;

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
  40422e:	4b71      	ldr	r3, [pc, #452]	; (4043f4 <udd_ctrl_in_sent+0x1cc>)
  404230:	781b      	ldrb	r3, [r3, #0]
  404232:	2b03      	cmp	r3, #3
  404234:	d119      	bne.n	40426a <udd_ctrl_in_sent+0x42>
		// Ack
		udd_ack_in_sent(0);
  404236:	4b70      	ldr	r3, [pc, #448]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  404238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40423a:	613b      	str	r3, [r7, #16]
  40423c:	693b      	ldr	r3, [r7, #16]
  40423e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404242:	613b      	str	r3, [r7, #16]
  404244:	693b      	ldr	r3, [r7, #16]
  404246:	f023 0301 	bic.w	r3, r3, #1
  40424a:	613b      	str	r3, [r7, #16]
  40424c:	4a6a      	ldr	r2, [pc, #424]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  40424e:	693b      	ldr	r3, [r7, #16]
  404250:	6313      	str	r3, [r2, #48]	; 0x30
  404252:	bf00      	nop
  404254:	4b68      	ldr	r3, [pc, #416]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  404256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404258:	f003 0301 	and.w	r3, r3, #1
  40425c:	2b00      	cmp	r3, #0
  40425e:	d1f9      	bne.n	404254 <udd_ctrl_in_sent+0x2c>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
  404260:	4b66      	ldr	r3, [pc, #408]	; (4043fc <udd_ctrl_in_sent+0x1d4>)
  404262:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
  404264:	4b66      	ldr	r3, [pc, #408]	; (404400 <udd_ctrl_in_sent+0x1d8>)
  404266:	4798      	blx	r3
		return;
  404268:	e0c1      	b.n	4043ee <udd_ctrl_in_sent+0x1c6>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
  40426a:	4b66      	ldr	r3, [pc, #408]	; (404404 <udd_ctrl_in_sent+0x1dc>)
  40426c:	899a      	ldrh	r2, [r3, #12]
  40426e:	4b66      	ldr	r3, [pc, #408]	; (404408 <udd_ctrl_in_sent+0x1e0>)
  404270:	881b      	ldrh	r3, [r3, #0]
  404272:	1ad3      	subs	r3, r2, r3
  404274:	83fb      	strh	r3, [r7, #30]
	if (0 == nb_remain) {
  404276:	8bfb      	ldrh	r3, [r7, #30]
  404278:	2b00      	cmp	r3, #0
  40427a:	d13c      	bne.n	4042f6 <udd_ctrl_in_sent+0xce>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  40427c:	4b63      	ldr	r3, [pc, #396]	; (40440c <udd_ctrl_in_sent+0x1e4>)
  40427e:	881a      	ldrh	r2, [r3, #0]
  404280:	4b61      	ldr	r3, [pc, #388]	; (404408 <udd_ctrl_in_sent+0x1e0>)
  404282:	881b      	ldrh	r3, [r3, #0]
  404284:	4413      	add	r3, r2
  404286:	b29a      	uxth	r2, r3
  404288:	4b60      	ldr	r3, [pc, #384]	; (40440c <udd_ctrl_in_sent+0x1e4>)
  40428a:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
  40428c:	4b5d      	ldr	r3, [pc, #372]	; (404404 <udd_ctrl_in_sent+0x1dc>)
  40428e:	88da      	ldrh	r2, [r3, #6]
  404290:	4b5e      	ldr	r3, [pc, #376]	; (40440c <udd_ctrl_in_sent+0x1e4>)
  404292:	881b      	ldrh	r3, [r3, #0]
  404294:	429a      	cmp	r2, r3
  404296:	d003      	beq.n	4042a0 <udd_ctrl_in_sent+0x78>
				|| b_shortpacket) {
  404298:	4b5d      	ldr	r3, [pc, #372]	; (404410 <udd_ctrl_in_sent+0x1e8>)
  40429a:	781b      	ldrb	r3, [r3, #0]
  40429c:	2b00      	cmp	r3, #0
  40429e:	d017      	beq.n	4042d0 <udd_ctrl_in_sent+0xa8>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
  4042a0:	4b5c      	ldr	r3, [pc, #368]	; (404414 <udd_ctrl_in_sent+0x1ec>)
  4042a2:	4798      	blx	r3
			udd_ack_in_sent(0);
  4042a4:	4b54      	ldr	r3, [pc, #336]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  4042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4042a8:	60fb      	str	r3, [r7, #12]
  4042aa:	68fb      	ldr	r3, [r7, #12]
  4042ac:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4042b0:	60fb      	str	r3, [r7, #12]
  4042b2:	68fb      	ldr	r3, [r7, #12]
  4042b4:	f023 0301 	bic.w	r3, r3, #1
  4042b8:	60fb      	str	r3, [r7, #12]
  4042ba:	4a4f      	ldr	r2, [pc, #316]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  4042bc:	68fb      	ldr	r3, [r7, #12]
  4042be:	6313      	str	r3, [r2, #48]	; 0x30
  4042c0:	bf00      	nop
  4042c2:	4b4d      	ldr	r3, [pc, #308]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  4042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4042c6:	f003 0301 	and.w	r3, r3, #1
  4042ca:	2b00      	cmp	r3, #0
  4042cc:	d1f9      	bne.n	4042c2 <udd_ctrl_in_sent+0x9a>
			return;
  4042ce:	e08e      	b.n	4043ee <udd_ctrl_in_sent+0x1c6>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
  4042d0:	4b4c      	ldr	r3, [pc, #304]	; (404404 <udd_ctrl_in_sent+0x1dc>)
  4042d2:	695b      	ldr	r3, [r3, #20]
  4042d4:	2b00      	cmp	r3, #0
  4042d6:	d00e      	beq.n	4042f6 <udd_ctrl_in_sent+0xce>
				|| (!udd_g_ctrlreq.over_under_run())) {
  4042d8:	4b4a      	ldr	r3, [pc, #296]	; (404404 <udd_ctrl_in_sent+0x1dc>)
  4042da:	695b      	ldr	r3, [r3, #20]
  4042dc:	4798      	blx	r3
  4042de:	4603      	mov	r3, r0
  4042e0:	f083 0301 	eor.w	r3, r3, #1
  4042e4:	b2db      	uxtb	r3, r3
  4042e6:	2b00      	cmp	r3, #0
  4042e8:	d105      	bne.n	4042f6 <udd_ctrl_in_sent+0xce>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
  4042ea:	4b47      	ldr	r3, [pc, #284]	; (404408 <udd_ctrl_in_sent+0x1e0>)
  4042ec:	2200      	movs	r2, #0
  4042ee:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
  4042f0:	4b44      	ldr	r3, [pc, #272]	; (404404 <udd_ctrl_in_sent+0x1dc>)
  4042f2:	899b      	ldrh	r3, [r3, #12]
  4042f4:	83fb      	strh	r3, [r7, #30]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
  4042f6:	8bfb      	ldrh	r3, [r7, #30]
  4042f8:	2b3f      	cmp	r3, #63	; 0x3f
  4042fa:	d905      	bls.n	404308 <udd_ctrl_in_sent+0xe0>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
  4042fc:	2340      	movs	r3, #64	; 0x40
  4042fe:	83fb      	strh	r3, [r7, #30]
		b_shortpacket = false;
  404300:	4b43      	ldr	r3, [pc, #268]	; (404410 <udd_ctrl_in_sent+0x1e8>)
  404302:	2200      	movs	r2, #0
  404304:	701a      	strb	r2, [r3, #0]
  404306:	e002      	b.n	40430e <udd_ctrl_in_sent+0xe6>
	} else {
		b_shortpacket = true;
  404308:	4b41      	ldr	r3, [pc, #260]	; (404410 <udd_ctrl_in_sent+0x1e8>)
  40430a:	2201      	movs	r2, #1
  40430c:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  40430e:	4b3d      	ldr	r3, [pc, #244]	; (404404 <udd_ctrl_in_sent+0x1dc>)
  404310:	689b      	ldr	r3, [r3, #8]
  404312:	4a3d      	ldr	r2, [pc, #244]	; (404408 <udd_ctrl_in_sent+0x1e0>)
  404314:	8812      	ldrh	r2, [r2, #0]
  404316:	4413      	add	r3, r2
  404318:	61bb      	str	r3, [r7, #24]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
  40431a:	4b3f      	ldr	r3, [pc, #252]	; (404418 <udd_ctrl_in_sent+0x1f0>)
  40431c:	4798      	blx	r3
  40431e:	6178      	str	r0, [r7, #20]
	if (Is_udd_bank0_received(0)) {
  404320:	4b35      	ldr	r3, [pc, #212]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  404322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404324:	f003 0302 	and.w	r3, r3, #2
  404328:	2b00      	cmp	r3, #0
  40432a:	d01b      	beq.n	404364 <udd_ctrl_in_sent+0x13c>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
  40432c:	6978      	ldr	r0, [r7, #20]
  40432e:	4b3b      	ldr	r3, [pc, #236]	; (40441c <udd_ctrl_in_sent+0x1f4>)
  404330:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  404332:	4b30      	ldr	r3, [pc, #192]	; (4043f4 <udd_ctrl_in_sent+0x1cc>)
  404334:	2204      	movs	r2, #4
  404336:	701a      	strb	r2, [r3, #0]
		udd_ack_in_sent(0);
  404338:	4b2f      	ldr	r3, [pc, #188]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  40433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40433c:	60bb      	str	r3, [r7, #8]
  40433e:	68bb      	ldr	r3, [r7, #8]
  404340:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404344:	60bb      	str	r3, [r7, #8]
  404346:	68bb      	ldr	r3, [r7, #8]
  404348:	f023 0301 	bic.w	r3, r3, #1
  40434c:	60bb      	str	r3, [r7, #8]
  40434e:	4a2a      	ldr	r2, [pc, #168]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  404350:	68bb      	ldr	r3, [r7, #8]
  404352:	6313      	str	r3, [r2, #48]	; 0x30
  404354:	bf00      	nop
  404356:	4b28      	ldr	r3, [pc, #160]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  404358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40435a:	f003 0301 	and.w	r3, r3, #1
  40435e:	2b00      	cmp	r3, #0
  404360:	d1f9      	bne.n	404356 <udd_ctrl_in_sent+0x12e>
		return; // Exit of IN DATA phase
  404362:	e044      	b.n	4043ee <udd_ctrl_in_sent+0x1c6>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
  404364:	2300      	movs	r3, #0
  404366:	777b      	strb	r3, [r7, #29]
  404368:	e008      	b.n	40437c <udd_ctrl_in_sent+0x154>
		udd_endpoint_fifo_write(0, *ptr_src++);
  40436a:	4923      	ldr	r1, [pc, #140]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  40436c:	69bb      	ldr	r3, [r7, #24]
  40436e:	1c5a      	adds	r2, r3, #1
  404370:	61ba      	str	r2, [r7, #24]
  404372:	781b      	ldrb	r3, [r3, #0]
  404374:	650b      	str	r3, [r1, #80]	; 0x50
	for (i = 0; i < nb_remain; i++) {
  404376:	7f7b      	ldrb	r3, [r7, #29]
  404378:	3301      	adds	r3, #1
  40437a:	777b      	strb	r3, [r7, #29]
  40437c:	7f7b      	ldrb	r3, [r7, #29]
  40437e:	b29b      	uxth	r3, r3
  404380:	8bfa      	ldrh	r2, [r7, #30]
  404382:	429a      	cmp	r2, r3
  404384:	d8f1      	bhi.n	40436a <udd_ctrl_in_sent+0x142>
	}
	udd_ctrl_payload_nb_trans += nb_remain;
  404386:	4b20      	ldr	r3, [pc, #128]	; (404408 <udd_ctrl_in_sent+0x1e0>)
  404388:	881a      	ldrh	r2, [r3, #0]
  40438a:	8bfb      	ldrh	r3, [r7, #30]
  40438c:	4413      	add	r3, r2
  40438e:	b29a      	uxth	r2, r3
  404390:	4b1d      	ldr	r3, [pc, #116]	; (404408 <udd_ctrl_in_sent+0x1e0>)
  404392:	801a      	strh	r2, [r3, #0]
	// Validate and send the data available in the control endpoint buffer
	udd_set_transmit_ready(0);
  404394:	4b18      	ldr	r3, [pc, #96]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  404396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404398:	607b      	str	r3, [r7, #4]
  40439a:	687b      	ldr	r3, [r7, #4]
  40439c:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4043a0:	607b      	str	r3, [r7, #4]
  4043a2:	687b      	ldr	r3, [r7, #4]
  4043a4:	f043 0310 	orr.w	r3, r3, #16
  4043a8:	607b      	str	r3, [r7, #4]
  4043aa:	4a13      	ldr	r2, [pc, #76]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  4043ac:	687b      	ldr	r3, [r7, #4]
  4043ae:	6313      	str	r3, [r2, #48]	; 0x30
  4043b0:	bf00      	nop
  4043b2:	4b11      	ldr	r3, [pc, #68]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  4043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4043b6:	f003 0310 	and.w	r3, r3, #16
  4043ba:	2b10      	cmp	r3, #16
  4043bc:	d1f9      	bne.n	4043b2 <udd_ctrl_in_sent+0x18a>
	udd_ack_in_sent(0);
  4043be:	4b0e      	ldr	r3, [pc, #56]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  4043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4043c2:	603b      	str	r3, [r7, #0]
  4043c4:	683b      	ldr	r3, [r7, #0]
  4043c6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4043ca:	603b      	str	r3, [r7, #0]
  4043cc:	683b      	ldr	r3, [r7, #0]
  4043ce:	f023 0301 	bic.w	r3, r3, #1
  4043d2:	603b      	str	r3, [r7, #0]
  4043d4:	4a08      	ldr	r2, [pc, #32]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  4043d6:	683b      	ldr	r3, [r7, #0]
  4043d8:	6313      	str	r3, [r2, #48]	; 0x30
  4043da:	bf00      	nop
  4043dc:	4b06      	ldr	r3, [pc, #24]	; (4043f8 <udd_ctrl_in_sent+0x1d0>)
  4043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4043e0:	f003 0301 	and.w	r3, r3, #1
  4043e4:	2b00      	cmp	r3, #0
  4043e6:	d1f9      	bne.n	4043dc <udd_ctrl_in_sent+0x1b4>

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
  4043e8:	6978      	ldr	r0, [r7, #20]
  4043ea:	4b0c      	ldr	r3, [pc, #48]	; (40441c <udd_ctrl_in_sent+0x1f4>)
  4043ec:	4798      	blx	r3
}
  4043ee:	3720      	adds	r7, #32
  4043f0:	46bd      	mov	sp, r7
  4043f2:	bd80      	pop	{r7, pc}
  4043f4:	20006615 	.word	0x20006615
  4043f8:	40084000 	.word	0x40084000
  4043fc:	00404725 	.word	0x00404725
  404400:	00404039 	.word	0x00404039
  404404:	2000a748 	.word	0x2000a748
  404408:	20006618 	.word	0x20006618
  40440c:	20006616 	.word	0x20006616
  404410:	20006644 	.word	0x20006644
  404414:	0040470d 	.word	0x0040470d
  404418:	0040316d 	.word	0x0040316d
  40441c:	004031c5 	.word	0x004031c5

00404420 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
  404420:	b580      	push	{r7, lr}
  404422:	b088      	sub	sp, #32
  404424:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
  404426:	4b8a      	ldr	r3, [pc, #552]	; (404650 <udd_ctrl_out_received+0x230>)
  404428:	781b      	ldrb	r3, [r3, #0]
  40442a:	2b01      	cmp	r3, #1
  40442c:	d024      	beq.n	404478 <udd_ctrl_out_received+0x58>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
  40442e:	4b88      	ldr	r3, [pc, #544]	; (404650 <udd_ctrl_out_received+0x230>)
  404430:	781b      	ldrb	r3, [r3, #0]
  404432:	2b02      	cmp	r3, #2
  404434:	d003      	beq.n	40443e <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
  404436:	4b86      	ldr	r3, [pc, #536]	; (404650 <udd_ctrl_out_received+0x230>)
  404438:	781b      	ldrb	r3, [r3, #0]
  40443a:	2b04      	cmp	r3, #4
  40443c:	d102      	bne.n	404444 <udd_ctrl_out_received+0x24>
				udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
  40443e:	4b85      	ldr	r3, [pc, #532]	; (404654 <udd_ctrl_out_received+0x234>)
  404440:	4798      	blx	r3
  404442:	e001      	b.n	404448 <udd_ctrl_out_received+0x28>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
  404444:	4b84      	ldr	r3, [pc, #528]	; (404658 <udd_ctrl_out_received+0x238>)
  404446:	4798      	blx	r3
		}
		udd_ack_bank0_received(0);
  404448:	4b84      	ldr	r3, [pc, #528]	; (40465c <udd_ctrl_out_received+0x23c>)
  40444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40444c:	617b      	str	r3, [r7, #20]
  40444e:	697b      	ldr	r3, [r7, #20]
  404450:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404454:	617b      	str	r3, [r7, #20]
  404456:	697b      	ldr	r3, [r7, #20]
  404458:	f023 0302 	bic.w	r3, r3, #2
  40445c:	617b      	str	r3, [r7, #20]
  40445e:	4a7f      	ldr	r2, [pc, #508]	; (40465c <udd_ctrl_out_received+0x23c>)
  404460:	697b      	ldr	r3, [r7, #20]
  404462:	6313      	str	r3, [r2, #48]	; 0x30
  404464:	bf00      	nop
  404466:	4b7d      	ldr	r3, [pc, #500]	; (40465c <udd_ctrl_out_received+0x23c>)
  404468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40446a:	f003 0302 	and.w	r3, r3, #2
  40446e:	2b00      	cmp	r3, #0
  404470:	d1f9      	bne.n	404466 <udd_ctrl_out_received+0x46>
		// Reinitializes control endpoint management
		udd_ctrl_init();
  404472:	4b7b      	ldr	r3, [pc, #492]	; (404660 <udd_ctrl_out_received+0x240>)
  404474:	4798      	blx	r3
		return;
  404476:	e0e7      	b.n	404648 <udd_ctrl_out_received+0x228>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
  404478:	4b78      	ldr	r3, [pc, #480]	; (40465c <udd_ctrl_out_received+0x23c>)
  40447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40447c:	0c1b      	lsrs	r3, r3, #16
  40447e:	b29b      	uxth	r3, r3
  404480:	f3c3 030a 	ubfx	r3, r3, #0, #11
  404484:	83bb      	strh	r3, [r7, #28]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
  404486:	4b77      	ldr	r3, [pc, #476]	; (404664 <udd_ctrl_out_received+0x244>)
  404488:	899b      	ldrh	r3, [r3, #12]
  40448a:	461a      	mov	r2, r3
  40448c:	4b76      	ldr	r3, [pc, #472]	; (404668 <udd_ctrl_out_received+0x248>)
  40448e:	881b      	ldrh	r3, [r3, #0]
  404490:	4619      	mov	r1, r3
  404492:	8bbb      	ldrh	r3, [r7, #28]
  404494:	440b      	add	r3, r1
  404496:	429a      	cmp	r2, r3
  404498:	da05      	bge.n	4044a6 <udd_ctrl_out_received+0x86>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
  40449a:	4b72      	ldr	r3, [pc, #456]	; (404664 <udd_ctrl_out_received+0x244>)
  40449c:	899a      	ldrh	r2, [r3, #12]
  40449e:	4b72      	ldr	r3, [pc, #456]	; (404668 <udd_ctrl_out_received+0x248>)
  4044a0:	881b      	ldrh	r3, [r3, #0]
  4044a2:	1ad3      	subs	r3, r2, r3
  4044a4:	83bb      	strh	r3, [r7, #28]
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
  4044a6:	4b6f      	ldr	r3, [pc, #444]	; (404664 <udd_ctrl_out_received+0x244>)
  4044a8:	689b      	ldr	r3, [r3, #8]
  4044aa:	4a6f      	ldr	r2, [pc, #444]	; (404668 <udd_ctrl_out_received+0x248>)
  4044ac:	8812      	ldrh	r2, [r2, #0]
  4044ae:	4413      	add	r3, r2
  4044b0:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < nb_data; i++) {
  4044b2:	2300      	movs	r3, #0
  4044b4:	77fb      	strb	r3, [r7, #31]
  4044b6:	e009      	b.n	4044cc <udd_ctrl_out_received+0xac>
		*ptr_dest++ = udd_endpoint_fifo_read(0);
  4044b8:	69bb      	ldr	r3, [r7, #24]
  4044ba:	1c5a      	adds	r2, r3, #1
  4044bc:	61ba      	str	r2, [r7, #24]
  4044be:	4a67      	ldr	r2, [pc, #412]	; (40465c <udd_ctrl_out_received+0x23c>)
  4044c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
  4044c2:	b2d2      	uxtb	r2, r2
  4044c4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
  4044c6:	7ffb      	ldrb	r3, [r7, #31]
  4044c8:	3301      	adds	r3, #1
  4044ca:	77fb      	strb	r3, [r7, #31]
  4044cc:	7ffb      	ldrb	r3, [r7, #31]
  4044ce:	b29b      	uxth	r3, r3
  4044d0:	8bba      	ldrh	r2, [r7, #28]
  4044d2:	429a      	cmp	r2, r3
  4044d4:	d8f0      	bhi.n	4044b8 <udd_ctrl_out_received+0x98>
	}
	udd_ctrl_payload_nb_trans += nb_data;
  4044d6:	4b64      	ldr	r3, [pc, #400]	; (404668 <udd_ctrl_out_received+0x248>)
  4044d8:	881a      	ldrh	r2, [r3, #0]
  4044da:	8bbb      	ldrh	r3, [r7, #28]
  4044dc:	4413      	add	r3, r2
  4044de:	b29a      	uxth	r2, r3
  4044e0:	4b61      	ldr	r3, [pc, #388]	; (404668 <udd_ctrl_out_received+0x248>)
  4044e2:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
  4044e4:	8bbb      	ldrh	r3, [r7, #28]
  4044e6:	2b40      	cmp	r3, #64	; 0x40
  4044e8:	d10a      	bne.n	404500 <udd_ctrl_out_received+0xe0>
			|| (udd_g_ctrlreq.req.wLength <=
  4044ea:	4b5e      	ldr	r3, [pc, #376]	; (404664 <udd_ctrl_out_received+0x244>)
  4044ec:	88db      	ldrh	r3, [r3, #6]
  4044ee:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_nb_trans +
  4044f0:	4b5e      	ldr	r3, [pc, #376]	; (40466c <udd_ctrl_out_received+0x24c>)
  4044f2:	881b      	ldrh	r3, [r3, #0]
  4044f4:	4619      	mov	r1, r3
  4044f6:	4b5c      	ldr	r3, [pc, #368]	; (404668 <udd_ctrl_out_received+0x248>)
  4044f8:	881b      	ldrh	r3, [r3, #0]
  4044fa:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
  4044fc:	429a      	cmp	r2, r3
  4044fe:	dc40      	bgt.n	404582 <udd_ctrl_out_received+0x162>
			udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
  404500:	4b59      	ldr	r3, [pc, #356]	; (404668 <udd_ctrl_out_received+0x248>)
  404502:	881a      	ldrh	r2, [r3, #0]
  404504:	4b57      	ldr	r3, [pc, #348]	; (404664 <udd_ctrl_out_received+0x244>)
  404506:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
  404508:	4b56      	ldr	r3, [pc, #344]	; (404664 <udd_ctrl_out_received+0x244>)
  40450a:	695b      	ldr	r3, [r3, #20]
  40450c:	2b00      	cmp	r3, #0
  40450e:	d020      	beq.n	404552 <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
  404510:	4b54      	ldr	r3, [pc, #336]	; (404664 <udd_ctrl_out_received+0x244>)
  404512:	695b      	ldr	r3, [r3, #20]
  404514:	4798      	blx	r3
  404516:	4603      	mov	r3, r0
  404518:	f083 0301 	eor.w	r3, r3, #1
  40451c:	b2db      	uxtb	r3, r3
  40451e:	2b00      	cmp	r3, #0
  404520:	d017      	beq.n	404552 <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
  404522:	4b4d      	ldr	r3, [pc, #308]	; (404658 <udd_ctrl_out_received+0x238>)
  404524:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_bank0_received(0);
  404526:	4b4d      	ldr	r3, [pc, #308]	; (40465c <udd_ctrl_out_received+0x23c>)
  404528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40452a:	613b      	str	r3, [r7, #16]
  40452c:	693b      	ldr	r3, [r7, #16]
  40452e:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404532:	613b      	str	r3, [r7, #16]
  404534:	693b      	ldr	r3, [r7, #16]
  404536:	f023 0302 	bic.w	r3, r3, #2
  40453a:	613b      	str	r3, [r7, #16]
  40453c:	4a47      	ldr	r2, [pc, #284]	; (40465c <udd_ctrl_out_received+0x23c>)
  40453e:	693b      	ldr	r3, [r7, #16]
  404540:	6313      	str	r3, [r2, #48]	; 0x30
  404542:	bf00      	nop
  404544:	4b45      	ldr	r3, [pc, #276]	; (40465c <udd_ctrl_out_received+0x23c>)
  404546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404548:	f003 0302 	and.w	r3, r3, #2
  40454c:	2b00      	cmp	r3, #0
  40454e:	d1f9      	bne.n	404544 <udd_ctrl_out_received+0x124>
				return;
  404550:	e07a      	b.n	404648 <udd_ctrl_out_received+0x228>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_bank0_received(0);
  404552:	4b42      	ldr	r3, [pc, #264]	; (40465c <udd_ctrl_out_received+0x23c>)
  404554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404556:	60fb      	str	r3, [r7, #12]
  404558:	68fb      	ldr	r3, [r7, #12]
  40455a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40455e:	60fb      	str	r3, [r7, #12]
  404560:	68fb      	ldr	r3, [r7, #12]
  404562:	f023 0302 	bic.w	r3, r3, #2
  404566:	60fb      	str	r3, [r7, #12]
  404568:	4a3c      	ldr	r2, [pc, #240]	; (40465c <udd_ctrl_out_received+0x23c>)
  40456a:	68fb      	ldr	r3, [r7, #12]
  40456c:	6313      	str	r3, [r2, #48]	; 0x30
  40456e:	bf00      	nop
  404570:	4b3a      	ldr	r3, [pc, #232]	; (40465c <udd_ctrl_out_received+0x23c>)
  404572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404574:	f003 0302 	and.w	r3, r3, #2
  404578:	2b00      	cmp	r3, #0
  40457a:	d1f9      	bne.n	404570 <udd_ctrl_out_received+0x150>
		udd_ctrl_send_zlp_in();
  40457c:	4b3c      	ldr	r3, [pc, #240]	; (404670 <udd_ctrl_out_received+0x250>)
  40457e:	4798      	blx	r3
		return;
  404580:	e062      	b.n	404648 <udd_ctrl_out_received+0x228>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
  404582:	4b38      	ldr	r3, [pc, #224]	; (404664 <udd_ctrl_out_received+0x244>)
  404584:	899a      	ldrh	r2, [r3, #12]
  404586:	4b38      	ldr	r3, [pc, #224]	; (404668 <udd_ctrl_out_received+0x248>)
  404588:	881b      	ldrh	r3, [r3, #0]
  40458a:	429a      	cmp	r2, r3
  40458c:	d147      	bne.n	40461e <udd_ctrl_out_received+0x1fe>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
  40458e:	4b35      	ldr	r3, [pc, #212]	; (404664 <udd_ctrl_out_received+0x244>)
  404590:	695b      	ldr	r3, [r3, #20]
  404592:	2b00      	cmp	r3, #0
  404594:	d117      	bne.n	4045c6 <udd_ctrl_out_received+0x1a6>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
  404596:	4b30      	ldr	r3, [pc, #192]	; (404658 <udd_ctrl_out_received+0x238>)
  404598:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  40459a:	4b30      	ldr	r3, [pc, #192]	; (40465c <udd_ctrl_out_received+0x23c>)
  40459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40459e:	60bb      	str	r3, [r7, #8]
  4045a0:	68bb      	ldr	r3, [r7, #8]
  4045a2:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4045a6:	60bb      	str	r3, [r7, #8]
  4045a8:	68bb      	ldr	r3, [r7, #8]
  4045aa:	f023 0302 	bic.w	r3, r3, #2
  4045ae:	60bb      	str	r3, [r7, #8]
  4045b0:	4a2a      	ldr	r2, [pc, #168]	; (40465c <udd_ctrl_out_received+0x23c>)
  4045b2:	68bb      	ldr	r3, [r7, #8]
  4045b4:	6313      	str	r3, [r2, #48]	; 0x30
  4045b6:	bf00      	nop
  4045b8:	4b28      	ldr	r3, [pc, #160]	; (40465c <udd_ctrl_out_received+0x23c>)
  4045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4045bc:	f003 0302 	and.w	r3, r3, #2
  4045c0:	2b00      	cmp	r3, #0
  4045c2:	d1f9      	bne.n	4045b8 <udd_ctrl_out_received+0x198>
			return;
  4045c4:	e040      	b.n	404648 <udd_ctrl_out_received+0x228>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
  4045c6:	4b27      	ldr	r3, [pc, #156]	; (404664 <udd_ctrl_out_received+0x244>)
  4045c8:	695b      	ldr	r3, [r3, #20]
  4045ca:	4798      	blx	r3
  4045cc:	4603      	mov	r3, r0
  4045ce:	f083 0301 	eor.w	r3, r3, #1
  4045d2:	b2db      	uxtb	r3, r3
  4045d4:	2b00      	cmp	r3, #0
  4045d6:	d017      	beq.n	404608 <udd_ctrl_out_received+0x1e8>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
  4045d8:	4b1f      	ldr	r3, [pc, #124]	; (404658 <udd_ctrl_out_received+0x238>)
  4045da:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_bank0_received(0);
  4045dc:	4b1f      	ldr	r3, [pc, #124]	; (40465c <udd_ctrl_out_received+0x23c>)
  4045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4045e0:	607b      	str	r3, [r7, #4]
  4045e2:	687b      	ldr	r3, [r7, #4]
  4045e4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4045e8:	607b      	str	r3, [r7, #4]
  4045ea:	687b      	ldr	r3, [r7, #4]
  4045ec:	f023 0302 	bic.w	r3, r3, #2
  4045f0:	607b      	str	r3, [r7, #4]
  4045f2:	4a1a      	ldr	r2, [pc, #104]	; (40465c <udd_ctrl_out_received+0x23c>)
  4045f4:	687b      	ldr	r3, [r7, #4]
  4045f6:	6313      	str	r3, [r2, #48]	; 0x30
  4045f8:	bf00      	nop
  4045fa:	4b18      	ldr	r3, [pc, #96]	; (40465c <udd_ctrl_out_received+0x23c>)
  4045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4045fe:	f003 0302 	and.w	r3, r3, #2
  404602:	2b00      	cmp	r3, #0
  404604:	d1f9      	bne.n	4045fa <udd_ctrl_out_received+0x1da>
			return;
  404606:	e01f      	b.n	404648 <udd_ctrl_out_received+0x228>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
  404608:	4b18      	ldr	r3, [pc, #96]	; (40466c <udd_ctrl_out_received+0x24c>)
  40460a:	881a      	ldrh	r2, [r3, #0]
  40460c:	4b16      	ldr	r3, [pc, #88]	; (404668 <udd_ctrl_out_received+0x248>)
  40460e:	881b      	ldrh	r3, [r3, #0]
  404610:	4413      	add	r3, r2
  404612:	b29a      	uxth	r2, r3
  404614:	4b15      	ldr	r3, [pc, #84]	; (40466c <udd_ctrl_out_received+0x24c>)
  404616:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
  404618:	4b13      	ldr	r3, [pc, #76]	; (404668 <udd_ctrl_out_received+0x248>)
  40461a:	2200      	movs	r2, #0
  40461c:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_bank0_received(0);
  40461e:	4b0f      	ldr	r3, [pc, #60]	; (40465c <udd_ctrl_out_received+0x23c>)
  404620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404622:	603b      	str	r3, [r7, #0]
  404624:	683b      	ldr	r3, [r7, #0]
  404626:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40462a:	603b      	str	r3, [r7, #0]
  40462c:	683b      	ldr	r3, [r7, #0]
  40462e:	f023 0302 	bic.w	r3, r3, #2
  404632:	603b      	str	r3, [r7, #0]
  404634:	4a09      	ldr	r2, [pc, #36]	; (40465c <udd_ctrl_out_received+0x23c>)
  404636:	683b      	ldr	r3, [r7, #0]
  404638:	6313      	str	r3, [r2, #48]	; 0x30
  40463a:	bf00      	nop
  40463c:	4b07      	ldr	r3, [pc, #28]	; (40465c <udd_ctrl_out_received+0x23c>)
  40463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404640:	f003 0302 	and.w	r3, r3, #2
  404644:	2b00      	cmp	r3, #0
  404646:	d1f9      	bne.n	40463c <udd_ctrl_out_received+0x21c>
}
  404648:	3720      	adds	r7, #32
  40464a:	46bd      	mov	sp, r7
  40464c:	bd80      	pop	{r7, pc}
  40464e:	bf00      	nop
  404650:	20006615 	.word	0x20006615
  404654:	00404725 	.word	0x00404725
  404658:	00404675 	.word	0x00404675
  40465c:	40084000 	.word	0x40084000
  404660:	00404039 	.word	0x00404039
  404664:	2000a748 	.word	0x2000a748
  404668:	20006618 	.word	0x20006618
  40466c:	20006616 	.word	0x20006616
  404670:	004046c1 	.word	0x004046c1

00404674 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
  404674:	b480      	push	{r7}
  404676:	b083      	sub	sp, #12
  404678:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
  40467a:	4b0f      	ldr	r3, [pc, #60]	; (4046b8 <udd_ctrl_stall_data+0x44>)
  40467c:	2205      	movs	r2, #5
  40467e:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
  404680:	4b0e      	ldr	r3, [pc, #56]	; (4046bc <udd_ctrl_stall_data+0x48>)
  404682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404684:	607b      	str	r3, [r7, #4]
  404686:	687b      	ldr	r3, [r7, #4]
  404688:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40468c:	607b      	str	r3, [r7, #4]
  40468e:	687b      	ldr	r3, [r7, #4]
  404690:	f043 0320 	orr.w	r3, r3, #32
  404694:	607b      	str	r3, [r7, #4]
  404696:	4a09      	ldr	r2, [pc, #36]	; (4046bc <udd_ctrl_stall_data+0x48>)
  404698:	687b      	ldr	r3, [r7, #4]
  40469a:	6313      	str	r3, [r2, #48]	; 0x30
  40469c:	bf00      	nop
  40469e:	4b07      	ldr	r3, [pc, #28]	; (4046bc <udd_ctrl_stall_data+0x48>)
  4046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4046a2:	f003 0320 	and.w	r3, r3, #32
  4046a6:	2b20      	cmp	r3, #32
  4046a8:	d1f9      	bne.n	40469e <udd_ctrl_stall_data+0x2a>
}
  4046aa:	bf00      	nop
  4046ac:	370c      	adds	r7, #12
  4046ae:	46bd      	mov	sp, r7
  4046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4046b4:	4770      	bx	lr
  4046b6:	bf00      	nop
  4046b8:	20006615 	.word	0x20006615
  4046bc:	40084000 	.word	0x40084000

004046c0 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
  4046c0:	b480      	push	{r7}
  4046c2:	b083      	sub	sp, #12
  4046c4:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
  4046c6:	4b0f      	ldr	r3, [pc, #60]	; (404704 <udd_ctrl_send_zlp_in+0x44>)
  4046c8:	2203      	movs	r2, #3
  4046ca:	701a      	strb	r2, [r3, #0]
	// Validate and send empty IN packet on control endpoint
	// Send ZLP on IN endpoint
	udd_set_transmit_ready(0);
  4046cc:	4b0e      	ldr	r3, [pc, #56]	; (404708 <udd_ctrl_send_zlp_in+0x48>)
  4046ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4046d0:	607b      	str	r3, [r7, #4]
  4046d2:	687b      	ldr	r3, [r7, #4]
  4046d4:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4046d8:	607b      	str	r3, [r7, #4]
  4046da:	687b      	ldr	r3, [r7, #4]
  4046dc:	f043 0310 	orr.w	r3, r3, #16
  4046e0:	607b      	str	r3, [r7, #4]
  4046e2:	4a09      	ldr	r2, [pc, #36]	; (404708 <udd_ctrl_send_zlp_in+0x48>)
  4046e4:	687b      	ldr	r3, [r7, #4]
  4046e6:	6313      	str	r3, [r2, #48]	; 0x30
  4046e8:	bf00      	nop
  4046ea:	4b07      	ldr	r3, [pc, #28]	; (404708 <udd_ctrl_send_zlp_in+0x48>)
  4046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4046ee:	f003 0310 	and.w	r3, r3, #16
  4046f2:	2b10      	cmp	r3, #16
  4046f4:	d1f9      	bne.n	4046ea <udd_ctrl_send_zlp_in+0x2a>
}
  4046f6:	bf00      	nop
  4046f8:	370c      	adds	r7, #12
  4046fa:	46bd      	mov	sp, r7
  4046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
  404700:	4770      	bx	lr
  404702:	bf00      	nop
  404704:	20006615 	.word	0x20006615
  404708:	40084000 	.word	0x40084000

0040470c <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
  40470c:	b480      	push	{r7}
  40470e:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
  404710:	4b03      	ldr	r3, [pc, #12]	; (404720 <udd_ctrl_send_zlp_out+0x14>)
  404712:	2204      	movs	r2, #4
  404714:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free
}
  404716:	bf00      	nop
  404718:	46bd      	mov	sp, r7
  40471a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40471e:	4770      	bx	lr
  404720:	20006615 	.word	0x20006615

00404724 <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
  404724:	b580      	push	{r7, lr}
  404726:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
  404728:	4b04      	ldr	r3, [pc, #16]	; (40473c <udd_ctrl_endofrequest+0x18>)
  40472a:	691b      	ldr	r3, [r3, #16]
  40472c:	2b00      	cmp	r3, #0
  40472e:	d002      	beq.n	404736 <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
  404730:	4b02      	ldr	r3, [pc, #8]	; (40473c <udd_ctrl_endofrequest+0x18>)
  404732:	691b      	ldr	r3, [r3, #16]
  404734:	4798      	blx	r3
	}
}
  404736:	bf00      	nop
  404738:	bd80      	pop	{r7, pc}
  40473a:	bf00      	nop
  40473c:	2000a748 	.word	0x2000a748

00404740 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
  404740:	b580      	push	{r7, lr}
  404742:	b082      	sub	sp, #8
  404744:	af00      	add	r7, sp, #0
	if (!Is_udd_endpoint_interrupt(0))
  404746:	4b24      	ldr	r3, [pc, #144]	; (4047d8 <udd_ctrl_interrupt+0x98>)
  404748:	69db      	ldr	r3, [r3, #28]
  40474a:	f003 0301 	and.w	r3, r3, #1
  40474e:	2b00      	cmp	r3, #0
  404750:	d101      	bne.n	404756 <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
  404752:	2300      	movs	r3, #0
  404754:	e03b      	b.n	4047ce <udd_ctrl_interrupt+0x8e>

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
  404756:	4b20      	ldr	r3, [pc, #128]	; (4047d8 <udd_ctrl_interrupt+0x98>)
  404758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40475a:	f003 0304 	and.w	r3, r3, #4
  40475e:	2b00      	cmp	r3, #0
  404760:	d003      	beq.n	40476a <udd_ctrl_interrupt+0x2a>
		// SETUP packet received
		udd_ctrl_setup_received();
  404762:	4b1e      	ldr	r3, [pc, #120]	; (4047dc <udd_ctrl_interrupt+0x9c>)
  404764:	4798      	blx	r3
		return true;
  404766:	2301      	movs	r3, #1
  404768:	e031      	b.n	4047ce <udd_ctrl_interrupt+0x8e>
	}
	if (Is_udd_in_sent(0)) {
  40476a:	4b1b      	ldr	r3, [pc, #108]	; (4047d8 <udd_ctrl_interrupt+0x98>)
  40476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40476e:	f003 0301 	and.w	r3, r3, #1
  404772:	2b00      	cmp	r3, #0
  404774:	d003      	beq.n	40477e <udd_ctrl_interrupt+0x3e>
		// IN packet sent
		udd_ctrl_in_sent();
  404776:	4b1a      	ldr	r3, [pc, #104]	; (4047e0 <udd_ctrl_interrupt+0xa0>)
  404778:	4798      	blx	r3
		return true;
  40477a:	2301      	movs	r3, #1
  40477c:	e027      	b.n	4047ce <udd_ctrl_interrupt+0x8e>
	}
	if (Is_udd_bank0_received(0)) {
  40477e:	4b16      	ldr	r3, [pc, #88]	; (4047d8 <udd_ctrl_interrupt+0x98>)
  404780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404782:	f003 0302 	and.w	r3, r3, #2
  404786:	2b00      	cmp	r3, #0
  404788:	d003      	beq.n	404792 <udd_ctrl_interrupt+0x52>
		// OUT packet received
		udd_ctrl_out_received();
  40478a:	4b16      	ldr	r3, [pc, #88]	; (4047e4 <udd_ctrl_interrupt+0xa4>)
  40478c:	4798      	blx	r3
		return true;
  40478e:	2301      	movs	r3, #1
  404790:	e01d      	b.n	4047ce <udd_ctrl_interrupt+0x8e>
	}
	if (Is_udd_stall(0)) {
  404792:	4b11      	ldr	r3, [pc, #68]	; (4047d8 <udd_ctrl_interrupt+0x98>)
  404794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  404796:	f003 0308 	and.w	r3, r3, #8
  40479a:	2b00      	cmp	r3, #0
  40479c:	d016      	beq.n	4047cc <udd_ctrl_interrupt+0x8c>
		// STALLed
		udd_ack_stall(0);
  40479e:	4b0e      	ldr	r3, [pc, #56]	; (4047d8 <udd_ctrl_interrupt+0x98>)
  4047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4047a2:	607b      	str	r3, [r7, #4]
  4047a4:	687b      	ldr	r3, [r7, #4]
  4047a6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4047aa:	607b      	str	r3, [r7, #4]
  4047ac:	687b      	ldr	r3, [r7, #4]
  4047ae:	f023 0308 	bic.w	r3, r3, #8
  4047b2:	607b      	str	r3, [r7, #4]
  4047b4:	4a08      	ldr	r2, [pc, #32]	; (4047d8 <udd_ctrl_interrupt+0x98>)
  4047b6:	687b      	ldr	r3, [r7, #4]
  4047b8:	6313      	str	r3, [r2, #48]	; 0x30
  4047ba:	bf00      	nop
  4047bc:	4b06      	ldr	r3, [pc, #24]	; (4047d8 <udd_ctrl_interrupt+0x98>)
  4047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4047c0:	f003 0308 	and.w	r3, r3, #8
  4047c4:	2b00      	cmp	r3, #0
  4047c6:	d1f9      	bne.n	4047bc <udd_ctrl_interrupt+0x7c>
		return true;
  4047c8:	2301      	movs	r3, #1
  4047ca:	e000      	b.n	4047ce <udd_ctrl_interrupt+0x8e>
	}
	return false;
  4047cc:	2300      	movs	r3, #0
}
  4047ce:	4618      	mov	r0, r3
  4047d0:	3708      	adds	r7, #8
  4047d2:	46bd      	mov	sp, r7
  4047d4:	bd80      	pop	{r7, pc}
  4047d6:	bf00      	nop
  4047d8:	40084000 	.word	0x40084000
  4047dc:	00404069 	.word	0x00404069
  4047e0:	00404229 	.word	0x00404229
  4047e4:	00404421 	.word	0x00404421

004047e8 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
  4047e8:	b480      	push	{r7}
  4047ea:	b083      	sub	sp, #12
  4047ec:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4047ee:	2300      	movs	r3, #0
  4047f0:	71fb      	strb	r3, [r7, #7]
  4047f2:	e043      	b.n	40487c <udd_ep_job_table_reset+0x94>
		udd_ep_job[i].bank = 0;
  4047f4:	79fa      	ldrb	r2, [r7, #7]
  4047f6:	4926      	ldr	r1, [pc, #152]	; (404890 <udd_ep_job_table_reset+0xa8>)
  4047f8:	4613      	mov	r3, r2
  4047fa:	009b      	lsls	r3, r3, #2
  4047fc:	4413      	add	r3, r2
  4047fe:	009b      	lsls	r3, r3, #2
  404800:	440b      	add	r3, r1
  404802:	f103 0210 	add.w	r2, r3, #16
  404806:	7853      	ldrb	r3, [r2, #1]
  404808:	f36f 0383 	bfc	r3, #2, #2
  40480c:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].busy = false;
  40480e:	79fa      	ldrb	r2, [r7, #7]
  404810:	491f      	ldr	r1, [pc, #124]	; (404890 <udd_ep_job_table_reset+0xa8>)
  404812:	4613      	mov	r3, r2
  404814:	009b      	lsls	r3, r3, #2
  404816:	4413      	add	r3, r2
  404818:	009b      	lsls	r3, r3, #2
  40481a:	440b      	add	r3, r1
  40481c:	f103 0210 	add.w	r2, r3, #16
  404820:	7853      	ldrb	r3, [r2, #1]
  404822:	f36f 1304 	bfc	r3, #4, #1
  404826:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_stall_requested = false;
  404828:	79fa      	ldrb	r2, [r7, #7]
  40482a:	4919      	ldr	r1, [pc, #100]	; (404890 <udd_ep_job_table_reset+0xa8>)
  40482c:	4613      	mov	r3, r2
  40482e:	009b      	lsls	r3, r3, #2
  404830:	4413      	add	r3, r2
  404832:	009b      	lsls	r3, r3, #2
  404834:	440b      	add	r3, r1
  404836:	f103 0210 	add.w	r2, r3, #16
  40483a:	7853      	ldrb	r3, [r2, #1]
  40483c:	f36f 1345 	bfc	r3, #5, #1
  404840:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_shortpacket = false;
  404842:	79fa      	ldrb	r2, [r7, #7]
  404844:	4912      	ldr	r1, [pc, #72]	; (404890 <udd_ep_job_table_reset+0xa8>)
  404846:	4613      	mov	r3, r2
  404848:	009b      	lsls	r3, r3, #2
  40484a:	4413      	add	r3, r2
  40484c:	009b      	lsls	r3, r3, #2
  40484e:	440b      	add	r3, r1
  404850:	f103 0210 	add.w	r2, r3, #16
  404854:	7853      	ldrb	r3, [r2, #1]
  404856:	f36f 1386 	bfc	r3, #6, #1
  40485a:	7053      	strb	r3, [r2, #1]
		udd_ep_job[i].b_buf_end = false;
  40485c:	79fa      	ldrb	r2, [r7, #7]
  40485e:	490c      	ldr	r1, [pc, #48]	; (404890 <udd_ep_job_table_reset+0xa8>)
  404860:	4613      	mov	r3, r2
  404862:	009b      	lsls	r3, r3, #2
  404864:	4413      	add	r3, r2
  404866:	009b      	lsls	r3, r3, #2
  404868:	440b      	add	r3, r1
  40486a:	f103 0210 	add.w	r2, r3, #16
  40486e:	7853      	ldrb	r3, [r2, #1]
  404870:	f36f 13c7 	bfc	r3, #7, #1
  404874:	7053      	strb	r3, [r2, #1]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  404876:	79fb      	ldrb	r3, [r7, #7]
  404878:	3301      	adds	r3, #1
  40487a:	71fb      	strb	r3, [r7, #7]
  40487c:	79fb      	ldrb	r3, [r7, #7]
  40487e:	2b01      	cmp	r3, #1
  404880:	d9b8      	bls.n	4047f4 <udd_ep_job_table_reset+0xc>
	}
}
  404882:	bf00      	nop
  404884:	370c      	adds	r7, #12
  404886:	46bd      	mov	sp, r7
  404888:	f85d 7b04 	ldr.w	r7, [sp], #4
  40488c:	4770      	bx	lr
  40488e:	bf00      	nop
  404890:	2000661c 	.word	0x2000661c

00404894 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
  404894:	b580      	push	{r7, lr}
  404896:	b082      	sub	sp, #8
  404898:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  40489a:	2300      	movs	r3, #0
  40489c:	71fb      	strb	r3, [r7, #7]
  40489e:	e010      	b.n	4048c2 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], UDD_EP_TRANSFER_ABORT, i + 1);
  4048a0:	79fa      	ldrb	r2, [r7, #7]
  4048a2:	4613      	mov	r3, r2
  4048a4:	009b      	lsls	r3, r3, #2
  4048a6:	4413      	add	r3, r2
  4048a8:	009b      	lsls	r3, r3, #2
  4048aa:	4a09      	ldr	r2, [pc, #36]	; (4048d0 <udd_ep_job_table_kill+0x3c>)
  4048ac:	1898      	adds	r0, r3, r2
  4048ae:	79fb      	ldrb	r3, [r7, #7]
  4048b0:	3301      	adds	r3, #1
  4048b2:	b2db      	uxtb	r3, r3
  4048b4:	461a      	mov	r2, r3
  4048b6:	2101      	movs	r1, #1
  4048b8:	4b06      	ldr	r3, [pc, #24]	; (4048d4 <udd_ep_job_table_kill+0x40>)
  4048ba:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
  4048bc:	79fb      	ldrb	r3, [r7, #7]
  4048be:	3301      	adds	r3, #1
  4048c0:	71fb      	strb	r3, [r7, #7]
  4048c2:	79fb      	ldrb	r3, [r7, #7]
  4048c4:	2b01      	cmp	r3, #1
  4048c6:	d9eb      	bls.n	4048a0 <udd_ep_job_table_kill+0xc>
	}
}
  4048c8:	bf00      	nop
  4048ca:	3708      	adds	r7, #8
  4048cc:	46bd      	mov	sp, r7
  4048ce:	bd80      	pop	{r7, pc}
  4048d0:	2000661c 	.word	0x2000661c
  4048d4:	00404915 	.word	0x00404915

004048d8 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
  4048d8:	b580      	push	{r7, lr}
  4048da:	b082      	sub	sp, #8
  4048dc:	af00      	add	r7, sp, #0
  4048de:	4603      	mov	r3, r0
  4048e0:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
  4048e2:	79fb      	ldrb	r3, [r7, #7]
  4048e4:	f003 030f 	and.w	r3, r3, #15
  4048e8:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], UDD_EP_TRANSFER_ABORT, ep);
  4048ea:	79fb      	ldrb	r3, [r7, #7]
  4048ec:	1e5a      	subs	r2, r3, #1
  4048ee:	4613      	mov	r3, r2
  4048f0:	009b      	lsls	r3, r3, #2
  4048f2:	4413      	add	r3, r2
  4048f4:	009b      	lsls	r3, r3, #2
  4048f6:	4a05      	ldr	r2, [pc, #20]	; (40490c <udd_ep_abort_job+0x34>)
  4048f8:	4413      	add	r3, r2
  4048fa:	79fa      	ldrb	r2, [r7, #7]
  4048fc:	2101      	movs	r1, #1
  4048fe:	4618      	mov	r0, r3
  404900:	4b03      	ldr	r3, [pc, #12]	; (404910 <udd_ep_abort_job+0x38>)
  404902:	4798      	blx	r3
}
  404904:	bf00      	nop
  404906:	3708      	adds	r7, #8
  404908:	46bd      	mov	sp, r7
  40490a:	bd80      	pop	{r7, pc}
  40490c:	2000661c 	.word	0x2000661c
  404910:	00404915 	.word	0x00404915

00404914 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, int status,
		uint8_t ep_num)
{
  404914:	b580      	push	{r7, lr}
  404916:	b084      	sub	sp, #16
  404918:	af00      	add	r7, sp, #0
  40491a:	60f8      	str	r0, [r7, #12]
  40491c:	60b9      	str	r1, [r7, #8]
  40491e:	4613      	mov	r3, r2
  404920:	71fb      	strb	r3, [r7, #7]
	if (ptr_job->busy == false) {
  404922:	68fb      	ldr	r3, [r7, #12]
  404924:	7c5b      	ldrb	r3, [r3, #17]
  404926:	f003 0310 	and.w	r3, r3, #16
  40492a:	b2db      	uxtb	r3, r3
  40492c:	2b00      	cmp	r3, #0
  40492e:	d023      	beq.n	404978 <udd_ep_finish_job+0x64>
		return; // No on-going job
	}
	ptr_job->busy = false;
  404930:	68fa      	ldr	r2, [r7, #12]
  404932:	7c53      	ldrb	r3, [r2, #17]
  404934:	f36f 1304 	bfc	r3, #4, #1
  404938:	7453      	strb	r3, [r2, #17]
	if (NULL == ptr_job->call_trans) {
  40493a:	68fb      	ldr	r3, [r7, #12]
  40493c:	681b      	ldr	r3, [r3, #0]
  40493e:	2b00      	cmp	r3, #0
  404940:	d01c      	beq.n	40497c <udd_ep_finish_job+0x68>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_type_in(ep_num)) {
  404942:	4a10      	ldr	r2, [pc, #64]	; (404984 <udd_ep_finish_job+0x70>)
  404944:	79fb      	ldrb	r3, [r7, #7]
  404946:	330c      	adds	r3, #12
  404948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40494c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  404950:	2b00      	cmp	r3, #0
  404952:	d003      	beq.n	40495c <udd_ep_finish_job+0x48>
		ep_num |= USB_EP_DIR_IN;
  404954:	79fb      	ldrb	r3, [r7, #7]
  404956:	f063 037f 	orn	r3, r3, #127	; 0x7f
  40495a:	71fb      	strb	r3, [r7, #7]
	}
	ptr_job->call_trans((status == UDD_EP_TRANSFER_ABORT) ?
  40495c:	68fb      	ldr	r3, [r7, #12]
  40495e:	681b      	ldr	r3, [r3, #0]
  404960:	68ba      	ldr	r2, [r7, #8]
  404962:	2a01      	cmp	r2, #1
  404964:	bf0c      	ite	eq
  404966:	2201      	moveq	r2, #1
  404968:	2200      	movne	r2, #0
  40496a:	b2d2      	uxtb	r2, r2
  40496c:	4610      	mov	r0, r2
  40496e:	68fa      	ldr	r2, [r7, #12]
  404970:	6891      	ldr	r1, [r2, #8]
  404972:	79fa      	ldrb	r2, [r7, #7]
  404974:	4798      	blx	r3
  404976:	e002      	b.n	40497e <udd_ep_finish_job+0x6a>
		return; // No on-going job
  404978:	bf00      	nop
  40497a:	e000      	b.n	40497e <udd_ep_finish_job+0x6a>
		return; // No callback linked to job
  40497c:	bf00      	nop
		UDD_EP_TRANSFER_ABORT : UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
  40497e:	3710      	adds	r7, #16
  404980:	46bd      	mov	sp, r7
  404982:	bd80      	pop	{r7, pc}
  404984:	40084000 	.word	0x40084000

00404988 <udd_ep_ack_out_received>:


static void udd_ep_ack_out_received(udd_ep_id_t ep)
{
  404988:	b480      	push	{r7}
  40498a:	b087      	sub	sp, #28
  40498c:	af00      	add	r7, sp, #0
  40498e:	4603      	mov	r3, r0
  404990:	71fb      	strb	r3, [r7, #7]
	bool bank0_received, bank1_received;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  404992:	79fb      	ldrb	r3, [r7, #7]
  404994:	1e5a      	subs	r2, r3, #1
  404996:	4613      	mov	r3, r2
  404998:	009b      	lsls	r3, r3, #2
  40499a:	4413      	add	r3, r2
  40499c:	009b      	lsls	r3, r3, #2
  40499e:	4a45      	ldr	r2, [pc, #276]	; (404ab4 <udd_ep_ack_out_received+0x12c>)
  4049a0:	4413      	add	r3, r2
  4049a2:	617b      	str	r3, [r7, #20]

	bank0_received = Is_udd_bank0_received(ep);
  4049a4:	4a44      	ldr	r2, [pc, #272]	; (404ab8 <udd_ep_ack_out_received+0x130>)
  4049a6:	79fb      	ldrb	r3, [r7, #7]
  4049a8:	330c      	adds	r3, #12
  4049aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4049ae:	f003 0302 	and.w	r3, r3, #2
  4049b2:	2b00      	cmp	r3, #0
  4049b4:	bf14      	ite	ne
  4049b6:	2301      	movne	r3, #1
  4049b8:	2300      	moveq	r3, #0
  4049ba:	74fb      	strb	r3, [r7, #19]
	bank1_received = Is_udd_bank1_received(ep);
  4049bc:	4a3e      	ldr	r2, [pc, #248]	; (404ab8 <udd_ep_ack_out_received+0x130>)
  4049be:	79fb      	ldrb	r3, [r7, #7]
  4049c0:	330c      	adds	r3, #12
  4049c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  4049ca:	2b00      	cmp	r3, #0
  4049cc:	bf14      	ite	ne
  4049ce:	2301      	movne	r3, #1
  4049d0:	2300      	moveq	r3, #0
  4049d2:	74bb      	strb	r3, [r7, #18]

	if (bank0_received && bank1_received) {
  4049d4:	7cfb      	ldrb	r3, [r7, #19]
  4049d6:	2b00      	cmp	r3, #0
  4049d8:	d002      	beq.n	4049e0 <udd_ep_ack_out_received+0x58>
  4049da:	7cbb      	ldrb	r3, [r7, #18]
  4049dc:	2b00      	cmp	r3, #0
  4049de:	d10e      	bne.n	4049fe <udd_ep_ack_out_received+0x76>
		// The only way is to use ptr_job->bank
	} else if (bank0_received) {
  4049e0:	7cfb      	ldrb	r3, [r7, #19]
  4049e2:	2b00      	cmp	r3, #0
  4049e4:	d005      	beq.n	4049f2 <udd_ep_ack_out_received+0x6a>
		// Must be bank0
		ptr_job->bank = 0;
  4049e6:	697a      	ldr	r2, [r7, #20]
  4049e8:	7c53      	ldrb	r3, [r2, #17]
  4049ea:	f36f 0383 	bfc	r3, #2, #2
  4049ee:	7453      	strb	r3, [r2, #17]
  4049f0:	e005      	b.n	4049fe <udd_ep_ack_out_received+0x76>
	} else {
		// Must be bank1
		ptr_job->bank = 1;
  4049f2:	697a      	ldr	r2, [r7, #20]
  4049f4:	7c53      	ldrb	r3, [r2, #17]
  4049f6:	2101      	movs	r1, #1
  4049f8:	f361 0383 	bfi	r3, r1, #2, #2
  4049fc:	7453      	strb	r3, [r2, #17]
	}
	if (ptr_job->bank == 0) {
  4049fe:	697b      	ldr	r3, [r7, #20]
  404a00:	7c5b      	ldrb	r3, [r3, #17]
  404a02:	f003 030c 	and.w	r3, r3, #12
  404a06:	b2db      	uxtb	r3, r3
  404a08:	2b00      	cmp	r3, #0
  404a0a:	d12a      	bne.n	404a62 <udd_ep_ack_out_received+0xda>
		udd_ack_bank0_received(ep);
  404a0c:	4a2a      	ldr	r2, [pc, #168]	; (404ab8 <udd_ep_ack_out_received+0x130>)
  404a0e:	79fb      	ldrb	r3, [r7, #7]
  404a10:	330c      	adds	r3, #12
  404a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404a16:	60fb      	str	r3, [r7, #12]
  404a18:	68fb      	ldr	r3, [r7, #12]
  404a1a:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404a1e:	60fb      	str	r3, [r7, #12]
  404a20:	68fb      	ldr	r3, [r7, #12]
  404a22:	f023 0302 	bic.w	r3, r3, #2
  404a26:	60fb      	str	r3, [r7, #12]
  404a28:	4923      	ldr	r1, [pc, #140]	; (404ab8 <udd_ep_ack_out_received+0x130>)
  404a2a:	79fb      	ldrb	r3, [r7, #7]
  404a2c:	68fa      	ldr	r2, [r7, #12]
  404a2e:	330c      	adds	r3, #12
  404a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404a34:	bf00      	nop
  404a36:	4a20      	ldr	r2, [pc, #128]	; (404ab8 <udd_ep_ack_out_received+0x130>)
  404a38:	79fb      	ldrb	r3, [r7, #7]
  404a3a:	330c      	adds	r3, #12
  404a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404a40:	f003 0302 	and.w	r3, r3, #2
  404a44:	2b00      	cmp	r3, #0
  404a46:	d1f6      	bne.n	404a36 <udd_ep_ack_out_received+0xae>
		if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  404a48:	79fb      	ldrb	r3, [r7, #7]
  404a4a:	2b00      	cmp	r3, #0
  404a4c:	d02c      	beq.n	404aa8 <udd_ep_ack_out_received+0x120>
  404a4e:	79fb      	ldrb	r3, [r7, #7]
  404a50:	2b03      	cmp	r3, #3
  404a52:	d029      	beq.n	404aa8 <udd_ep_ack_out_received+0x120>
			ptr_job->bank = 1;
  404a54:	697a      	ldr	r2, [r7, #20]
  404a56:	7c53      	ldrb	r3, [r2, #17]
  404a58:	2101      	movs	r1, #1
  404a5a:	f361 0383 	bfi	r3, r1, #2, #2
  404a5e:	7453      	strb	r3, [r2, #17]
		}
	} else {
		udd_ack_bank1_received(ep);
		ptr_job->bank = 0;
	}
}
  404a60:	e022      	b.n	404aa8 <udd_ep_ack_out_received+0x120>
		udd_ack_bank1_received(ep);
  404a62:	4a15      	ldr	r2, [pc, #84]	; (404ab8 <udd_ep_ack_out_received+0x130>)
  404a64:	79fb      	ldrb	r3, [r7, #7]
  404a66:	330c      	adds	r3, #12
  404a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404a6c:	60bb      	str	r3, [r7, #8]
  404a6e:	68bb      	ldr	r3, [r7, #8]
  404a70:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404a74:	60bb      	str	r3, [r7, #8]
  404a76:	68bb      	ldr	r3, [r7, #8]
  404a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  404a7c:	60bb      	str	r3, [r7, #8]
  404a7e:	490e      	ldr	r1, [pc, #56]	; (404ab8 <udd_ep_ack_out_received+0x130>)
  404a80:	79fb      	ldrb	r3, [r7, #7]
  404a82:	68ba      	ldr	r2, [r7, #8]
  404a84:	330c      	adds	r3, #12
  404a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404a8a:	bf00      	nop
  404a8c:	4a0a      	ldr	r2, [pc, #40]	; (404ab8 <udd_ep_ack_out_received+0x130>)
  404a8e:	79fb      	ldrb	r3, [r7, #7]
  404a90:	330c      	adds	r3, #12
  404a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404a9a:	2b00      	cmp	r3, #0
  404a9c:	d1f6      	bne.n	404a8c <udd_ep_ack_out_received+0x104>
		ptr_job->bank = 0;
  404a9e:	697a      	ldr	r2, [r7, #20]
  404aa0:	7c53      	ldrb	r3, [r2, #17]
  404aa2:	f36f 0383 	bfc	r3, #2, #2
  404aa6:	7453      	strb	r3, [r2, #17]
}
  404aa8:	bf00      	nop
  404aaa:	371c      	adds	r7, #28
  404aac:	46bd      	mov	sp, r7
  404aae:	f85d 7b04 	ldr.w	r7, [sp], #4
  404ab2:	4770      	bx	lr
  404ab4:	2000661c 	.word	0x2000661c
  404ab8:	40084000 	.word	0x40084000

00404abc <udd_ep_write_fifo>:


static bool udd_ep_write_fifo(udd_ep_id_t ep)
{
  404abc:	b480      	push	{r7}
  404abe:	b089      	sub	sp, #36	; 0x24
  404ac0:	af00      	add	r7, sp, #0
  404ac2:	4603      	mov	r3, r0
  404ac4:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  404ac6:	79fb      	ldrb	r3, [r7, #7]
  404ac8:	1e5a      	subs	r2, r3, #1
  404aca:	4613      	mov	r3, r2
  404acc:	009b      	lsls	r3, r3, #2
  404ace:	4413      	add	r3, r2
  404ad0:	009b      	lsls	r3, r3, #2
  404ad2:	4a55      	ldr	r2, [pc, #340]	; (404c28 <udd_ep_write_fifo+0x16c>)
  404ad4:	4413      	add	r3, r2
  404ad6:	613b      	str	r3, [r7, #16]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
  404ad8:	693b      	ldr	r3, [r7, #16]
  404ada:	685a      	ldr	r2, [r3, #4]
  404adc:	693b      	ldr	r3, [r7, #16]
  404ade:	68db      	ldr	r3, [r3, #12]
  404ae0:	4413      	add	r3, r2
  404ae2:	61fb      	str	r3, [r7, #28]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  404ae4:	693b      	ldr	r3, [r7, #16]
  404ae6:	689a      	ldr	r2, [r3, #8]
  404ae8:	693b      	ldr	r3, [r7, #16]
  404aea:	68db      	ldr	r3, [r3, #12]
  404aec:	1ad3      	subs	r3, r2, r3
  404aee:	60fb      	str	r3, [r7, #12]
	uint32_t pkt_size = ptr_job->size;
  404af0:	693b      	ldr	r3, [r7, #16]
  404af2:	8a1b      	ldrh	r3, [r3, #16]
  404af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
  404af8:	b29b      	uxth	r3, r3
  404afa:	61bb      	str	r3, [r7, #24]
	bool is_short_pkt = false;
  404afc:	2300      	movs	r3, #0
  404afe:	75fb      	strb	r3, [r7, #23]

	// Packet size
	if (nb_remain < pkt_size) {
  404b00:	68fa      	ldr	r2, [r7, #12]
  404b02:	69bb      	ldr	r3, [r7, #24]
  404b04:	429a      	cmp	r2, r3
  404b06:	d203      	bcs.n	404b10 <udd_ep_write_fifo+0x54>
		pkt_size = nb_remain;
  404b08:	68fb      	ldr	r3, [r7, #12]
  404b0a:	61bb      	str	r3, [r7, #24]
		is_short_pkt = true;
  404b0c:	2301      	movs	r3, #1
  404b0e:	75fb      	strb	r3, [r7, #23]
	}

	// Modify job information
	ptr_job->buf_cnt += pkt_size;
  404b10:	693b      	ldr	r3, [r7, #16]
  404b12:	68da      	ldr	r2, [r3, #12]
  404b14:	69bb      	ldr	r3, [r7, #24]
  404b16:	441a      	add	r2, r3
  404b18:	693b      	ldr	r3, [r7, #16]
  404b1a:	60da      	str	r2, [r3, #12]

	// Speed block data transfer to FIFO (DPRAM)
	for (; pkt_size >= 8; pkt_size -= 8) {
  404b1c:	e05a      	b.n	404bd4 <udd_ep_write_fifo+0x118>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  404b1e:	4843      	ldr	r0, [pc, #268]	; (404c2c <udd_ep_write_fifo+0x170>)
  404b20:	79fa      	ldrb	r2, [r7, #7]
  404b22:	69fb      	ldr	r3, [r7, #28]
  404b24:	1c59      	adds	r1, r3, #1
  404b26:	61f9      	str	r1, [r7, #28]
  404b28:	781b      	ldrb	r3, [r3, #0]
  404b2a:	4619      	mov	r1, r3
  404b2c:	f102 0314 	add.w	r3, r2, #20
  404b30:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  404b34:	483d      	ldr	r0, [pc, #244]	; (404c2c <udd_ep_write_fifo+0x170>)
  404b36:	79fa      	ldrb	r2, [r7, #7]
  404b38:	69fb      	ldr	r3, [r7, #28]
  404b3a:	1c59      	adds	r1, r3, #1
  404b3c:	61f9      	str	r1, [r7, #28]
  404b3e:	781b      	ldrb	r3, [r3, #0]
  404b40:	4619      	mov	r1, r3
  404b42:	f102 0314 	add.w	r3, r2, #20
  404b46:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  404b4a:	4838      	ldr	r0, [pc, #224]	; (404c2c <udd_ep_write_fifo+0x170>)
  404b4c:	79fa      	ldrb	r2, [r7, #7]
  404b4e:	69fb      	ldr	r3, [r7, #28]
  404b50:	1c59      	adds	r1, r3, #1
  404b52:	61f9      	str	r1, [r7, #28]
  404b54:	781b      	ldrb	r3, [r3, #0]
  404b56:	4619      	mov	r1, r3
  404b58:	f102 0314 	add.w	r3, r2, #20
  404b5c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  404b60:	4832      	ldr	r0, [pc, #200]	; (404c2c <udd_ep_write_fifo+0x170>)
  404b62:	79fa      	ldrb	r2, [r7, #7]
  404b64:	69fb      	ldr	r3, [r7, #28]
  404b66:	1c59      	adds	r1, r3, #1
  404b68:	61f9      	str	r1, [r7, #28]
  404b6a:	781b      	ldrb	r3, [r3, #0]
  404b6c:	4619      	mov	r1, r3
  404b6e:	f102 0314 	add.w	r3, r2, #20
  404b72:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  404b76:	482d      	ldr	r0, [pc, #180]	; (404c2c <udd_ep_write_fifo+0x170>)
  404b78:	79fa      	ldrb	r2, [r7, #7]
  404b7a:	69fb      	ldr	r3, [r7, #28]
  404b7c:	1c59      	adds	r1, r3, #1
  404b7e:	61f9      	str	r1, [r7, #28]
  404b80:	781b      	ldrb	r3, [r3, #0]
  404b82:	4619      	mov	r1, r3
  404b84:	f102 0314 	add.w	r3, r2, #20
  404b88:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  404b8c:	4827      	ldr	r0, [pc, #156]	; (404c2c <udd_ep_write_fifo+0x170>)
  404b8e:	79fa      	ldrb	r2, [r7, #7]
  404b90:	69fb      	ldr	r3, [r7, #28]
  404b92:	1c59      	adds	r1, r3, #1
  404b94:	61f9      	str	r1, [r7, #28]
  404b96:	781b      	ldrb	r3, [r3, #0]
  404b98:	4619      	mov	r1, r3
  404b9a:	f102 0314 	add.w	r3, r2, #20
  404b9e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  404ba2:	4822      	ldr	r0, [pc, #136]	; (404c2c <udd_ep_write_fifo+0x170>)
  404ba4:	79fa      	ldrb	r2, [r7, #7]
  404ba6:	69fb      	ldr	r3, [r7, #28]
  404ba8:	1c59      	adds	r1, r3, #1
  404baa:	61f9      	str	r1, [r7, #28]
  404bac:	781b      	ldrb	r3, [r3, #0]
  404bae:	4619      	mov	r1, r3
  404bb0:	f102 0314 	add.w	r3, r2, #20
  404bb4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_endpoint_fifo_write(ep, *ptr_src++);
  404bb8:	481c      	ldr	r0, [pc, #112]	; (404c2c <udd_ep_write_fifo+0x170>)
  404bba:	79fa      	ldrb	r2, [r7, #7]
  404bbc:	69fb      	ldr	r3, [r7, #28]
  404bbe:	1c59      	adds	r1, r3, #1
  404bc0:	61f9      	str	r1, [r7, #28]
  404bc2:	781b      	ldrb	r3, [r3, #0]
  404bc4:	4619      	mov	r1, r3
  404bc6:	f102 0314 	add.w	r3, r2, #20
  404bca:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	for (; pkt_size >= 8; pkt_size -= 8) {
  404bce:	69bb      	ldr	r3, [r7, #24]
  404bd0:	3b08      	subs	r3, #8
  404bd2:	61bb      	str	r3, [r7, #24]
  404bd4:	69bb      	ldr	r3, [r7, #24]
  404bd6:	2b07      	cmp	r3, #7
  404bd8:	d8a1      	bhi.n	404b1e <udd_ep_write_fifo+0x62>
	}
	// Normal speed data transfer to FIFO (DPRAM)
	for (; pkt_size; pkt_size--) {
  404bda:	e00d      	b.n	404bf8 <udd_ep_write_fifo+0x13c>
		udd_endpoint_fifo_write(ep, *ptr_src++);
  404bdc:	4813      	ldr	r0, [pc, #76]	; (404c2c <udd_ep_write_fifo+0x170>)
  404bde:	79fa      	ldrb	r2, [r7, #7]
  404be0:	69fb      	ldr	r3, [r7, #28]
  404be2:	1c59      	adds	r1, r3, #1
  404be4:	61f9      	str	r1, [r7, #28]
  404be6:	781b      	ldrb	r3, [r3, #0]
  404be8:	4619      	mov	r1, r3
  404bea:	f102 0314 	add.w	r3, r2, #20
  404bee:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	for (; pkt_size; pkt_size--) {
  404bf2:	69bb      	ldr	r3, [r7, #24]
  404bf4:	3b01      	subs	r3, #1
  404bf6:	61bb      	str	r3, [r7, #24]
  404bf8:	69bb      	ldr	r3, [r7, #24]
  404bfa:	2b00      	cmp	r3, #0
  404bfc:	d1ee      	bne.n	404bdc <udd_ep_write_fifo+0x120>
	}

	// Add to buffered banks
	ptr_job->bank++;
  404bfe:	693b      	ldr	r3, [r7, #16]
  404c00:	7c5b      	ldrb	r3, [r3, #17]
  404c02:	f3c3 0381 	ubfx	r3, r3, #2, #2
  404c06:	b2db      	uxtb	r3, r3
  404c08:	3301      	adds	r3, #1
  404c0a:	f003 0303 	and.w	r3, r3, #3
  404c0e:	b2d9      	uxtb	r1, r3
  404c10:	693a      	ldr	r2, [r7, #16]
  404c12:	7c53      	ldrb	r3, [r2, #17]
  404c14:	f361 0383 	bfi	r3, r1, #2, #2
  404c18:	7453      	strb	r3, [r2, #17]
	return is_short_pkt;
  404c1a:	7dfb      	ldrb	r3, [r7, #23]
}
  404c1c:	4618      	mov	r0, r3
  404c1e:	3724      	adds	r7, #36	; 0x24
  404c20:	46bd      	mov	sp, r7
  404c22:	f85d 7b04 	ldr.w	r7, [sp], #4
  404c26:	4770      	bx	lr
  404c28:	2000661c 	.word	0x2000661c
  404c2c:	40084000 	.word	0x40084000

00404c30 <udd_ep_in_sent>:


static bool udd_ep_in_sent(udd_ep_id_t ep, bool b_tx)
{
  404c30:	b580      	push	{r7, lr}
  404c32:	b086      	sub	sp, #24
  404c34:	af00      	add	r7, sp, #0
  404c36:	4603      	mov	r3, r0
  404c38:	460a      	mov	r2, r1
  404c3a:	71fb      	strb	r3, [r7, #7]
  404c3c:	4613      	mov	r3, r2
  404c3e:	71bb      	strb	r3, [r7, #6]
	bool b_shortpacket;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  404c40:	79fb      	ldrb	r3, [r7, #7]
  404c42:	1e5a      	subs	r2, r3, #1
  404c44:	4613      	mov	r3, r2
  404c46:	009b      	lsls	r3, r3, #2
  404c48:	4413      	add	r3, r2
  404c4a:	009b      	lsls	r3, r3, #2
  404c4c:	4a36      	ldr	r2, [pc, #216]	; (404d28 <udd_ep_in_sent+0xf8>)
  404c4e:	4413      	add	r3, r2
  404c50:	617b      	str	r3, [r7, #20]

	// All banks are full
	if (ptr_job->bank >= udd_get_endpoint_bank_max_nbr(ep)) {
  404c52:	697b      	ldr	r3, [r7, #20]
  404c54:	7c5b      	ldrb	r3, [r3, #17]
  404c56:	f3c3 0381 	ubfx	r3, r3, #2, #2
  404c5a:	b2db      	uxtb	r3, r3
  404c5c:	461a      	mov	r2, r3
  404c5e:	79fb      	ldrb	r3, [r7, #7]
  404c60:	2b00      	cmp	r3, #0
  404c62:	d002      	beq.n	404c6a <udd_ep_in_sent+0x3a>
  404c64:	79fb      	ldrb	r3, [r7, #7]
  404c66:	2b03      	cmp	r3, #3
  404c68:	d101      	bne.n	404c6e <udd_ep_in_sent+0x3e>
  404c6a:	2301      	movs	r3, #1
  404c6c:	e000      	b.n	404c70 <udd_ep_in_sent+0x40>
  404c6e:	2302      	movs	r3, #2
  404c70:	429a      	cmp	r2, r3
  404c72:	db01      	blt.n	404c78 <udd_ep_in_sent+0x48>
		return true; // Data pending
  404c74:	2301      	movs	r3, #1
  404c76:	e052      	b.n	404d1e <udd_ep_in_sent+0xee>
	}

	// No more data in buffer
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
  404c78:	697b      	ldr	r3, [r7, #20]
  404c7a:	68da      	ldr	r2, [r3, #12]
  404c7c:	697b      	ldr	r3, [r7, #20]
  404c7e:	689b      	ldr	r3, [r3, #8]
  404c80:	429a      	cmp	r2, r3
  404c82:	d308      	bcc.n	404c96 <udd_ep_in_sent+0x66>
  404c84:	697b      	ldr	r3, [r7, #20]
  404c86:	7c5b      	ldrb	r3, [r3, #17]
  404c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404c8c:	b2db      	uxtb	r3, r3
  404c8e:	2b00      	cmp	r3, #0
  404c90:	d101      	bne.n	404c96 <udd_ep_in_sent+0x66>
		return false;
  404c92:	2300      	movs	r3, #0
  404c94:	e043      	b.n	404d1e <udd_ep_in_sent+0xee>
	}

	// Fill FIFO
	b_shortpacket = udd_ep_write_fifo(ep);
  404c96:	79fb      	ldrb	r3, [r7, #7]
  404c98:	4618      	mov	r0, r3
  404c9a:	4b24      	ldr	r3, [pc, #144]	; (404d2c <udd_ep_in_sent+0xfc>)
  404c9c:	4798      	blx	r3
  404c9e:	4603      	mov	r3, r0
  404ca0:	74fb      	strb	r3, [r7, #19]

	// Data is ready to send
	if (b_tx) {
  404ca2:	79bb      	ldrb	r3, [r7, #6]
  404ca4:	2b00      	cmp	r3, #0
  404ca6:	d01d      	beq.n	404ce4 <udd_ep_in_sent+0xb4>
		udd_set_transmit_ready(ep);
  404ca8:	4a21      	ldr	r2, [pc, #132]	; (404d30 <udd_ep_in_sent+0x100>)
  404caa:	79fb      	ldrb	r3, [r7, #7]
  404cac:	330c      	adds	r3, #12
  404cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404cb2:	60fb      	str	r3, [r7, #12]
  404cb4:	68fb      	ldr	r3, [r7, #12]
  404cb6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404cba:	60fb      	str	r3, [r7, #12]
  404cbc:	68fb      	ldr	r3, [r7, #12]
  404cbe:	f043 0310 	orr.w	r3, r3, #16
  404cc2:	60fb      	str	r3, [r7, #12]
  404cc4:	491a      	ldr	r1, [pc, #104]	; (404d30 <udd_ep_in_sent+0x100>)
  404cc6:	79fb      	ldrb	r3, [r7, #7]
  404cc8:	68fa      	ldr	r2, [r7, #12]
  404cca:	330c      	adds	r3, #12
  404ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404cd0:	bf00      	nop
  404cd2:	4a17      	ldr	r2, [pc, #92]	; (404d30 <udd_ep_in_sent+0x100>)
  404cd4:	79fb      	ldrb	r3, [r7, #7]
  404cd6:	330c      	adds	r3, #12
  404cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404cdc:	f003 0310 	and.w	r3, r3, #16
  404ce0:	2b10      	cmp	r3, #16
  404ce2:	d1f6      	bne.n	404cd2 <udd_ep_in_sent+0xa2>
	}
	// Short PKT? no need to send it again.
	if (b_shortpacket) {
  404ce4:	7cfb      	ldrb	r3, [r7, #19]
  404ce6:	2b00      	cmp	r3, #0
  404ce8:	d004      	beq.n	404cf4 <udd_ep_in_sent+0xc4>
		ptr_job->b_shortpacket = false;
  404cea:	697a      	ldr	r2, [r7, #20]
  404cec:	7c53      	ldrb	r3, [r2, #17]
  404cee:	f36f 1386 	bfc	r3, #6, #1
  404cf2:	7453      	strb	r3, [r2, #17]
	}
	// All transfer done, including ZLP, Finish Job
	if ((ptr_job->buf_cnt >= ptr_job->buf_size)
  404cf4:	697b      	ldr	r3, [r7, #20]
  404cf6:	68da      	ldr	r2, [r3, #12]
  404cf8:	697b      	ldr	r3, [r7, #20]
  404cfa:	689b      	ldr	r3, [r3, #8]
  404cfc:	429a      	cmp	r2, r3
  404cfe:	d30d      	bcc.n	404d1c <udd_ep_in_sent+0xec>
			&& (!ptr_job->b_shortpacket)) {
  404d00:	697b      	ldr	r3, [r7, #20]
  404d02:	7c5b      	ldrb	r3, [r3, #17]
  404d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
  404d08:	b2db      	uxtb	r3, r3
  404d0a:	2b00      	cmp	r3, #0
  404d0c:	d106      	bne.n	404d1c <udd_ep_in_sent+0xec>
		ptr_job->b_buf_end = true;
  404d0e:	697a      	ldr	r2, [r7, #20]
  404d10:	7c53      	ldrb	r3, [r2, #17]
  404d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  404d16:	7453      	strb	r3, [r2, #17]
		return false;
  404d18:	2300      	movs	r3, #0
  404d1a:	e000      	b.n	404d1e <udd_ep_in_sent+0xee>
	}
	return true; // Pending
  404d1c:	2301      	movs	r3, #1
}
  404d1e:	4618      	mov	r0, r3
  404d20:	3718      	adds	r7, #24
  404d22:	46bd      	mov	sp, r7
  404d24:	bd80      	pop	{r7, pc}
  404d26:	bf00      	nop
  404d28:	2000661c 	.word	0x2000661c
  404d2c:	00404abd 	.word	0x00404abd
  404d30:	40084000 	.word	0x40084000

00404d34 <udd_ep_out_received>:


static void udd_ep_out_received(udd_ep_id_t ep)
{
  404d34:	b580      	push	{r7, lr}
  404d36:	b08a      	sub	sp, #40	; 0x28
  404d38:	af00      	add	r7, sp, #0
  404d3a:	4603      	mov	r3, r0
  404d3c:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep - 1];
  404d3e:	79fb      	ldrb	r3, [r7, #7]
  404d40:	1e5a      	subs	r2, r3, #1
  404d42:	4613      	mov	r3, r2
  404d44:	009b      	lsls	r3, r3, #2
  404d46:	4413      	add	r3, r2
  404d48:	009b      	lsls	r3, r3, #2
  404d4a:	4a3a      	ldr	r2, [pc, #232]	; (404e34 <udd_ep_out_received+0x100>)
  404d4c:	4413      	add	r3, r2
  404d4e:	617b      	str	r3, [r7, #20]
	uint32_t nb_data = 0, i;
  404d50:	2300      	movs	r3, #0
  404d52:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
  404d54:	697b      	ldr	r3, [r7, #20]
  404d56:	689a      	ldr	r2, [r3, #8]
  404d58:	697b      	ldr	r3, [r7, #20]
  404d5a:	68db      	ldr	r3, [r3, #12]
  404d5c:	1ad3      	subs	r3, r2, r3
  404d5e:	613b      	str	r3, [r7, #16]
	uint32_t pkt_size = ptr_job->size;
  404d60:	697b      	ldr	r3, [r7, #20]
  404d62:	8a1b      	ldrh	r3, [r3, #16]
  404d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
  404d68:	b29b      	uxth	r3, r3
  404d6a:	60fb      	str	r3, [r7, #12]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
  404d6c:	697b      	ldr	r3, [r7, #20]
  404d6e:	685a      	ldr	r2, [r3, #4]
  404d70:	697b      	ldr	r3, [r7, #20]
  404d72:	68db      	ldr	r3, [r3, #12]
  404d74:	4413      	add	r3, r2
  404d76:	61fb      	str	r3, [r7, #28]
	bool b_full = false, b_short;
  404d78:	2300      	movs	r3, #0
  404d7a:	76fb      	strb	r3, [r7, #27]

	// Read byte count
	nb_data = udd_byte_count(ep);
  404d7c:	4a2e      	ldr	r2, [pc, #184]	; (404e38 <udd_ep_out_received+0x104>)
  404d7e:	79fb      	ldrb	r3, [r7, #7]
  404d80:	330c      	adds	r3, #12
  404d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404d86:	0c1b      	lsrs	r3, r3, #16
  404d88:	f3c3 030a 	ubfx	r3, r3, #0, #11
  404d8c:	627b      	str	r3, [r7, #36]	; 0x24
	b_short = (nb_data < pkt_size);
  404d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  404d90:	68fb      	ldr	r3, [r7, #12]
  404d92:	429a      	cmp	r2, r3
  404d94:	bf34      	ite	cc
  404d96:	2301      	movcc	r3, #1
  404d98:	2300      	movcs	r3, #0
  404d9a:	72fb      	strb	r3, [r7, #11]

	// Copy data if there is
	if (nb_data > 0) {
  404d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404d9e:	2b00      	cmp	r3, #0
  404da0:	d021      	beq.n	404de6 <udd_ep_out_received+0xb2>
		if (nb_data >= nb_remain) {
  404da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  404da4:	693b      	ldr	r3, [r7, #16]
  404da6:	429a      	cmp	r2, r3
  404da8:	d303      	bcc.n	404db2 <udd_ep_out_received+0x7e>
			nb_data = nb_remain;
  404daa:	693b      	ldr	r3, [r7, #16]
  404dac:	627b      	str	r3, [r7, #36]	; 0x24
			b_full = true;
  404dae:	2301      	movs	r3, #1
  404db0:	76fb      	strb	r3, [r7, #27]
		}
		// Modify job information
		ptr_job->buf_cnt += nb_data;
  404db2:	697b      	ldr	r3, [r7, #20]
  404db4:	68da      	ldr	r2, [r3, #12]
  404db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404db8:	441a      	add	r2, r3
  404dba:	697b      	ldr	r3, [r7, #20]
  404dbc:	60da      	str	r2, [r3, #12]

		// Copy FIFO (DPRAM) to buffer
		for (i = 0; i < nb_data; i++) {
  404dbe:	2300      	movs	r3, #0
  404dc0:	623b      	str	r3, [r7, #32]
  404dc2:	e00c      	b.n	404dde <udd_ep_out_received+0xaa>
			*ptr_dst++ = udd_endpoint_fifo_read(ep);
  404dc4:	69fb      	ldr	r3, [r7, #28]
  404dc6:	1c5a      	adds	r2, r3, #1
  404dc8:	61fa      	str	r2, [r7, #28]
  404dca:	491b      	ldr	r1, [pc, #108]	; (404e38 <udd_ep_out_received+0x104>)
  404dcc:	79fa      	ldrb	r2, [r7, #7]
  404dce:	3214      	adds	r2, #20
  404dd0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
  404dd4:	b2d2      	uxtb	r2, r2
  404dd6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < nb_data; i++) {
  404dd8:	6a3b      	ldr	r3, [r7, #32]
  404dda:	3301      	adds	r3, #1
  404ddc:	623b      	str	r3, [r7, #32]
  404dde:	6a3a      	ldr	r2, [r7, #32]
  404de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404de2:	429a      	cmp	r2, r3
  404de4:	d3ee      	bcc.n	404dc4 <udd_ep_out_received+0x90>
		}
	}
	// Clear FIFO Status
	udd_ep_ack_out_received(ep);
  404de6:	79fb      	ldrb	r3, [r7, #7]
  404de8:	4618      	mov	r0, r3
  404dea:	4b14      	ldr	r3, [pc, #80]	; (404e3c <udd_ep_out_received+0x108>)
  404dec:	4798      	blx	r3
	// Finish job on error or short packet
	if ((b_full || b_short) &&
  404dee:	7efb      	ldrb	r3, [r7, #27]
  404df0:	2b00      	cmp	r3, #0
  404df2:	d102      	bne.n	404dfa <udd_ep_out_received+0xc6>
  404df4:	7afb      	ldrb	r3, [r7, #11]
  404df6:	2b00      	cmp	r3, #0
  404df8:	d018      	beq.n	404e2c <udd_ep_out_received+0xf8>
			!Is_udd_endpoint_stall_requested(ep)) {
  404dfa:	4a0f      	ldr	r2, [pc, #60]	; (404e38 <udd_ep_out_received+0x104>)
  404dfc:	79fb      	ldrb	r3, [r7, #7]
  404dfe:	330c      	adds	r3, #12
  404e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404e04:	f003 0320 	and.w	r3, r3, #32
	if ((b_full || b_short) &&
  404e08:	2b00      	cmp	r3, #0
  404e0a:	d10f      	bne.n	404e2c <udd_ep_out_received+0xf8>
		udd_disable_endpoint_interrupt(ep);
  404e0c:	4a0a      	ldr	r2, [pc, #40]	; (404e38 <udd_ep_out_received+0x104>)
  404e0e:	79fb      	ldrb	r3, [r7, #7]
  404e10:	2101      	movs	r1, #1
  404e12:	fa01 f303 	lsl.w	r3, r1, r3
  404e16:	6153      	str	r3, [r2, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  404e18:	697b      	ldr	r3, [r7, #20]
  404e1a:	68da      	ldr	r2, [r3, #12]
  404e1c:	697b      	ldr	r3, [r7, #20]
  404e1e:	609a      	str	r2, [r3, #8]
		udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  404e20:	79fb      	ldrb	r3, [r7, #7]
  404e22:	461a      	mov	r2, r3
  404e24:	2100      	movs	r1, #0
  404e26:	6978      	ldr	r0, [r7, #20]
  404e28:	4b05      	ldr	r3, [pc, #20]	; (404e40 <udd_ep_out_received+0x10c>)
  404e2a:	4798      	blx	r3
	}
}
  404e2c:	bf00      	nop
  404e2e:	3728      	adds	r7, #40	; 0x28
  404e30:	46bd      	mov	sp, r7
  404e32:	bd80      	pop	{r7, pc}
  404e34:	2000661c 	.word	0x2000661c
  404e38:	40084000 	.word	0x40084000
  404e3c:	00404989 	.word	0x00404989
  404e40:	00404915 	.word	0x00404915

00404e44 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
  404e44:	b580      	push	{r7, lr}
  404e46:	b08e      	sub	sp, #56	; 0x38
  404e48:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  404e4a:	2301      	movs	r3, #1
  404e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  404e50:	e260      	b.n	405314 <udd_ep_interrupt+0x4d0>
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_interrupt_enabled(ep)) {
  404e52:	4b9e      	ldr	r3, [pc, #632]	; (4050cc <udd_ep_interrupt+0x288>)
  404e54:	699a      	ldr	r2, [r3, #24]
  404e56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404e5a:	2101      	movs	r1, #1
  404e5c:	fa01 f303 	lsl.w	r3, r1, r3
  404e60:	4013      	ands	r3, r2
  404e62:	2b00      	cmp	r3, #0
  404e64:	f000 8250 	beq.w	405308 <udd_ep_interrupt+0x4c4>
			continue;
		}

		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
  404e68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404e6c:	1e5a      	subs	r2, r3, #1
  404e6e:	4613      	mov	r3, r2
  404e70:	009b      	lsls	r3, r3, #2
  404e72:	4413      	add	r3, r2
  404e74:	009b      	lsls	r3, r3, #2
  404e76:	4a96      	ldr	r2, [pc, #600]	; (4050d0 <udd_ep_interrupt+0x28c>)
  404e78:	4413      	add	r3, r2
  404e7a:	633b      	str	r3, [r7, #48]	; 0x30

		// RXOUT: Full packet received
		if (Is_udd_any_bank_received(ep)) {
  404e7c:	4a93      	ldr	r2, [pc, #588]	; (4050cc <udd_ep_interrupt+0x288>)
  404e7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404e82:	330c      	adds	r3, #12
  404e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404e88:	f003 0342 	and.w	r3, r3, #66	; 0x42
  404e8c:	2b00      	cmp	r3, #0
  404e8e:	d006      	beq.n	404e9e <udd_ep_interrupt+0x5a>
			udd_ep_out_received(ep);
  404e90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404e94:	4618      	mov	r0, r3
  404e96:	4b8f      	ldr	r3, [pc, #572]	; (4050d4 <udd_ep_interrupt+0x290>)
  404e98:	4798      	blx	r3
			return true;
  404e9a:	2301      	movs	r3, #1
  404e9c:	e240      	b.n	405320 <udd_ep_interrupt+0x4dc>
		}
		// TXIN: packet sent
		if (Is_udd_in_sent(ep)) {
  404e9e:	4a8b      	ldr	r2, [pc, #556]	; (4050cc <udd_ep_interrupt+0x288>)
  404ea0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404ea4:	330c      	adds	r3, #12
  404ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404eaa:	f003 0301 	and.w	r3, r3, #1
  404eae:	2b00      	cmp	r3, #0
  404eb0:	f000 81ec 	beq.w	40528c <udd_ep_interrupt+0x448>

			ptr_job->bank--;
  404eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404eb6:	7c5b      	ldrb	r3, [r3, #17]
  404eb8:	f3c3 0381 	ubfx	r3, r3, #2, #2
  404ebc:	b2db      	uxtb	r3, r3
  404ebe:	3303      	adds	r3, #3
  404ec0:	f003 0303 	and.w	r3, r3, #3
  404ec4:	b2d9      	uxtb	r1, r3
  404ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  404ec8:	7c53      	ldrb	r3, [r2, #17]
  404eca:	f361 0383 	bfi	r3, r1, #2, #2
  404ece:	7453      	strb	r3, [r2, #17]
			// Stall when all banks free
			if (ptr_job->b_stall_requested) {
  404ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404ed2:	7c5b      	ldrb	r3, [r3, #17]
  404ed4:	f003 0320 	and.w	r3, r3, #32
  404ed8:	b2db      	uxtb	r3, r3
  404eda:	2b00      	cmp	r3, #0
  404edc:	f000 8093 	beq.w	405006 <udd_ep_interrupt+0x1c2>
				if (ptr_job->bank) {
  404ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  404ee2:	7c5b      	ldrb	r3, [r3, #17]
  404ee4:	f003 030c 	and.w	r3, r3, #12
  404ee8:	b2db      	uxtb	r3, r3
  404eea:	2b00      	cmp	r3, #0
  404eec:	d042      	beq.n	404f74 <udd_ep_interrupt+0x130>
					// Send remaining
					udd_set_transmit_ready(ep);
  404eee:	4a77      	ldr	r2, [pc, #476]	; (4050cc <udd_ep_interrupt+0x288>)
  404ef0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404ef4:	330c      	adds	r3, #12
  404ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404efa:	62bb      	str	r3, [r7, #40]	; 0x28
  404efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404efe:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404f02:	62bb      	str	r3, [r7, #40]	; 0x28
  404f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  404f06:	f043 0310 	orr.w	r3, r3, #16
  404f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  404f0c:	496f      	ldr	r1, [pc, #444]	; (4050cc <udd_ep_interrupt+0x288>)
  404f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
  404f14:	330c      	adds	r3, #12
  404f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404f1a:	bf00      	nop
  404f1c:	4a6b      	ldr	r2, [pc, #428]	; (4050cc <udd_ep_interrupt+0x288>)
  404f1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404f22:	330c      	adds	r3, #12
  404f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404f28:	f003 0310 	and.w	r3, r3, #16
  404f2c:	2b10      	cmp	r3, #16
  404f2e:	d1f5      	bne.n	404f1c <udd_ep_interrupt+0xd8>
					udd_ack_in_sent(ep);
  404f30:	4a66      	ldr	r2, [pc, #408]	; (4050cc <udd_ep_interrupt+0x288>)
  404f32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404f36:	330c      	adds	r3, #12
  404f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404f3c:	627b      	str	r3, [r7, #36]	; 0x24
  404f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404f40:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404f44:	627b      	str	r3, [r7, #36]	; 0x24
  404f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  404f48:	f023 0301 	bic.w	r3, r3, #1
  404f4c:	627b      	str	r3, [r7, #36]	; 0x24
  404f4e:	495f      	ldr	r1, [pc, #380]	; (4050cc <udd_ep_interrupt+0x288>)
  404f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  404f56:	330c      	adds	r3, #12
  404f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404f5c:	bf00      	nop
  404f5e:	4a5b      	ldr	r2, [pc, #364]	; (4050cc <udd_ep_interrupt+0x288>)
  404f60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404f64:	330c      	adds	r3, #12
  404f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404f6a:	f003 0301 	and.w	r3, r3, #1
  404f6e:	2b00      	cmp	r3, #0
  404f70:	d1f5      	bne.n	404f5e <udd_ep_interrupt+0x11a>
  404f72:	e046      	b.n	405002 <udd_ep_interrupt+0x1be>
				} else {
					// Ack last packet
					udd_ack_in_sent(ep);
  404f74:	4a55      	ldr	r2, [pc, #340]	; (4050cc <udd_ep_interrupt+0x288>)
  404f76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404f7a:	330c      	adds	r3, #12
  404f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404f80:	623b      	str	r3, [r7, #32]
  404f82:	6a3b      	ldr	r3, [r7, #32]
  404f84:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404f88:	623b      	str	r3, [r7, #32]
  404f8a:	6a3b      	ldr	r3, [r7, #32]
  404f8c:	f023 0301 	bic.w	r3, r3, #1
  404f90:	623b      	str	r3, [r7, #32]
  404f92:	494e      	ldr	r1, [pc, #312]	; (4050cc <udd_ep_interrupt+0x288>)
  404f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404f98:	6a3a      	ldr	r2, [r7, #32]
  404f9a:	330c      	adds	r3, #12
  404f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404fa0:	bf00      	nop
  404fa2:	4a4a      	ldr	r2, [pc, #296]	; (4050cc <udd_ep_interrupt+0x288>)
  404fa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404fa8:	330c      	adds	r3, #12
  404faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404fae:	f003 0301 	and.w	r3, r3, #1
  404fb2:	2b00      	cmp	r3, #0
  404fb4:	d1f5      	bne.n	404fa2 <udd_ep_interrupt+0x15e>
					// Enable stall
					udd_enable_stall_handshake(ep);
  404fb6:	4a45      	ldr	r2, [pc, #276]	; (4050cc <udd_ep_interrupt+0x288>)
  404fb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404fbc:	330c      	adds	r3, #12
  404fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404fc2:	61fb      	str	r3, [r7, #28]
  404fc4:	69fb      	ldr	r3, [r7, #28]
  404fc6:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  404fca:	61fb      	str	r3, [r7, #28]
  404fcc:	69fb      	ldr	r3, [r7, #28]
  404fce:	f043 0320 	orr.w	r3, r3, #32
  404fd2:	61fb      	str	r3, [r7, #28]
  404fd4:	493d      	ldr	r1, [pc, #244]	; (4050cc <udd_ep_interrupt+0x288>)
  404fd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404fda:	69fa      	ldr	r2, [r7, #28]
  404fdc:	330c      	adds	r3, #12
  404fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  404fe2:	bf00      	nop
  404fe4:	4a39      	ldr	r2, [pc, #228]	; (4050cc <udd_ep_interrupt+0x288>)
  404fe6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  404fea:	330c      	adds	r3, #12
  404fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  404ff0:	f003 0320 	and.w	r3, r3, #32
  404ff4:	2b20      	cmp	r3, #32
  404ff6:	d1f5      	bne.n	404fe4 <udd_ep_interrupt+0x1a0>
					// Halt executed
					ptr_job->b_stall_requested = false;
  404ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  404ffa:	7c53      	ldrb	r3, [r2, #17]
  404ffc:	f36f 1345 	bfc	r3, #5, #1
  405000:	7453      	strb	r3, [r2, #17]
				}
				return true;
  405002:	2301      	movs	r3, #1
  405004:	e18c      	b.n	405320 <udd_ep_interrupt+0x4dc>
			}
			// Finish Job when buffer end
			if (ptr_job->b_buf_end) {
  405006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405008:	7c5b      	ldrb	r3, [r3, #17]
  40500a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40500e:	b2db      	uxtb	r3, r3
  405010:	2b00      	cmp	r3, #0
  405012:	d016      	beq.n	405042 <udd_ep_interrupt+0x1fe>
				ptr_job->b_buf_end = false;
  405014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  405016:	7c53      	ldrb	r3, [r2, #17]
  405018:	f36f 13c7 	bfc	r3, #7, #1
  40501c:	7453      	strb	r3, [r2, #17]
				ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  40501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405020:	68da      	ldr	r2, [r3, #12]
  405022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405024:	609a      	str	r2, [r3, #8]
                udd_disable_endpoint_interrupt(ep);
  405026:	4a29      	ldr	r2, [pc, #164]	; (4050cc <udd_ep_interrupt+0x288>)
  405028:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40502c:	2101      	movs	r1, #1
  40502e:	fa01 f303 	lsl.w	r3, r1, r3
  405032:	6153      	str	r3, [r2, #20]
                udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  405034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405038:	461a      	mov	r2, r3
  40503a:	2100      	movs	r1, #0
  40503c:	6b38      	ldr	r0, [r7, #48]	; 0x30
  40503e:	4b26      	ldr	r3, [pc, #152]	; (4050d8 <udd_ep_interrupt+0x294>)
  405040:	4798      	blx	r3
			}
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  405042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405044:	68da      	ldr	r2, [r3, #12]
  405046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405048:	689b      	ldr	r3, [r3, #8]
  40504a:	429a      	cmp	r2, r3
  40504c:	d34a      	bcc.n	4050e4 <udd_ep_interrupt+0x2a0>
					!ptr_job->b_shortpacket &&
  40504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  405050:	7c5b      	ldrb	r3, [r3, #17]
  405052:	f003 0340 	and.w	r3, r3, #64	; 0x40
  405056:	b2db      	uxtb	r3, r3
			if (ptr_job->buf_cnt >= ptr_job->buf_size &&
  405058:	2b00      	cmp	r3, #0
  40505a:	d143      	bne.n	4050e4 <udd_ep_interrupt+0x2a0>
					ptr_job->bank == 0) {
  40505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40505e:	7c5b      	ldrb	r3, [r3, #17]
  405060:	f003 030c 	and.w	r3, r3, #12
  405064:	b2db      	uxtb	r3, r3
					!ptr_job->b_shortpacket &&
  405066:	2b00      	cmp	r3, #0
  405068:	d13c      	bne.n	4050e4 <udd_ep_interrupt+0x2a0>
				// All transfer done, including ZLP
				irqflags_t flags = cpu_irq_save();
  40506a:	4b1c      	ldr	r3, [pc, #112]	; (4050dc <udd_ep_interrupt+0x298>)
  40506c:	4798      	blx	r3
  40506e:	62f8      	str	r0, [r7, #44]	; 0x2c
				udd_disable_endpoint_interrupt(ep);
  405070:	4a16      	ldr	r2, [pc, #88]	; (4050cc <udd_ep_interrupt+0x288>)
  405072:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405076:	2101      	movs	r1, #1
  405078:	fa01 f303 	lsl.w	r3, r1, r3
  40507c:	6153      	str	r3, [r2, #20]
				cpu_irq_restore(flags);
  40507e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
  405080:	4b17      	ldr	r3, [pc, #92]	; (4050e0 <udd_ep_interrupt+0x29c>)
  405082:	4798      	blx	r3
				// Ack last packet
				udd_ack_in_sent(ep);
  405084:	4a11      	ldr	r2, [pc, #68]	; (4050cc <udd_ep_interrupt+0x288>)
  405086:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40508a:	330c      	adds	r3, #12
  40508c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405090:	61bb      	str	r3, [r7, #24]
  405092:	69bb      	ldr	r3, [r7, #24]
  405094:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405098:	61bb      	str	r3, [r7, #24]
  40509a:	69bb      	ldr	r3, [r7, #24]
  40509c:	f023 0301 	bic.w	r3, r3, #1
  4050a0:	61bb      	str	r3, [r7, #24]
  4050a2:	490a      	ldr	r1, [pc, #40]	; (4050cc <udd_ep_interrupt+0x288>)
  4050a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4050a8:	69ba      	ldr	r2, [r7, #24]
  4050aa:	330c      	adds	r3, #12
  4050ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4050b0:	bf00      	nop
  4050b2:	4a06      	ldr	r2, [pc, #24]	; (4050cc <udd_ep_interrupt+0x288>)
  4050b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4050b8:	330c      	adds	r3, #12
  4050ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4050be:	f003 0301 	and.w	r3, r3, #1
  4050c2:	2b00      	cmp	r3, #0
  4050c4:	d1f5      	bne.n	4050b2 <udd_ep_interrupt+0x26e>
				return true;
  4050c6:	2301      	movs	r3, #1
  4050c8:	e12a      	b.n	405320 <udd_ep_interrupt+0x4dc>
  4050ca:	bf00      	nop
  4050cc:	40084000 	.word	0x40084000
  4050d0:	2000661c 	.word	0x2000661c
  4050d4:	00404d35 	.word	0x00404d35
  4050d8:	00404915 	.word	0x00404915
  4050dc:	0040316d 	.word	0x0040316d
  4050e0:	004031c5 	.word	0x004031c5
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1
  4050e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4050e8:	2b00      	cmp	r3, #0
  4050ea:	d053      	beq.n	405194 <udd_ep_interrupt+0x350>
  4050ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4050f0:	2b03      	cmp	r3, #3
  4050f2:	d04f      	beq.n	405194 <udd_ep_interrupt+0x350>
					&& ptr_job->bank > 0) {
  4050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4050f6:	7c5b      	ldrb	r3, [r3, #17]
  4050f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
  4050fc:	b2db      	uxtb	r3, r3
  4050fe:	2b00      	cmp	r3, #0
  405100:	dd48      	ble.n	405194 <udd_ep_interrupt+0x350>
				// Already banks buffered, transmit while loading
				udd_set_transmit_ready(ep);
  405102:	4a89      	ldr	r2, [pc, #548]	; (405328 <udd_ep_interrupt+0x4e4>)
  405104:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405108:	330c      	adds	r3, #12
  40510a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40510e:	617b      	str	r3, [r7, #20]
  405110:	697b      	ldr	r3, [r7, #20]
  405112:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405116:	617b      	str	r3, [r7, #20]
  405118:	697b      	ldr	r3, [r7, #20]
  40511a:	f043 0310 	orr.w	r3, r3, #16
  40511e:	617b      	str	r3, [r7, #20]
  405120:	4981      	ldr	r1, [pc, #516]	; (405328 <udd_ep_interrupt+0x4e4>)
  405122:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405126:	697a      	ldr	r2, [r7, #20]
  405128:	330c      	adds	r3, #12
  40512a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  40512e:	bf00      	nop
  405130:	4a7d      	ldr	r2, [pc, #500]	; (405328 <udd_ep_interrupt+0x4e4>)
  405132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405136:	330c      	adds	r3, #12
  405138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40513c:	f003 0310 	and.w	r3, r3, #16
  405140:	2b10      	cmp	r3, #16
  405142:	d1f5      	bne.n	405130 <udd_ep_interrupt+0x2ec>
				udd_ack_in_sent(ep);
  405144:	4a78      	ldr	r2, [pc, #480]	; (405328 <udd_ep_interrupt+0x4e4>)
  405146:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40514a:	330c      	adds	r3, #12
  40514c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405150:	613b      	str	r3, [r7, #16]
  405152:	693b      	ldr	r3, [r7, #16]
  405154:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  405158:	613b      	str	r3, [r7, #16]
  40515a:	693b      	ldr	r3, [r7, #16]
  40515c:	f023 0301 	bic.w	r3, r3, #1
  405160:	613b      	str	r3, [r7, #16]
  405162:	4971      	ldr	r1, [pc, #452]	; (405328 <udd_ep_interrupt+0x4e4>)
  405164:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405168:	693a      	ldr	r2, [r7, #16]
  40516a:	330c      	adds	r3, #12
  40516c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  405170:	bf00      	nop
  405172:	4a6d      	ldr	r2, [pc, #436]	; (405328 <udd_ep_interrupt+0x4e4>)
  405174:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405178:	330c      	adds	r3, #12
  40517a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  40517e:	f003 0301 	and.w	r3, r3, #1
  405182:	2b00      	cmp	r3, #0
  405184:	d1f5      	bne.n	405172 <udd_ep_interrupt+0x32e>
				udd_ep_in_sent(ep, false);
  405186:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40518a:	2100      	movs	r1, #0
  40518c:	4618      	mov	r0, r3
  40518e:	4b67      	ldr	r3, [pc, #412]	; (40532c <udd_ep_interrupt+0x4e8>)
  405190:	4798      	blx	r3
  405192:	e079      	b.n	405288 <udd_ep_interrupt+0x444>
			} else if (udd_get_endpoint_bank_max_nbr(ep) > 1) {
  405194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405198:	2b00      	cmp	r3, #0
  40519a:	d04e      	beq.n	40523a <udd_ep_interrupt+0x3f6>
  40519c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4051a0:	2b03      	cmp	r3, #3
  4051a2:	d04a      	beq.n	40523a <udd_ep_interrupt+0x3f6>
				// Still bank free, load and transmit
				if (!udd_ep_in_sent(ep, true)) {
  4051a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4051a8:	2101      	movs	r1, #1
  4051aa:	4618      	mov	r0, r3
  4051ac:	4b5f      	ldr	r3, [pc, #380]	; (40532c <udd_ep_interrupt+0x4e8>)
  4051ae:	4798      	blx	r3
  4051b0:	4603      	mov	r3, r0
  4051b2:	f083 0301 	eor.w	r3, r3, #1
  4051b6:	b2db      	uxtb	r3, r3
  4051b8:	2b00      	cmp	r3, #0
  4051ba:	d016      	beq.n	4051ea <udd_ep_interrupt+0x3a6>
					ptr_job->b_buf_end = false;
  4051bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
  4051be:	7c53      	ldrb	r3, [r2, #17]
  4051c0:	f36f 13c7 	bfc	r3, #7, #1
  4051c4:	7453      	strb	r3, [r2, #17]
					ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
  4051c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4051c8:	68da      	ldr	r2, [r3, #12]
  4051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4051cc:	609a      	str	r2, [r3, #8]
                    udd_disable_endpoint_interrupt(ep);
  4051ce:	4a56      	ldr	r2, [pc, #344]	; (405328 <udd_ep_interrupt+0x4e4>)
  4051d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4051d4:	2101      	movs	r1, #1
  4051d6:	fa01 f303 	lsl.w	r3, r1, r3
  4051da:	6153      	str	r3, [r2, #20]
                    udd_ep_finish_job(ptr_job, UDD_EP_TRANSFER_OK, ep);
  4051dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4051e0:	461a      	mov	r2, r3
  4051e2:	2100      	movs	r1, #0
  4051e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
  4051e6:	4b52      	ldr	r3, [pc, #328]	; (405330 <udd_ep_interrupt+0x4ec>)
  4051e8:	4798      	blx	r3
				}
				udd_ack_in_sent(ep);
  4051ea:	4a4f      	ldr	r2, [pc, #316]	; (405328 <udd_ep_interrupt+0x4e4>)
  4051ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4051f0:	330c      	adds	r3, #12
  4051f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4051f6:	60fb      	str	r3, [r7, #12]
  4051f8:	68fb      	ldr	r3, [r7, #12]
  4051fa:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4051fe:	60fb      	str	r3, [r7, #12]
  405200:	68fb      	ldr	r3, [r7, #12]
  405202:	f023 0301 	bic.w	r3, r3, #1
  405206:	60fb      	str	r3, [r7, #12]
  405208:	4947      	ldr	r1, [pc, #284]	; (405328 <udd_ep_interrupt+0x4e4>)
  40520a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40520e:	68fa      	ldr	r2, [r7, #12]
  405210:	330c      	adds	r3, #12
  405212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  405216:	bf00      	nop
  405218:	4a43      	ldr	r2, [pc, #268]	; (405328 <udd_ep_interrupt+0x4e4>)
  40521a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40521e:	330c      	adds	r3, #12
  405220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405224:	f003 0301 	and.w	r3, r3, #1
  405228:	2b00      	cmp	r3, #0
  40522a:	d1f5      	bne.n	405218 <udd_ep_interrupt+0x3d4>
				udd_ep_in_sent(ep, false);
  40522c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405230:	2100      	movs	r1, #0
  405232:	4618      	mov	r0, r3
  405234:	4b3d      	ldr	r3, [pc, #244]	; (40532c <udd_ep_interrupt+0x4e8>)
  405236:	4798      	blx	r3
  405238:	e026      	b.n	405288 <udd_ep_interrupt+0x444>
			} else {
				// Single bank transfer, ack when ready
				udd_ep_in_sent(ep, true);
  40523a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40523e:	2101      	movs	r1, #1
  405240:	4618      	mov	r0, r3
  405242:	4b3a      	ldr	r3, [pc, #232]	; (40532c <udd_ep_interrupt+0x4e8>)
  405244:	4798      	blx	r3
				udd_ack_in_sent(ep);
  405246:	4a38      	ldr	r2, [pc, #224]	; (405328 <udd_ep_interrupt+0x4e4>)
  405248:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40524c:	330c      	adds	r3, #12
  40524e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405252:	60bb      	str	r3, [r7, #8]
  405254:	68bb      	ldr	r3, [r7, #8]
  405256:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  40525a:	60bb      	str	r3, [r7, #8]
  40525c:	68bb      	ldr	r3, [r7, #8]
  40525e:	f023 0301 	bic.w	r3, r3, #1
  405262:	60bb      	str	r3, [r7, #8]
  405264:	4930      	ldr	r1, [pc, #192]	; (405328 <udd_ep_interrupt+0x4e4>)
  405266:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40526a:	68ba      	ldr	r2, [r7, #8]
  40526c:	330c      	adds	r3, #12
  40526e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  405272:	bf00      	nop
  405274:	4a2c      	ldr	r2, [pc, #176]	; (405328 <udd_ep_interrupt+0x4e4>)
  405276:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40527a:	330c      	adds	r3, #12
  40527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405280:	f003 0301 	and.w	r3, r3, #1
  405284:	2b00      	cmp	r3, #0
  405286:	d1f5      	bne.n	405274 <udd_ep_interrupt+0x430>
			}
			return true;
  405288:	2301      	movs	r3, #1
  40528a:	e049      	b.n	405320 <udd_ep_interrupt+0x4dc>
		}
		// Stall sent/CRC error
		if (Is_udd_stall(ep)) {
  40528c:	4a26      	ldr	r2, [pc, #152]	; (405328 <udd_ep_interrupt+0x4e4>)
  40528e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405292:	330c      	adds	r3, #12
  405294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  405298:	f003 0308 	and.w	r3, r3, #8
  40529c:	2b00      	cmp	r3, #0
  40529e:	d034      	beq.n	40530a <udd_ep_interrupt+0x4c6>
			udd_ack_stall(ep);
  4052a0:	4a21      	ldr	r2, [pc, #132]	; (405328 <udd_ep_interrupt+0x4e4>)
  4052a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4052a6:	330c      	adds	r3, #12
  4052a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4052ac:	607b      	str	r3, [r7, #4]
  4052ae:	687b      	ldr	r3, [r7, #4]
  4052b0:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
  4052b4:	607b      	str	r3, [r7, #4]
  4052b6:	687b      	ldr	r3, [r7, #4]
  4052b8:	f023 0308 	bic.w	r3, r3, #8
  4052bc:	607b      	str	r3, [r7, #4]
  4052be:	491a      	ldr	r1, [pc, #104]	; (405328 <udd_ep_interrupt+0x4e4>)
  4052c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4052c4:	687a      	ldr	r2, [r7, #4]
  4052c6:	330c      	adds	r3, #12
  4052c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  4052cc:	bf00      	nop
  4052ce:	4a16      	ldr	r2, [pc, #88]	; (405328 <udd_ep_interrupt+0x4e4>)
  4052d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4052d4:	330c      	adds	r3, #12
  4052d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4052da:	f003 0308 	and.w	r3, r3, #8
  4052de:	2b00      	cmp	r3, #0
  4052e0:	d1f5      	bne.n	4052ce <udd_ep_interrupt+0x48a>
			if (udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_OUT ||
  4052e2:	4a11      	ldr	r2, [pc, #68]	; (405328 <udd_ep_interrupt+0x4e4>)
  4052e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4052e8:	330c      	adds	r3, #12
  4052ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4052ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4052f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  4052f6:	d005      	beq.n	405304 <udd_ep_interrupt+0x4c0>
				udd_get_endpoint_type(ep) == UDP_CSR_EPTYPE_ISO_IN) {
  4052f8:	4a0b      	ldr	r2, [pc, #44]	; (405328 <udd_ep_interrupt+0x4e4>)
  4052fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4052fe:	330c      	adds	r3, #12
  405300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			}
			return true;
  405304:	2301      	movs	r3, #1
  405306:	e00b      	b.n	405320 <udd_ep_interrupt+0x4dc>
			continue;
  405308:	bf00      	nop
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
  40530a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40530e:	3301      	adds	r3, #1
  405310:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  405314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  405318:	2b02      	cmp	r3, #2
  40531a:	f67f ad9a 	bls.w	404e52 <udd_ep_interrupt+0xe>
		}
	}
	return false;
  40531e:	2300      	movs	r3, #0
}
  405320:	4618      	mov	r0, r3
  405322:	3738      	adds	r7, #56	; 0x38
  405324:	46bd      	mov	sp, r7
  405326:	bd80      	pop	{r7, pc}
  405328:	40084000 	.word	0x40084000
  40532c:	00404c31 	.word	0x00404c31
  405330:	00404915 	.word	0x00404915

00405334 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  405334:	b480      	push	{r7}
  405336:	af00      	add	r7, sp, #0
	while (1) {
  405338:	e7fe      	b.n	405338 <Dummy_Handler+0x4>
	...

0040533c <cpu_irq_save>:
{
  40533c:	b480      	push	{r7}
  40533e:	b083      	sub	sp, #12
  405340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  405342:	f3ef 8310 	mrs	r3, PRIMASK
  405346:	607b      	str	r3, [r7, #4]
  return(result);
  405348:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40534a:	2b00      	cmp	r3, #0
  40534c:	bf0c      	ite	eq
  40534e:	2301      	moveq	r3, #1
  405350:	2300      	movne	r3, #0
  405352:	b2db      	uxtb	r3, r3
  405354:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  405356:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  405358:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  40535c:	4b04      	ldr	r3, [pc, #16]	; (405370 <cpu_irq_save+0x34>)
  40535e:	2200      	movs	r2, #0
  405360:	701a      	strb	r2, [r3, #0]
	return flags;
  405362:	683b      	ldr	r3, [r7, #0]
}
  405364:	4618      	mov	r0, r3
  405366:	370c      	adds	r7, #12
  405368:	46bd      	mov	sp, r7
  40536a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40536e:	4770      	bx	lr
  405370:	200000c2 	.word	0x200000c2

00405374 <cpu_irq_is_enabled_flags>:
{
  405374:	b480      	push	{r7}
  405376:	b083      	sub	sp, #12
  405378:	af00      	add	r7, sp, #0
  40537a:	6078      	str	r0, [r7, #4]
	return (flags);
  40537c:	687b      	ldr	r3, [r7, #4]
  40537e:	2b00      	cmp	r3, #0
  405380:	bf14      	ite	ne
  405382:	2301      	movne	r3, #1
  405384:	2300      	moveq	r3, #0
  405386:	b2db      	uxtb	r3, r3
}
  405388:	4618      	mov	r0, r3
  40538a:	370c      	adds	r7, #12
  40538c:	46bd      	mov	sp, r7
  40538e:	f85d 7b04 	ldr.w	r7, [sp], #4
  405392:	4770      	bx	lr

00405394 <cpu_irq_restore>:
{
  405394:	b580      	push	{r7, lr}
  405396:	b082      	sub	sp, #8
  405398:	af00      	add	r7, sp, #0
  40539a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  40539c:	6878      	ldr	r0, [r7, #4]
  40539e:	4b07      	ldr	r3, [pc, #28]	; (4053bc <cpu_irq_restore+0x28>)
  4053a0:	4798      	blx	r3
  4053a2:	4603      	mov	r3, r0
  4053a4:	2b00      	cmp	r3, #0
  4053a6:	d005      	beq.n	4053b4 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4053a8:	4b05      	ldr	r3, [pc, #20]	; (4053c0 <cpu_irq_restore+0x2c>)
  4053aa:	2201      	movs	r2, #1
  4053ac:	701a      	strb	r2, [r3, #0]
  4053ae:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4053b2:	b662      	cpsie	i
}
  4053b4:	bf00      	nop
  4053b6:	3708      	adds	r7, #8
  4053b8:	46bd      	mov	sp, r7
  4053ba:	bd80      	pop	{r7, pc}
  4053bc:	00405375 	.word	0x00405375
  4053c0:	200000c2 	.word	0x200000c2

004053c4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4053c4:	b580      	push	{r7, lr}
  4053c6:	b084      	sub	sp, #16
  4053c8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  4053ca:	4b1e      	ldr	r3, [pc, #120]	; (405444 <Reset_Handler+0x80>)
  4053cc:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  4053ce:	4b1e      	ldr	r3, [pc, #120]	; (405448 <Reset_Handler+0x84>)
  4053d0:	60bb      	str	r3, [r7, #8]

	if (pSrc != pDest) {
  4053d2:	68fa      	ldr	r2, [r7, #12]
  4053d4:	68bb      	ldr	r3, [r7, #8]
  4053d6:	429a      	cmp	r2, r3
  4053d8:	d00c      	beq.n	4053f4 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  4053da:	e007      	b.n	4053ec <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  4053dc:	68bb      	ldr	r3, [r7, #8]
  4053de:	1d1a      	adds	r2, r3, #4
  4053e0:	60ba      	str	r2, [r7, #8]
  4053e2:	68fa      	ldr	r2, [r7, #12]
  4053e4:	1d11      	adds	r1, r2, #4
  4053e6:	60f9      	str	r1, [r7, #12]
  4053e8:	6812      	ldr	r2, [r2, #0]
  4053ea:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
  4053ec:	68bb      	ldr	r3, [r7, #8]
  4053ee:	4a17      	ldr	r2, [pc, #92]	; (40544c <Reset_Handler+0x88>)
  4053f0:	4293      	cmp	r3, r2
  4053f2:	d3f3      	bcc.n	4053dc <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  4053f4:	4b16      	ldr	r3, [pc, #88]	; (405450 <Reset_Handler+0x8c>)
  4053f6:	60bb      	str	r3, [r7, #8]
  4053f8:	e004      	b.n	405404 <Reset_Handler+0x40>
		*pDest++ = 0;
  4053fa:	68bb      	ldr	r3, [r7, #8]
  4053fc:	1d1a      	adds	r2, r3, #4
  4053fe:	60ba      	str	r2, [r7, #8]
  405400:	2200      	movs	r2, #0
  405402:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
  405404:	68bb      	ldr	r3, [r7, #8]
  405406:	4a13      	ldr	r2, [pc, #76]	; (405454 <Reset_Handler+0x90>)
  405408:	4293      	cmp	r3, r2
  40540a:	d3f6      	bcc.n	4053fa <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40540c:	4b12      	ldr	r3, [pc, #72]	; (405458 <Reset_Handler+0x94>)
  40540e:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  405410:	4a12      	ldr	r2, [pc, #72]	; (40545c <Reset_Handler+0x98>)
  405412:	68fb      	ldr	r3, [r7, #12]
  405414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  405418:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  40541a:	4b11      	ldr	r3, [pc, #68]	; (405460 <Reset_Handler+0x9c>)
  40541c:	4798      	blx	r3
  40541e:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  405420:	4a10      	ldr	r2, [pc, #64]	; (405464 <Reset_Handler+0xa0>)
  405422:	4b10      	ldr	r3, [pc, #64]	; (405464 <Reset_Handler+0xa0>)
  405424:	681b      	ldr	r3, [r3, #0]
  405426:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  40542a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  40542c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  405430:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  405434:	6878      	ldr	r0, [r7, #4]
  405436:	4b0c      	ldr	r3, [pc, #48]	; (405468 <Reset_Handler+0xa4>)
  405438:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

	/* Initialize the C library */
	__libc_init_array();
  40543a:	4b0c      	ldr	r3, [pc, #48]	; (40546c <Reset_Handler+0xa8>)
  40543c:	4798      	blx	r3

	/* Branch to main function */
	main();
  40543e:	4b0c      	ldr	r3, [pc, #48]	; (405470 <Reset_Handler+0xac>)
  405440:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  405442:	e7fe      	b.n	405442 <Reset_Handler+0x7e>
  405444:	0040720c 	.word	0x0040720c
  405448:	20000000 	.word	0x20000000
  40544c:	200004fc 	.word	0x200004fc
  405450:	200004fc 	.word	0x200004fc
  405454:	2000a784 	.word	0x2000a784
  405458:	00400000 	.word	0x00400000
  40545c:	e000ed00 	.word	0xe000ed00
  405460:	0040533d 	.word	0x0040533d
  405464:	e000ed88 	.word	0xe000ed88
  405468:	00405395 	.word	0x00405395
  40546c:	00406e41 	.word	0x00406e41
  405470:	00406c49 	.word	0x00406c49

00405474 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  405474:	b480      	push	{r7}
  405476:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  405478:	4b52      	ldr	r3, [pc, #328]	; (4055c4 <SystemCoreClockUpdate+0x150>)
  40547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40547c:	f003 0303 	and.w	r3, r3, #3
  405480:	2b01      	cmp	r3, #1
  405482:	d014      	beq.n	4054ae <SystemCoreClockUpdate+0x3a>
  405484:	2b01      	cmp	r3, #1
  405486:	d302      	bcc.n	40548e <SystemCoreClockUpdate+0x1a>
  405488:	2b02      	cmp	r3, #2
  40548a:	d038      	beq.n	4054fe <SystemCoreClockUpdate+0x8a>
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
		}
		break;

	default:
		break;
  40548c:	e07a      	b.n	405584 <SystemCoreClockUpdate+0x110>
		if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  40548e:	4b4e      	ldr	r3, [pc, #312]	; (4055c8 <SystemCoreClockUpdate+0x154>)
  405490:	695b      	ldr	r3, [r3, #20]
  405492:	f003 0380 	and.w	r3, r3, #128	; 0x80
  405496:	2b00      	cmp	r3, #0
  405498:	d004      	beq.n	4054a4 <SystemCoreClockUpdate+0x30>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40549a:	4b4c      	ldr	r3, [pc, #304]	; (4055cc <SystemCoreClockUpdate+0x158>)
  40549c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4054a0:	601a      	str	r2, [r3, #0]
		break;
  4054a2:	e06f      	b.n	405584 <SystemCoreClockUpdate+0x110>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4054a4:	4b49      	ldr	r3, [pc, #292]	; (4055cc <SystemCoreClockUpdate+0x158>)
  4054a6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4054aa:	601a      	str	r2, [r3, #0]
		break;
  4054ac:	e06a      	b.n	405584 <SystemCoreClockUpdate+0x110>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4054ae:	4b45      	ldr	r3, [pc, #276]	; (4055c4 <SystemCoreClockUpdate+0x150>)
  4054b0:	6a1b      	ldr	r3, [r3, #32]
  4054b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4054b6:	2b00      	cmp	r3, #0
  4054b8:	d003      	beq.n	4054c2 <SystemCoreClockUpdate+0x4e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4054ba:	4b44      	ldr	r3, [pc, #272]	; (4055cc <SystemCoreClockUpdate+0x158>)
  4054bc:	4a44      	ldr	r2, [pc, #272]	; (4055d0 <SystemCoreClockUpdate+0x15c>)
  4054be:	601a      	str	r2, [r3, #0]
		break;
  4054c0:	e060      	b.n	405584 <SystemCoreClockUpdate+0x110>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4054c2:	4b42      	ldr	r3, [pc, #264]	; (4055cc <SystemCoreClockUpdate+0x158>)
  4054c4:	4a43      	ldr	r2, [pc, #268]	; (4055d4 <SystemCoreClockUpdate+0x160>)
  4054c6:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4054c8:	4b3e      	ldr	r3, [pc, #248]	; (4055c4 <SystemCoreClockUpdate+0x150>)
  4054ca:	6a1b      	ldr	r3, [r3, #32]
  4054cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4054d0:	2b10      	cmp	r3, #16
  4054d2:	d004      	beq.n	4054de <SystemCoreClockUpdate+0x6a>
  4054d4:	2b20      	cmp	r3, #32
  4054d6:	d008      	beq.n	4054ea <SystemCoreClockUpdate+0x76>
  4054d8:	2b00      	cmp	r3, #0
  4054da:	d00e      	beq.n	4054fa <SystemCoreClockUpdate+0x86>
				break;
  4054dc:	e00e      	b.n	4054fc <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 2U;
  4054de:	4b3b      	ldr	r3, [pc, #236]	; (4055cc <SystemCoreClockUpdate+0x158>)
  4054e0:	681b      	ldr	r3, [r3, #0]
  4054e2:	005b      	lsls	r3, r3, #1
  4054e4:	4a39      	ldr	r2, [pc, #228]	; (4055cc <SystemCoreClockUpdate+0x158>)
  4054e6:	6013      	str	r3, [r2, #0]
				break;
  4054e8:	e008      	b.n	4054fc <SystemCoreClockUpdate+0x88>
				SystemCoreClock *= 3U;
  4054ea:	4b38      	ldr	r3, [pc, #224]	; (4055cc <SystemCoreClockUpdate+0x158>)
  4054ec:	681a      	ldr	r2, [r3, #0]
  4054ee:	4613      	mov	r3, r2
  4054f0:	005b      	lsls	r3, r3, #1
  4054f2:	4413      	add	r3, r2
  4054f4:	4a35      	ldr	r2, [pc, #212]	; (4055cc <SystemCoreClockUpdate+0x158>)
  4054f6:	6013      	str	r3, [r2, #0]
				break;
  4054f8:	e000      	b.n	4054fc <SystemCoreClockUpdate+0x88>
				break;
  4054fa:	bf00      	nop
		break;
  4054fc:	e042      	b.n	405584 <SystemCoreClockUpdate+0x110>
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4054fe:	4b31      	ldr	r3, [pc, #196]	; (4055c4 <SystemCoreClockUpdate+0x150>)
  405500:	6a1b      	ldr	r3, [r3, #32]
  405502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  405506:	2b00      	cmp	r3, #0
  405508:	d003      	beq.n	405512 <SystemCoreClockUpdate+0x9e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40550a:	4b30      	ldr	r3, [pc, #192]	; (4055cc <SystemCoreClockUpdate+0x158>)
  40550c:	4a30      	ldr	r2, [pc, #192]	; (4055d0 <SystemCoreClockUpdate+0x15c>)
  40550e:	601a      	str	r2, [r3, #0]
  405510:	e01c      	b.n	40554c <SystemCoreClockUpdate+0xd8>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  405512:	4b2e      	ldr	r3, [pc, #184]	; (4055cc <SystemCoreClockUpdate+0x158>)
  405514:	4a2f      	ldr	r2, [pc, #188]	; (4055d4 <SystemCoreClockUpdate+0x160>)
  405516:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  405518:	4b2a      	ldr	r3, [pc, #168]	; (4055c4 <SystemCoreClockUpdate+0x150>)
  40551a:	6a1b      	ldr	r3, [r3, #32]
  40551c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  405520:	2b10      	cmp	r3, #16
  405522:	d004      	beq.n	40552e <SystemCoreClockUpdate+0xba>
  405524:	2b20      	cmp	r3, #32
  405526:	d008      	beq.n	40553a <SystemCoreClockUpdate+0xc6>
  405528:	2b00      	cmp	r3, #0
  40552a:	d00e      	beq.n	40554a <SystemCoreClockUpdate+0xd6>
				break;
  40552c:	e00e      	b.n	40554c <SystemCoreClockUpdate+0xd8>
				SystemCoreClock *= 2U;
  40552e:	4b27      	ldr	r3, [pc, #156]	; (4055cc <SystemCoreClockUpdate+0x158>)
  405530:	681b      	ldr	r3, [r3, #0]
  405532:	005b      	lsls	r3, r3, #1
  405534:	4a25      	ldr	r2, [pc, #148]	; (4055cc <SystemCoreClockUpdate+0x158>)
  405536:	6013      	str	r3, [r2, #0]
				break;
  405538:	e008      	b.n	40554c <SystemCoreClockUpdate+0xd8>
				SystemCoreClock *= 3U;
  40553a:	4b24      	ldr	r3, [pc, #144]	; (4055cc <SystemCoreClockUpdate+0x158>)
  40553c:	681a      	ldr	r2, [r3, #0]
  40553e:	4613      	mov	r3, r2
  405540:	005b      	lsls	r3, r3, #1
  405542:	4413      	add	r3, r2
  405544:	4a21      	ldr	r2, [pc, #132]	; (4055cc <SystemCoreClockUpdate+0x158>)
  405546:	6013      	str	r3, [r2, #0]
				break;
  405548:	e000      	b.n	40554c <SystemCoreClockUpdate+0xd8>
				break;
  40554a:	bf00      	nop
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK)
  40554c:	4b1d      	ldr	r3, [pc, #116]	; (4055c4 <SystemCoreClockUpdate+0x150>)
  40554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405550:	f003 0303 	and.w	r3, r3, #3
  405554:	2b02      	cmp	r3, #2
  405556:	d114      	bne.n	405582 <SystemCoreClockUpdate+0x10e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  405558:	4b1a      	ldr	r3, [pc, #104]	; (4055c4 <SystemCoreClockUpdate+0x150>)
  40555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40555c:	0c1b      	lsrs	r3, r3, #16
  40555e:	f3c3 030a 	ubfx	r3, r3, #0, #11
  405562:	3301      	adds	r3, #1
  405564:	4a19      	ldr	r2, [pc, #100]	; (4055cc <SystemCoreClockUpdate+0x158>)
  405566:	6812      	ldr	r2, [r2, #0]
  405568:	fb02 f303 	mul.w	r3, r2, r3
  40556c:	4a17      	ldr	r2, [pc, #92]	; (4055cc <SystemCoreClockUpdate+0x158>)
  40556e:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  405570:	4b14      	ldr	r3, [pc, #80]	; (4055c4 <SystemCoreClockUpdate+0x150>)
  405572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  405574:	b2db      	uxtb	r3, r3
  405576:	4a15      	ldr	r2, [pc, #84]	; (4055cc <SystemCoreClockUpdate+0x158>)
  405578:	6812      	ldr	r2, [r2, #0]
  40557a:	fbb2 f3f3 	udiv	r3, r2, r3
  40557e:	4a13      	ldr	r2, [pc, #76]	; (4055cc <SystemCoreClockUpdate+0x158>)
  405580:	6013      	str	r3, [r2, #0]
		break;
  405582:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  405584:	4b0f      	ldr	r3, [pc, #60]	; (4055c4 <SystemCoreClockUpdate+0x150>)
  405586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  405588:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40558c:	2b70      	cmp	r3, #112	; 0x70
  40558e:	d108      	bne.n	4055a2 <SystemCoreClockUpdate+0x12e>
		SystemCoreClock /= 3U;
  405590:	4b0e      	ldr	r3, [pc, #56]	; (4055cc <SystemCoreClockUpdate+0x158>)
  405592:	681b      	ldr	r3, [r3, #0]
  405594:	4a10      	ldr	r2, [pc, #64]	; (4055d8 <SystemCoreClockUpdate+0x164>)
  405596:	fba2 2303 	umull	r2, r3, r2, r3
  40559a:	085b      	lsrs	r3, r3, #1
  40559c:	4a0b      	ldr	r2, [pc, #44]	; (4055cc <SystemCoreClockUpdate+0x158>)
  40559e:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
				PMC_MCKR_PRES_Pos);
	}
}
  4055a0:	e00a      	b.n	4055b8 <SystemCoreClockUpdate+0x144>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  4055a2:	4b08      	ldr	r3, [pc, #32]	; (4055c4 <SystemCoreClockUpdate+0x150>)
  4055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4055a6:	091b      	lsrs	r3, r3, #4
  4055a8:	f003 0307 	and.w	r3, r3, #7
  4055ac:	4a07      	ldr	r2, [pc, #28]	; (4055cc <SystemCoreClockUpdate+0x158>)
  4055ae:	6812      	ldr	r2, [r2, #0]
  4055b0:	fa22 f303 	lsr.w	r3, r2, r3
  4055b4:	4a05      	ldr	r2, [pc, #20]	; (4055cc <SystemCoreClockUpdate+0x158>)
  4055b6:	6013      	str	r3, [r2, #0]
}
  4055b8:	bf00      	nop
  4055ba:	46bd      	mov	sp, r7
  4055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4055c0:	4770      	bx	lr
  4055c2:	bf00      	nop
  4055c4:	400e0400 	.word	0x400e0400
  4055c8:	400e1810 	.word	0x400e1810
  4055cc:	200000c8 	.word	0x200000c8
  4055d0:	00b71b00 	.word	0x00b71b00
  4055d4:	003d0900 	.word	0x003d0900
  4055d8:	aaaaaaab 	.word	0xaaaaaaab

004055dc <system_init_flash>:

/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  4055dc:	b480      	push	{r7}
  4055de:	b083      	sub	sp, #12
  4055e0:	af00      	add	r7, sp, #0
  4055e2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  4055e4:	687b      	ldr	r3, [r7, #4]
  4055e6:	4a19      	ldr	r2, [pc, #100]	; (40564c <system_init_flash+0x70>)
  4055e8:	4293      	cmp	r3, r2
  4055ea:	d804      	bhi.n	4055f6 <system_init_flash+0x1a>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4055ec:	4b18      	ldr	r3, [pc, #96]	; (405650 <system_init_flash+0x74>)
  4055ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4055f2:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
	}
}
  4055f4:	e023      	b.n	40563e <system_init_flash+0x62>
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4055f6:	687b      	ldr	r3, [r7, #4]
  4055f8:	4a16      	ldr	r2, [pc, #88]	; (405654 <system_init_flash+0x78>)
  4055fa:	4293      	cmp	r3, r2
  4055fc:	d803      	bhi.n	405606 <system_init_flash+0x2a>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4055fe:	4b14      	ldr	r3, [pc, #80]	; (405650 <system_init_flash+0x74>)
  405600:	4a15      	ldr	r2, [pc, #84]	; (405658 <system_init_flash+0x7c>)
  405602:	601a      	str	r2, [r3, #0]
}
  405604:	e01b      	b.n	40563e <system_init_flash+0x62>
			if (ul_clk < CHIP_FREQ_FWS_2) {
  405606:	687b      	ldr	r3, [r7, #4]
  405608:	4a14      	ldr	r2, [pc, #80]	; (40565c <system_init_flash+0x80>)
  40560a:	4293      	cmp	r3, r2
  40560c:	d803      	bhi.n	405616 <system_init_flash+0x3a>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40560e:	4b10      	ldr	r3, [pc, #64]	; (405650 <system_init_flash+0x74>)
  405610:	4a13      	ldr	r2, [pc, #76]	; (405660 <system_init_flash+0x84>)
  405612:	601a      	str	r2, [r3, #0]
}
  405614:	e013      	b.n	40563e <system_init_flash+0x62>
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  405616:	687b      	ldr	r3, [r7, #4]
  405618:	4a12      	ldr	r2, [pc, #72]	; (405664 <system_init_flash+0x88>)
  40561a:	4293      	cmp	r3, r2
  40561c:	d803      	bhi.n	405626 <system_init_flash+0x4a>
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40561e:	4b0c      	ldr	r3, [pc, #48]	; (405650 <system_init_flash+0x74>)
  405620:	4a11      	ldr	r2, [pc, #68]	; (405668 <system_init_flash+0x8c>)
  405622:	601a      	str	r2, [r3, #0]
}
  405624:	e00b      	b.n	40563e <system_init_flash+0x62>
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  405626:	687b      	ldr	r3, [r7, #4]
  405628:	4a10      	ldr	r2, [pc, #64]	; (40566c <system_init_flash+0x90>)
  40562a:	4293      	cmp	r3, r2
  40562c:	d804      	bhi.n	405638 <system_init_flash+0x5c>
						EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40562e:	4b08      	ldr	r3, [pc, #32]	; (405650 <system_init_flash+0x74>)
  405630:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  405634:	601a      	str	r2, [r3, #0]
}
  405636:	e002      	b.n	40563e <system_init_flash+0x62>
						EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  405638:	4b05      	ldr	r3, [pc, #20]	; (405650 <system_init_flash+0x74>)
  40563a:	4a0d      	ldr	r2, [pc, #52]	; (405670 <system_init_flash+0x94>)
  40563c:	601a      	str	r2, [r3, #0]
}
  40563e:	bf00      	nop
  405640:	370c      	adds	r7, #12
  405642:	46bd      	mov	sp, r7
  405644:	f85d 7b04 	ldr.w	r7, [sp], #4
  405648:	4770      	bx	lr
  40564a:	bf00      	nop
  40564c:	01312cff 	.word	0x01312cff
  405650:	400e0a00 	.word	0x400e0a00
  405654:	026259ff 	.word	0x026259ff
  405658:	04000100 	.word	0x04000100
  40565c:	039386ff 	.word	0x039386ff
  405660:	04000200 	.word	0x04000200
  405664:	04c4b3ff 	.word	0x04c4b3ff
  405668:	04000300 	.word	0x04000300
  40566c:	05f5e0ff 	.word	0x05f5e0ff
  405670:	04000500 	.word	0x04000500

00405674 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
  405674:	b480      	push	{r7}
  405676:	b083      	sub	sp, #12
  405678:	af00      	add	r7, sp, #0
  40567a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40567c:	687b      	ldr	r3, [r7, #4]
  40567e:	f103 0208 	add.w	r2, r3, #8
  405682:	687b      	ldr	r3, [r7, #4]
  405684:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  405686:	687b      	ldr	r3, [r7, #4]
  405688:	f04f 32ff 	mov.w	r2, #4294967295
  40568c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40568e:	687b      	ldr	r3, [r7, #4]
  405690:	f103 0208 	add.w	r2, r3, #8
  405694:	687b      	ldr	r3, [r7, #4]
  405696:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  405698:	687b      	ldr	r3, [r7, #4]
  40569a:	f103 0208 	add.w	r2, r3, #8
  40569e:	687b      	ldr	r3, [r7, #4]
  4056a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  4056a2:	687b      	ldr	r3, [r7, #4]
  4056a4:	2200      	movs	r2, #0
  4056a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
  4056a8:	bf00      	nop
  4056aa:	370c      	adds	r7, #12
  4056ac:	46bd      	mov	sp, r7
  4056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056b2:	4770      	bx	lr

004056b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
  4056b4:	b480      	push	{r7}
  4056b6:	b083      	sub	sp, #12
  4056b8:	af00      	add	r7, sp, #0
  4056ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  4056bc:	687b      	ldr	r3, [r7, #4]
  4056be:	2200      	movs	r2, #0
  4056c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
  4056c2:	bf00      	nop
  4056c4:	370c      	adds	r7, #12
  4056c6:	46bd      	mov	sp, r7
  4056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4056cc:	4770      	bx	lr

004056ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  4056ce:	b480      	push	{r7}
  4056d0:	b085      	sub	sp, #20
  4056d2:	af00      	add	r7, sp, #0
  4056d4:	6078      	str	r0, [r7, #4]
  4056d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
  4056d8:	687b      	ldr	r3, [r7, #4]
  4056da:	685b      	ldr	r3, [r3, #4]
  4056dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  4056de:	683b      	ldr	r3, [r7, #0]
  4056e0:	68fa      	ldr	r2, [r7, #12]
  4056e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  4056e4:	68fb      	ldr	r3, [r7, #12]
  4056e6:	689a      	ldr	r2, [r3, #8]
  4056e8:	683b      	ldr	r3, [r7, #0]
  4056ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  4056ec:	68fb      	ldr	r3, [r7, #12]
  4056ee:	689b      	ldr	r3, [r3, #8]
  4056f0:	683a      	ldr	r2, [r7, #0]
  4056f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
  4056f4:	68fb      	ldr	r3, [r7, #12]
  4056f6:	683a      	ldr	r2, [r7, #0]
  4056f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  4056fa:	683b      	ldr	r3, [r7, #0]
  4056fc:	687a      	ldr	r2, [r7, #4]
  4056fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  405700:	687b      	ldr	r3, [r7, #4]
  405702:	681b      	ldr	r3, [r3, #0]
  405704:	1c5a      	adds	r2, r3, #1
  405706:	687b      	ldr	r3, [r7, #4]
  405708:	601a      	str	r2, [r3, #0]
}
  40570a:	bf00      	nop
  40570c:	3714      	adds	r7, #20
  40570e:	46bd      	mov	sp, r7
  405710:	f85d 7b04 	ldr.w	r7, [sp], #4
  405714:	4770      	bx	lr

00405716 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  405716:	b480      	push	{r7}
  405718:	b085      	sub	sp, #20
  40571a:	af00      	add	r7, sp, #0
  40571c:	6078      	str	r0, [r7, #4]
  40571e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  405720:	683b      	ldr	r3, [r7, #0]
  405722:	681b      	ldr	r3, [r3, #0]
  405724:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  405726:	68bb      	ldr	r3, [r7, #8]
  405728:	f1b3 3fff 	cmp.w	r3, #4294967295
  40572c:	d103      	bne.n	405736 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
  40572e:	687b      	ldr	r3, [r7, #4]
  405730:	691b      	ldr	r3, [r3, #16]
  405732:	60fb      	str	r3, [r7, #12]
  405734:	e00c      	b.n	405750 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  405736:	687b      	ldr	r3, [r7, #4]
  405738:	3308      	adds	r3, #8
  40573a:	60fb      	str	r3, [r7, #12]
  40573c:	e002      	b.n	405744 <vListInsert+0x2e>
  40573e:	68fb      	ldr	r3, [r7, #12]
  405740:	685b      	ldr	r3, [r3, #4]
  405742:	60fb      	str	r3, [r7, #12]
  405744:	68fb      	ldr	r3, [r7, #12]
  405746:	685b      	ldr	r3, [r3, #4]
  405748:	681a      	ldr	r2, [r3, #0]
  40574a:	68bb      	ldr	r3, [r7, #8]
  40574c:	429a      	cmp	r2, r3
  40574e:	d9f6      	bls.n	40573e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  405750:	68fb      	ldr	r3, [r7, #12]
  405752:	685a      	ldr	r2, [r3, #4]
  405754:	683b      	ldr	r3, [r7, #0]
  405756:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  405758:	683b      	ldr	r3, [r7, #0]
  40575a:	685b      	ldr	r3, [r3, #4]
  40575c:	683a      	ldr	r2, [r7, #0]
  40575e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  405760:	683b      	ldr	r3, [r7, #0]
  405762:	68fa      	ldr	r2, [r7, #12]
  405764:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
  405766:	68fb      	ldr	r3, [r7, #12]
  405768:	683a      	ldr	r2, [r7, #0]
  40576a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40576c:	683b      	ldr	r3, [r7, #0]
  40576e:	687a      	ldr	r2, [r7, #4]
  405770:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
  405772:	687b      	ldr	r3, [r7, #4]
  405774:	681b      	ldr	r3, [r3, #0]
  405776:	1c5a      	adds	r2, r3, #1
  405778:	687b      	ldr	r3, [r7, #4]
  40577a:	601a      	str	r2, [r3, #0]
}
  40577c:	bf00      	nop
  40577e:	3714      	adds	r7, #20
  405780:	46bd      	mov	sp, r7
  405782:	f85d 7b04 	ldr.w	r7, [sp], #4
  405786:	4770      	bx	lr

00405788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
  405788:	b480      	push	{r7}
  40578a:	b085      	sub	sp, #20
  40578c:	af00      	add	r7, sp, #0
  40578e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  405790:	687b      	ldr	r3, [r7, #4]
  405792:	691b      	ldr	r3, [r3, #16]
  405794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  405796:	687b      	ldr	r3, [r7, #4]
  405798:	685b      	ldr	r3, [r3, #4]
  40579a:	687a      	ldr	r2, [r7, #4]
  40579c:	6892      	ldr	r2, [r2, #8]
  40579e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  4057a0:	687b      	ldr	r3, [r7, #4]
  4057a2:	689b      	ldr	r3, [r3, #8]
  4057a4:	687a      	ldr	r2, [r7, #4]
  4057a6:	6852      	ldr	r2, [r2, #4]
  4057a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  4057aa:	68fb      	ldr	r3, [r7, #12]
  4057ac:	685a      	ldr	r2, [r3, #4]
  4057ae:	687b      	ldr	r3, [r7, #4]
  4057b0:	429a      	cmp	r2, r3
  4057b2:	d103      	bne.n	4057bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4057b4:	687b      	ldr	r3, [r7, #4]
  4057b6:	689a      	ldr	r2, [r3, #8]
  4057b8:	68fb      	ldr	r3, [r7, #12]
  4057ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  4057bc:	687b      	ldr	r3, [r7, #4]
  4057be:	2200      	movs	r2, #0
  4057c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
  4057c2:	68fb      	ldr	r3, [r7, #12]
  4057c4:	681b      	ldr	r3, [r3, #0]
  4057c6:	1e5a      	subs	r2, r3, #1
  4057c8:	68fb      	ldr	r3, [r7, #12]
  4057ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  4057cc:	68fb      	ldr	r3, [r7, #12]
  4057ce:	681b      	ldr	r3, [r3, #0]
}
  4057d0:	4618      	mov	r0, r3
  4057d2:	3714      	adds	r7, #20
  4057d4:	46bd      	mov	sp, r7
  4057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4057da:	4770      	bx	lr

004057dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
  4057dc:	b480      	push	{r7}
  4057de:	b085      	sub	sp, #20
  4057e0:	af00      	add	r7, sp, #0
  4057e2:	60f8      	str	r0, [r7, #12]
  4057e4:	60b9      	str	r1, [r7, #8]
  4057e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
  4057e8:	68fb      	ldr	r3, [r7, #12]
  4057ea:	3b04      	subs	r3, #4
  4057ec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  4057ee:	68fb      	ldr	r3, [r7, #12]
  4057f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  4057f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  4057f6:	68fb      	ldr	r3, [r7, #12]
  4057f8:	3b04      	subs	r3, #4
  4057fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  4057fc:	68bb      	ldr	r3, [r7, #8]
  4057fe:	f023 0201 	bic.w	r2, r3, #1
  405802:	68fb      	ldr	r3, [r7, #12]
  405804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
  405806:	68fb      	ldr	r3, [r7, #12]
  405808:	3b04      	subs	r3, #4
  40580a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40580c:	4a09      	ldr	r2, [pc, #36]	; (405834 <pxPortInitialiseStack+0x58>)
  40580e:	68fb      	ldr	r3, [r7, #12]
  405810:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  405812:	68fb      	ldr	r3, [r7, #12]
  405814:	3b14      	subs	r3, #20
  405816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  405818:	687a      	ldr	r2, [r7, #4]
  40581a:	68fb      	ldr	r3, [r7, #12]
  40581c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  40581e:	68fb      	ldr	r3, [r7, #12]
  405820:	3b20      	subs	r3, #32
  405822:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
  405824:	68fb      	ldr	r3, [r7, #12]
}
  405826:	4618      	mov	r0, r3
  405828:	3714      	adds	r7, #20
  40582a:	46bd      	mov	sp, r7
  40582c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405830:	4770      	bx	lr
  405832:	bf00      	nop
  405834:	00405839 	.word	0x00405839

00405838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  405838:	b480      	push	{r7}
  40583a:	b083      	sub	sp, #12
  40583c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
  40583e:	2300      	movs	r3, #0
  405840:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  405842:	f04f 0350 	mov.w	r3, #80	; 0x50
  405846:	f383 8811 	msr	BASEPRI, r3
  40584a:	f3bf 8f6f 	isb	sy
  40584e:	f3bf 8f4f 	dsb	sy
  405852:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  405854:	bf00      	nop
  405856:	683b      	ldr	r3, [r7, #0]
  405858:	2b00      	cmp	r3, #0
  40585a:	d0fc      	beq.n	405856 <prvTaskExitError+0x1e>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  40585c:	bf00      	nop
  40585e:	370c      	adds	r7, #12
  405860:	46bd      	mov	sp, r7
  405862:	f85d 7b04 	ldr.w	r7, [sp], #4
  405866:	4770      	bx	lr
	...

00405870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
  405870:	4b07      	ldr	r3, [pc, #28]	; (405890 <pxCurrentTCBConst2>)
  405872:	6819      	ldr	r1, [r3, #0]
  405874:	6808      	ldr	r0, [r1, #0]
  405876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  40587a:	f380 8809 	msr	PSP, r0
  40587e:	f3bf 8f6f 	isb	sy
  405882:	f04f 0000 	mov.w	r0, #0
  405886:	f380 8811 	msr	BASEPRI, r0
  40588a:	f04e 0e0d 	orr.w	lr, lr, #13
  40588e:	4770      	bx	lr

00405890 <pxCurrentTCBConst2>:
  405890:	2000a650 	.word	0x2000a650
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
  405894:	bf00      	nop
  405896:	bf00      	nop

00405898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  405898:	4806      	ldr	r0, [pc, #24]	; (4058b4 <prvPortStartFirstTask+0x1c>)
  40589a:	6800      	ldr	r0, [r0, #0]
  40589c:	6800      	ldr	r0, [r0, #0]
  40589e:	f380 8808 	msr	MSP, r0
  4058a2:	b662      	cpsie	i
  4058a4:	b661      	cpsie	f
  4058a6:	f3bf 8f4f 	dsb	sy
  4058aa:	f3bf 8f6f 	isb	sy
  4058ae:	df00      	svc	0
  4058b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
  4058b2:	bf00      	nop
  4058b4:	e000ed08 	.word	0xe000ed08

004058b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
  4058b8:	b580      	push	{r7, lr}
  4058ba:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4058bc:	4a0c      	ldr	r2, [pc, #48]	; (4058f0 <xPortStartScheduler+0x38>)
  4058be:	4b0c      	ldr	r3, [pc, #48]	; (4058f0 <xPortStartScheduler+0x38>)
  4058c0:	681b      	ldr	r3, [r3, #0]
  4058c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4058c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4058c8:	4a09      	ldr	r2, [pc, #36]	; (4058f0 <xPortStartScheduler+0x38>)
  4058ca:	4b09      	ldr	r3, [pc, #36]	; (4058f0 <xPortStartScheduler+0x38>)
  4058cc:	681b      	ldr	r3, [r3, #0]
  4058ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
  4058d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
  4058d4:	4b07      	ldr	r3, [pc, #28]	; (4058f4 <xPortStartScheduler+0x3c>)
  4058d6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
  4058d8:	4b07      	ldr	r3, [pc, #28]	; (4058f8 <xPortStartScheduler+0x40>)
  4058da:	2200      	movs	r2, #0
  4058dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
  4058de:	4b07      	ldr	r3, [pc, #28]	; (4058fc <xPortStartScheduler+0x44>)
  4058e0:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
  4058e2:	4b07      	ldr	r3, [pc, #28]	; (405900 <xPortStartScheduler+0x48>)
  4058e4:	4798      	blx	r3
	prvTaskExitError();
  4058e6:	4b07      	ldr	r3, [pc, #28]	; (405904 <xPortStartScheduler+0x4c>)
  4058e8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
  4058ea:	2300      	movs	r3, #0
}
  4058ec:	4618      	mov	r0, r3
  4058ee:	bd80      	pop	{r7, pc}
  4058f0:	e000ed20 	.word	0xe000ed20
  4058f4:	004059fd 	.word	0x004059fd
  4058f8:	200000cc 	.word	0x200000cc
  4058fc:	00405899 	.word	0x00405899
  405900:	0040672d 	.word	0x0040672d
  405904:	00405839 	.word	0x00405839

00405908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
  405908:	b480      	push	{r7}
  40590a:	b083      	sub	sp, #12
  40590c:	af00      	add	r7, sp, #0
  40590e:	f04f 0350 	mov.w	r3, #80	; 0x50
  405912:	f383 8811 	msr	BASEPRI, r3
  405916:	f3bf 8f6f 	isb	sy
  40591a:	f3bf 8f4f 	dsb	sy
  40591e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
  405920:	4b05      	ldr	r3, [pc, #20]	; (405938 <vPortEnterCritical+0x30>)
  405922:	681b      	ldr	r3, [r3, #0]
  405924:	3301      	adds	r3, #1
  405926:	4a04      	ldr	r2, [pc, #16]	; (405938 <vPortEnterCritical+0x30>)
  405928:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
  40592a:	bf00      	nop
  40592c:	370c      	adds	r7, #12
  40592e:	46bd      	mov	sp, r7
  405930:	f85d 7b04 	ldr.w	r7, [sp], #4
  405934:	4770      	bx	lr
  405936:	bf00      	nop
  405938:	200000cc 	.word	0x200000cc

0040593c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
  40593c:	b480      	push	{r7}
  40593e:	b083      	sub	sp, #12
  405940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
  405942:	4b0a      	ldr	r3, [pc, #40]	; (40596c <vPortExitCritical+0x30>)
  405944:	681b      	ldr	r3, [r3, #0]
  405946:	3b01      	subs	r3, #1
  405948:	4a08      	ldr	r2, [pc, #32]	; (40596c <vPortExitCritical+0x30>)
  40594a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  40594c:	4b07      	ldr	r3, [pc, #28]	; (40596c <vPortExitCritical+0x30>)
  40594e:	681b      	ldr	r3, [r3, #0]
  405950:	2b00      	cmp	r3, #0
  405952:	d104      	bne.n	40595e <vPortExitCritical+0x22>
  405954:	2300      	movs	r3, #0
  405956:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  405958:	687b      	ldr	r3, [r7, #4]
  40595a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
  40595e:	bf00      	nop
  405960:	370c      	adds	r7, #12
  405962:	46bd      	mov	sp, r7
  405964:	f85d 7b04 	ldr.w	r7, [sp], #4
  405968:	4770      	bx	lr
  40596a:	bf00      	nop
  40596c:	200000cc 	.word	0x200000cc

00405970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
  405970:	f3ef 8009 	mrs	r0, PSP
  405974:	f3bf 8f6f 	isb	sy
  405978:	4b0d      	ldr	r3, [pc, #52]	; (4059b0 <pxCurrentTCBConst>)
  40597a:	681a      	ldr	r2, [r3, #0]
  40597c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  405980:	6010      	str	r0, [r2, #0]
  405982:	e92d 4008 	stmdb	sp!, {r3, lr}
  405986:	f04f 0050 	mov.w	r0, #80	; 0x50
  40598a:	f380 8811 	msr	BASEPRI, r0
  40598e:	f000 fecd 	bl	40672c <vTaskSwitchContext>
  405992:	f04f 0000 	mov.w	r0, #0
  405996:	f380 8811 	msr	BASEPRI, r0
  40599a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  40599e:	6819      	ldr	r1, [r3, #0]
  4059a0:	6808      	ldr	r0, [r1, #0]
  4059a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  4059a6:	f380 8809 	msr	PSP, r0
  4059aa:	f3bf 8f6f 	isb	sy
  4059ae:	4770      	bx	lr

004059b0 <pxCurrentTCBConst>:
  4059b0:	2000a650 	.word	0x2000a650
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
  4059b4:	bf00      	nop
  4059b6:	bf00      	nop

004059b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
  4059b8:	b580      	push	{r7, lr}
  4059ba:	b082      	sub	sp, #8
  4059bc:	af00      	add	r7, sp, #0
	__asm volatile
  4059be:	f04f 0350 	mov.w	r3, #80	; 0x50
  4059c2:	f383 8811 	msr	BASEPRI, r3
  4059c6:	f3bf 8f6f 	isb	sy
  4059ca:	f3bf 8f4f 	dsb	sy
  4059ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
  4059d0:	4b08      	ldr	r3, [pc, #32]	; (4059f4 <SysTick_Handler+0x3c>)
  4059d2:	4798      	blx	r3
  4059d4:	4603      	mov	r3, r0
  4059d6:	2b00      	cmp	r3, #0
  4059d8:	d003      	beq.n	4059e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4059da:	4b07      	ldr	r3, [pc, #28]	; (4059f8 <SysTick_Handler+0x40>)
  4059dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4059e0:	601a      	str	r2, [r3, #0]
  4059e2:	2300      	movs	r3, #0
  4059e4:	603b      	str	r3, [r7, #0]
	__asm volatile
  4059e6:	683b      	ldr	r3, [r7, #0]
  4059e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
  4059ec:	bf00      	nop
  4059ee:	3708      	adds	r7, #8
  4059f0:	46bd      	mov	sp, r7
  4059f2:	bd80      	pop	{r7, pc}
  4059f4:	004065c9 	.word	0x004065c9
  4059f8:	e000ed04 	.word	0xe000ed04

004059fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
  4059fc:	b480      	push	{r7}
  4059fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  405a00:	4b08      	ldr	r3, [pc, #32]	; (405a24 <vPortSetupTimerInterrupt+0x28>)
  405a02:	2200      	movs	r2, #0
  405a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  405a06:	4b08      	ldr	r3, [pc, #32]	; (405a28 <vPortSetupTimerInterrupt+0x2c>)
  405a08:	2200      	movs	r2, #0
  405a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  405a0c:	4b07      	ldr	r3, [pc, #28]	; (405a2c <vPortSetupTimerInterrupt+0x30>)
  405a0e:	4a08      	ldr	r2, [pc, #32]	; (405a30 <vPortSetupTimerInterrupt+0x34>)
  405a10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  405a12:	4b04      	ldr	r3, [pc, #16]	; (405a24 <vPortSetupTimerInterrupt+0x28>)
  405a14:	2207      	movs	r2, #7
  405a16:	601a      	str	r2, [r3, #0]
}
  405a18:	bf00      	nop
  405a1a:	46bd      	mov	sp, r7
  405a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
  405a20:	4770      	bx	lr
  405a22:	bf00      	nop
  405a24:	e000e010 	.word	0xe000e010
  405a28:	e000e018 	.word	0xe000e018
  405a2c:	e000e014 	.word	0xe000e014
  405a30:	0001d4bf 	.word	0x0001d4bf

00405a34 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  405a34:	b580      	push	{r7, lr}
  405a36:	b084      	sub	sp, #16
  405a38:	af00      	add	r7, sp, #0
  405a3a:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
  405a3c:	2300      	movs	r3, #0
  405a3e:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  405a40:	687b      	ldr	r3, [r7, #4]
  405a42:	f003 0307 	and.w	r3, r3, #7
  405a46:	2b00      	cmp	r3, #0
  405a48:	d004      	beq.n	405a54 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  405a4a:	687b      	ldr	r3, [r7, #4]
  405a4c:	f023 0307 	bic.w	r3, r3, #7
  405a50:	3308      	adds	r3, #8
  405a52:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
  405a54:	4b17      	ldr	r3, [pc, #92]	; (405ab4 <pvPortMalloc+0x80>)
  405a56:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  405a58:	4b17      	ldr	r3, [pc, #92]	; (405ab8 <pvPortMalloc+0x84>)
  405a5a:	681b      	ldr	r3, [r3, #0]
  405a5c:	2b00      	cmp	r3, #0
  405a5e:	d105      	bne.n	405a6c <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  405a60:	4b16      	ldr	r3, [pc, #88]	; (405abc <pvPortMalloc+0x88>)
  405a62:	f023 0307 	bic.w	r3, r3, #7
  405a66:	461a      	mov	r2, r3
  405a68:	4b13      	ldr	r3, [pc, #76]	; (405ab8 <pvPortMalloc+0x84>)
  405a6a:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  405a6c:	4b14      	ldr	r3, [pc, #80]	; (405ac0 <pvPortMalloc+0x8c>)
  405a6e:	681a      	ldr	r2, [r3, #0]
  405a70:	687b      	ldr	r3, [r7, #4]
  405a72:	4413      	add	r3, r2
  405a74:	f643 72f7 	movw	r2, #16375	; 0x3ff7
  405a78:	4293      	cmp	r3, r2
  405a7a:	d813      	bhi.n	405aa4 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
  405a7c:	4b10      	ldr	r3, [pc, #64]	; (405ac0 <pvPortMalloc+0x8c>)
  405a7e:	681a      	ldr	r2, [r3, #0]
  405a80:	687b      	ldr	r3, [r7, #4]
  405a82:	441a      	add	r2, r3
  405a84:	4b0e      	ldr	r3, [pc, #56]	; (405ac0 <pvPortMalloc+0x8c>)
  405a86:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  405a88:	429a      	cmp	r2, r3
  405a8a:	d90b      	bls.n	405aa4 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  405a8c:	4b0a      	ldr	r3, [pc, #40]	; (405ab8 <pvPortMalloc+0x84>)
  405a8e:	681a      	ldr	r2, [r3, #0]
  405a90:	4b0b      	ldr	r3, [pc, #44]	; (405ac0 <pvPortMalloc+0x8c>)
  405a92:	681b      	ldr	r3, [r3, #0]
  405a94:	4413      	add	r3, r2
  405a96:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
  405a98:	4b09      	ldr	r3, [pc, #36]	; (405ac0 <pvPortMalloc+0x8c>)
  405a9a:	681a      	ldr	r2, [r3, #0]
  405a9c:	687b      	ldr	r3, [r7, #4]
  405a9e:	4413      	add	r3, r2
  405aa0:	4a07      	ldr	r2, [pc, #28]	; (405ac0 <pvPortMalloc+0x8c>)
  405aa2:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  405aa4:	4b07      	ldr	r3, [pc, #28]	; (405ac4 <pvPortMalloc+0x90>)
  405aa6:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
  405aa8:	68fb      	ldr	r3, [r7, #12]
}
  405aaa:	4618      	mov	r0, r3
  405aac:	3710      	adds	r7, #16
  405aae:	46bd      	mov	sp, r7
  405ab0:	bd80      	pop	{r7, pc}
  405ab2:	bf00      	nop
  405ab4:	00406479 	.word	0x00406479
  405ab8:	2000a64c 	.word	0x2000a64c
  405abc:	20006650 	.word	0x20006650
  405ac0:	2000a648 	.word	0x2000a648
  405ac4:	00406495 	.word	0x00406495

00405ac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
  405ac8:	b480      	push	{r7}
  405aca:	b083      	sub	sp, #12
  405acc:	af00      	add	r7, sp, #0
  405ace:	6078      	str	r0, [r7, #4]
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
  405ad0:	bf00      	nop
  405ad2:	370c      	adds	r7, #12
  405ad4:	46bd      	mov	sp, r7
  405ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
  405ada:	4770      	bx	lr

00405adc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
  405adc:	b580      	push	{r7, lr}
  405ade:	b084      	sub	sp, #16
  405ae0:	af00      	add	r7, sp, #0
  405ae2:	6078      	str	r0, [r7, #4]
  405ae4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  405ae6:	687b      	ldr	r3, [r7, #4]
  405ae8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
  405aea:	4b28      	ldr	r3, [pc, #160]	; (405b8c <xQueueGenericReset+0xb0>)
  405aec:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  405aee:	68fb      	ldr	r3, [r7, #12]
  405af0:	681a      	ldr	r2, [r3, #0]
  405af2:	68fb      	ldr	r3, [r7, #12]
  405af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405af6:	68f9      	ldr	r1, [r7, #12]
  405af8:	6c09      	ldr	r1, [r1, #64]	; 0x40
  405afa:	fb01 f303 	mul.w	r3, r1, r3
  405afe:	441a      	add	r2, r3
  405b00:	68fb      	ldr	r3, [r7, #12]
  405b02:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  405b04:	68fb      	ldr	r3, [r7, #12]
  405b06:	2200      	movs	r2, #0
  405b08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  405b0a:	68fb      	ldr	r3, [r7, #12]
  405b0c:	681a      	ldr	r2, [r3, #0]
  405b0e:	68fb      	ldr	r3, [r7, #12]
  405b10:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  405b12:	68fb      	ldr	r3, [r7, #12]
  405b14:	681a      	ldr	r2, [r3, #0]
  405b16:	68fb      	ldr	r3, [r7, #12]
  405b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405b1a:	3b01      	subs	r3, #1
  405b1c:	68f9      	ldr	r1, [r7, #12]
  405b1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
  405b20:	fb01 f303 	mul.w	r3, r1, r3
  405b24:	441a      	add	r2, r3
  405b26:	68fb      	ldr	r3, [r7, #12]
  405b28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  405b2a:	68fb      	ldr	r3, [r7, #12]
  405b2c:	22ff      	movs	r2, #255	; 0xff
  405b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  405b32:	68fb      	ldr	r3, [r7, #12]
  405b34:	22ff      	movs	r2, #255	; 0xff
  405b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
  405b3a:	683b      	ldr	r3, [r7, #0]
  405b3c:	2b00      	cmp	r3, #0
  405b3e:	d114      	bne.n	405b6a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  405b40:	68fb      	ldr	r3, [r7, #12]
  405b42:	691b      	ldr	r3, [r3, #16]
  405b44:	2b00      	cmp	r3, #0
  405b46:	d01a      	beq.n	405b7e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  405b48:	68fb      	ldr	r3, [r7, #12]
  405b4a:	3310      	adds	r3, #16
  405b4c:	4618      	mov	r0, r3
  405b4e:	4b10      	ldr	r3, [pc, #64]	; (405b90 <xQueueGenericReset+0xb4>)
  405b50:	4798      	blx	r3
  405b52:	4603      	mov	r3, r0
  405b54:	2b00      	cmp	r3, #0
  405b56:	d012      	beq.n	405b7e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
  405b58:	4b0e      	ldr	r3, [pc, #56]	; (405b94 <xQueueGenericReset+0xb8>)
  405b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  405b5e:	601a      	str	r2, [r3, #0]
  405b60:	f3bf 8f4f 	dsb	sy
  405b64:	f3bf 8f6f 	isb	sy
  405b68:	e009      	b.n	405b7e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  405b6a:	68fb      	ldr	r3, [r7, #12]
  405b6c:	3310      	adds	r3, #16
  405b6e:	4618      	mov	r0, r3
  405b70:	4b09      	ldr	r3, [pc, #36]	; (405b98 <xQueueGenericReset+0xbc>)
  405b72:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  405b74:	68fb      	ldr	r3, [r7, #12]
  405b76:	3324      	adds	r3, #36	; 0x24
  405b78:	4618      	mov	r0, r3
  405b7a:	4b07      	ldr	r3, [pc, #28]	; (405b98 <xQueueGenericReset+0xbc>)
  405b7c:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
  405b7e:	4b07      	ldr	r3, [pc, #28]	; (405b9c <xQueueGenericReset+0xc0>)
  405b80:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
  405b82:	2301      	movs	r3, #1
}
  405b84:	4618      	mov	r0, r3
  405b86:	3710      	adds	r7, #16
  405b88:	46bd      	mov	sp, r7
  405b8a:	bd80      	pop	{r7, pc}
  405b8c:	00405909 	.word	0x00405909
  405b90:	004067ed 	.word	0x004067ed
  405b94:	e000ed04 	.word	0xe000ed04
  405b98:	00405675 	.word	0x00405675
  405b9c:	0040593d 	.word	0x0040593d

00405ba0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
  405ba0:	b590      	push	{r4, r7, lr}
  405ba2:	b08b      	sub	sp, #44	; 0x2c
  405ba4:	af02      	add	r7, sp, #8
  405ba6:	60f8      	str	r0, [r7, #12]
  405ba8:	60b9      	str	r1, [r7, #8]
  405baa:	4613      	mov	r3, r2
  405bac:	71fb      	strb	r3, [r7, #7]
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
  405bae:	68bb      	ldr	r3, [r7, #8]
  405bb0:	2b00      	cmp	r3, #0
  405bb2:	d102      	bne.n	405bba <xQueueGenericCreate+0x1a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
  405bb4:	2300      	movs	r3, #0
  405bb6:	61fb      	str	r3, [r7, #28]
  405bb8:	e004      	b.n	405bc4 <xQueueGenericCreate+0x24>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  405bba:	68fb      	ldr	r3, [r7, #12]
  405bbc:	68ba      	ldr	r2, [r7, #8]
  405bbe:	fb02 f303 	mul.w	r3, r2, r3
  405bc2:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  405bc4:	69fb      	ldr	r3, [r7, #28]
  405bc6:	3348      	adds	r3, #72	; 0x48
  405bc8:	4618      	mov	r0, r3
  405bca:	4b0b      	ldr	r3, [pc, #44]	; (405bf8 <xQueueGenericCreate+0x58>)
  405bcc:	4798      	blx	r3
  405bce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
  405bd0:	69bb      	ldr	r3, [r7, #24]
  405bd2:	2b00      	cmp	r3, #0
  405bd4:	d00b      	beq.n	405bee <xQueueGenericCreate+0x4e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  405bd6:	69bb      	ldr	r3, [r7, #24]
  405bd8:	3348      	adds	r3, #72	; 0x48
  405bda:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
  405bdc:	79fa      	ldrb	r2, [r7, #7]
  405bde:	69bb      	ldr	r3, [r7, #24]
  405be0:	9300      	str	r3, [sp, #0]
  405be2:	4613      	mov	r3, r2
  405be4:	697a      	ldr	r2, [r7, #20]
  405be6:	68b9      	ldr	r1, [r7, #8]
  405be8:	68f8      	ldr	r0, [r7, #12]
  405bea:	4c04      	ldr	r4, [pc, #16]	; (405bfc <xQueueGenericCreate+0x5c>)
  405bec:	47a0      	blx	r4
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
  405bee:	69bb      	ldr	r3, [r7, #24]
	}
  405bf0:	4618      	mov	r0, r3
  405bf2:	3724      	adds	r7, #36	; 0x24
  405bf4:	46bd      	mov	sp, r7
  405bf6:	bd90      	pop	{r4, r7, pc}
  405bf8:	00405a35 	.word	0x00405a35
  405bfc:	00405c01 	.word	0x00405c01

00405c00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
  405c00:	b580      	push	{r7, lr}
  405c02:	b084      	sub	sp, #16
  405c04:	af00      	add	r7, sp, #0
  405c06:	60f8      	str	r0, [r7, #12]
  405c08:	60b9      	str	r1, [r7, #8]
  405c0a:	607a      	str	r2, [r7, #4]
  405c0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
  405c0e:	68bb      	ldr	r3, [r7, #8]
  405c10:	2b00      	cmp	r3, #0
  405c12:	d103      	bne.n	405c1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  405c14:	69bb      	ldr	r3, [r7, #24]
  405c16:	69ba      	ldr	r2, [r7, #24]
  405c18:	601a      	str	r2, [r3, #0]
  405c1a:	e002      	b.n	405c22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  405c1c:	69bb      	ldr	r3, [r7, #24]
  405c1e:	687a      	ldr	r2, [r7, #4]
  405c20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
  405c22:	69bb      	ldr	r3, [r7, #24]
  405c24:	68fa      	ldr	r2, [r7, #12]
  405c26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  405c28:	69bb      	ldr	r3, [r7, #24]
  405c2a:	68ba      	ldr	r2, [r7, #8]
  405c2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  405c2e:	2101      	movs	r1, #1
  405c30:	69b8      	ldr	r0, [r7, #24]
  405c32:	4b03      	ldr	r3, [pc, #12]	; (405c40 <prvInitialiseNewQueue+0x40>)
  405c34:	4798      	blx	r3
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
  405c36:	bf00      	nop
  405c38:	3710      	adds	r7, #16
  405c3a:	46bd      	mov	sp, r7
  405c3c:	bd80      	pop	{r7, pc}
  405c3e:	bf00      	nop
  405c40:	00405add 	.word	0x00405add

00405c44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
  405c44:	b580      	push	{r7, lr}
  405c46:	b08a      	sub	sp, #40	; 0x28
  405c48:	af00      	add	r7, sp, #0
  405c4a:	60f8      	str	r0, [r7, #12]
  405c4c:	60b9      	str	r1, [r7, #8]
  405c4e:	607a      	str	r2, [r7, #4]
  405c50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
  405c52:	2300      	movs	r3, #0
  405c54:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  405c56:	68fb      	ldr	r3, [r7, #12]
  405c58:	623b      	str	r3, [r7, #32]
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
  405c5a:	4b4e      	ldr	r3, [pc, #312]	; (405d94 <xQueueGenericSend+0x150>)
  405c5c:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  405c5e:	6a3b      	ldr	r3, [r7, #32]
  405c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  405c62:	6a3b      	ldr	r3, [r7, #32]
  405c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  405c66:	429a      	cmp	r2, r3
  405c68:	d302      	bcc.n	405c70 <xQueueGenericSend+0x2c>
  405c6a:	683b      	ldr	r3, [r7, #0]
  405c6c:	2b02      	cmp	r3, #2
  405c6e:	d129      	bne.n	405cc4 <xQueueGenericSend+0x80>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  405c70:	683a      	ldr	r2, [r7, #0]
  405c72:	68b9      	ldr	r1, [r7, #8]
  405c74:	6a38      	ldr	r0, [r7, #32]
  405c76:	4b48      	ldr	r3, [pc, #288]	; (405d98 <xQueueGenericSend+0x154>)
  405c78:	4798      	blx	r3
  405c7a:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405c7c:	6a3b      	ldr	r3, [r7, #32]
  405c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405c80:	2b00      	cmp	r3, #0
  405c82:	d010      	beq.n	405ca6 <xQueueGenericSend+0x62>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  405c84:	6a3b      	ldr	r3, [r7, #32]
  405c86:	3324      	adds	r3, #36	; 0x24
  405c88:	4618      	mov	r0, r3
  405c8a:	4b44      	ldr	r3, [pc, #272]	; (405d9c <xQueueGenericSend+0x158>)
  405c8c:	4798      	blx	r3
  405c8e:	4603      	mov	r3, r0
  405c90:	2b00      	cmp	r3, #0
  405c92:	d013      	beq.n	405cbc <xQueueGenericSend+0x78>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
  405c94:	4b42      	ldr	r3, [pc, #264]	; (405da0 <xQueueGenericSend+0x15c>)
  405c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  405c9a:	601a      	str	r2, [r3, #0]
  405c9c:	f3bf 8f4f 	dsb	sy
  405ca0:	f3bf 8f6f 	isb	sy
  405ca4:	e00a      	b.n	405cbc <xQueueGenericSend+0x78>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
  405ca6:	69fb      	ldr	r3, [r7, #28]
  405ca8:	2b00      	cmp	r3, #0
  405caa:	d007      	beq.n	405cbc <xQueueGenericSend+0x78>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
  405cac:	4b3c      	ldr	r3, [pc, #240]	; (405da0 <xQueueGenericSend+0x15c>)
  405cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  405cb2:	601a      	str	r2, [r3, #0]
  405cb4:	f3bf 8f4f 	dsb	sy
  405cb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
  405cbc:	4b39      	ldr	r3, [pc, #228]	; (405da4 <xQueueGenericSend+0x160>)
  405cbe:	4798      	blx	r3
				return pdPASS;
  405cc0:	2301      	movs	r3, #1
  405cc2:	e063      	b.n	405d8c <xQueueGenericSend+0x148>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  405cc4:	687b      	ldr	r3, [r7, #4]
  405cc6:	2b00      	cmp	r3, #0
  405cc8:	d103      	bne.n	405cd2 <xQueueGenericSend+0x8e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
  405cca:	4b36      	ldr	r3, [pc, #216]	; (405da4 <xQueueGenericSend+0x160>)
  405ccc:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
  405cce:	2300      	movs	r3, #0
  405cd0:	e05c      	b.n	405d8c <xQueueGenericSend+0x148>
				}
				else if( xEntryTimeSet == pdFALSE )
  405cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  405cd4:	2b00      	cmp	r3, #0
  405cd6:	d106      	bne.n	405ce6 <xQueueGenericSend+0xa2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
  405cd8:	f107 0314 	add.w	r3, r7, #20
  405cdc:	4618      	mov	r0, r3
  405cde:	4b32      	ldr	r3, [pc, #200]	; (405da8 <xQueueGenericSend+0x164>)
  405ce0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  405ce2:	2301      	movs	r3, #1
  405ce4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  405ce6:	4b2f      	ldr	r3, [pc, #188]	; (405da4 <xQueueGenericSend+0x160>)
  405ce8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
  405cea:	4b30      	ldr	r3, [pc, #192]	; (405dac <xQueueGenericSend+0x168>)
  405cec:	4798      	blx	r3
		prvLockQueue( pxQueue );
  405cee:	4b29      	ldr	r3, [pc, #164]	; (405d94 <xQueueGenericSend+0x150>)
  405cf0:	4798      	blx	r3
  405cf2:	6a3b      	ldr	r3, [r7, #32]
  405cf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  405cf8:	b25b      	sxtb	r3, r3
  405cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
  405cfe:	d103      	bne.n	405d08 <xQueueGenericSend+0xc4>
  405d00:	6a3b      	ldr	r3, [r7, #32]
  405d02:	2200      	movs	r2, #0
  405d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  405d08:	6a3b      	ldr	r3, [r7, #32]
  405d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  405d0e:	b25b      	sxtb	r3, r3
  405d10:	f1b3 3fff 	cmp.w	r3, #4294967295
  405d14:	d103      	bne.n	405d1e <xQueueGenericSend+0xda>
  405d16:	6a3b      	ldr	r3, [r7, #32]
  405d18:	2200      	movs	r2, #0
  405d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  405d1e:	4b21      	ldr	r3, [pc, #132]	; (405da4 <xQueueGenericSend+0x160>)
  405d20:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  405d22:	1d3a      	adds	r2, r7, #4
  405d24:	f107 0314 	add.w	r3, r7, #20
  405d28:	4611      	mov	r1, r2
  405d2a:	4618      	mov	r0, r3
  405d2c:	4b20      	ldr	r3, [pc, #128]	; (405db0 <xQueueGenericSend+0x16c>)
  405d2e:	4798      	blx	r3
  405d30:	4603      	mov	r3, r0
  405d32:	2b00      	cmp	r3, #0
  405d34:	d124      	bne.n	405d80 <xQueueGenericSend+0x13c>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  405d36:	6a38      	ldr	r0, [r7, #32]
  405d38:	4b1e      	ldr	r3, [pc, #120]	; (405db4 <xQueueGenericSend+0x170>)
  405d3a:	4798      	blx	r3
  405d3c:	4603      	mov	r3, r0
  405d3e:	2b00      	cmp	r3, #0
  405d40:	d018      	beq.n	405d74 <xQueueGenericSend+0x130>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  405d42:	6a3b      	ldr	r3, [r7, #32]
  405d44:	3310      	adds	r3, #16
  405d46:	687a      	ldr	r2, [r7, #4]
  405d48:	4611      	mov	r1, r2
  405d4a:	4618      	mov	r0, r3
  405d4c:	4b1a      	ldr	r3, [pc, #104]	; (405db8 <xQueueGenericSend+0x174>)
  405d4e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
  405d50:	6a38      	ldr	r0, [r7, #32]
  405d52:	4b1a      	ldr	r3, [pc, #104]	; (405dbc <xQueueGenericSend+0x178>)
  405d54:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
  405d56:	4b1a      	ldr	r3, [pc, #104]	; (405dc0 <xQueueGenericSend+0x17c>)
  405d58:	4798      	blx	r3
  405d5a:	4603      	mov	r3, r0
  405d5c:	2b00      	cmp	r3, #0
  405d5e:	f47f af7c 	bne.w	405c5a <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
  405d62:	4b0f      	ldr	r3, [pc, #60]	; (405da0 <xQueueGenericSend+0x15c>)
  405d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  405d68:	601a      	str	r2, [r3, #0]
  405d6a:	f3bf 8f4f 	dsb	sy
  405d6e:	f3bf 8f6f 	isb	sy
  405d72:	e772      	b.n	405c5a <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
  405d74:	6a38      	ldr	r0, [r7, #32]
  405d76:	4b11      	ldr	r3, [pc, #68]	; (405dbc <xQueueGenericSend+0x178>)
  405d78:	4798      	blx	r3
				( void ) xTaskResumeAll();
  405d7a:	4b11      	ldr	r3, [pc, #68]	; (405dc0 <xQueueGenericSend+0x17c>)
  405d7c:	4798      	blx	r3
  405d7e:	e76c      	b.n	405c5a <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
  405d80:	6a38      	ldr	r0, [r7, #32]
  405d82:	4b0e      	ldr	r3, [pc, #56]	; (405dbc <xQueueGenericSend+0x178>)
  405d84:	4798      	blx	r3
			( void ) xTaskResumeAll();
  405d86:	4b0e      	ldr	r3, [pc, #56]	; (405dc0 <xQueueGenericSend+0x17c>)
  405d88:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
  405d8a:	2300      	movs	r3, #0
		}
	}
}
  405d8c:	4618      	mov	r0, r3
  405d8e:	3728      	adds	r7, #40	; 0x28
  405d90:	46bd      	mov	sp, r7
  405d92:	bd80      	pop	{r7, pc}
  405d94:	00405909 	.word	0x00405909
  405d98:	00405fd5 	.word	0x00405fd5
  405d9c:	004067ed 	.word	0x004067ed
  405da0:	e000ed04 	.word	0xe000ed04
  405da4:	0040593d 	.word	0x0040593d
  405da8:	0040689d 	.word	0x0040689d
  405dac:	00406479 	.word	0x00406479
  405db0:	004068c9 	.word	0x004068c9
  405db4:	00406179 	.word	0x00406179
  405db8:	004067b9 	.word	0x004067b9
  405dbc:	00406091 	.word	0x00406091
  405dc0:	00406495 	.word	0x00406495

00405dc4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
  405dc4:	b580      	push	{r7, lr}
  405dc6:	b08a      	sub	sp, #40	; 0x28
  405dc8:	af00      	add	r7, sp, #0
  405dca:	6078      	str	r0, [r7, #4]
  405dcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  405dce:	687b      	ldr	r3, [r7, #4]
  405dd0:	623b      	str	r3, [r7, #32]
	__asm volatile
  405dd2:	f3ef 8211 	mrs	r2, BASEPRI
  405dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
  405dda:	f383 8811 	msr	BASEPRI, r3
  405dde:	f3bf 8f6f 	isb	sy
  405de2:	f3bf 8f4f 	dsb	sy
  405de6:	613a      	str	r2, [r7, #16]
  405de8:	60fb      	str	r3, [r7, #12]
	return ulOriginalBASEPRI;
  405dea:	693b      	ldr	r3, [r7, #16]
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
  405dec:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  405dee:	6a3b      	ldr	r3, [r7, #32]
  405df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405df2:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
  405df4:	6a3b      	ldr	r3, [r7, #32]
  405df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  405df8:	69bb      	ldr	r3, [r7, #24]
  405dfa:	429a      	cmp	r2, r3
  405dfc:	d929      	bls.n	405e52 <xQueueGiveFromISR+0x8e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
  405dfe:	6a3b      	ldr	r3, [r7, #32]
  405e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  405e04:	75fb      	strb	r3, [r7, #23]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  405e06:	69bb      	ldr	r3, [r7, #24]
  405e08:	1c5a      	adds	r2, r3, #1
  405e0a:	6a3b      	ldr	r3, [r7, #32]
  405e0c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
  405e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  405e12:	f1b3 3fff 	cmp.w	r3, #4294967295
  405e16:	d112      	bne.n	405e3e <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  405e18:	6a3b      	ldr	r3, [r7, #32]
  405e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  405e1c:	2b00      	cmp	r3, #0
  405e1e:	d015      	beq.n	405e4c <xQueueGiveFromISR+0x88>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  405e20:	6a3b      	ldr	r3, [r7, #32]
  405e22:	3324      	adds	r3, #36	; 0x24
  405e24:	4618      	mov	r0, r3
  405e26:	4b11      	ldr	r3, [pc, #68]	; (405e6c <xQueueGiveFromISR+0xa8>)
  405e28:	4798      	blx	r3
  405e2a:	4603      	mov	r3, r0
  405e2c:	2b00      	cmp	r3, #0
  405e2e:	d00d      	beq.n	405e4c <xQueueGiveFromISR+0x88>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
  405e30:	683b      	ldr	r3, [r7, #0]
  405e32:	2b00      	cmp	r3, #0
  405e34:	d00a      	beq.n	405e4c <xQueueGiveFromISR+0x88>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
  405e36:	683b      	ldr	r3, [r7, #0]
  405e38:	2201      	movs	r2, #1
  405e3a:	601a      	str	r2, [r3, #0]
  405e3c:	e006      	b.n	405e4c <xQueueGiveFromISR+0x88>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  405e3e:	7dfb      	ldrb	r3, [r7, #23]
  405e40:	3301      	adds	r3, #1
  405e42:	b2db      	uxtb	r3, r3
  405e44:	b25a      	sxtb	r2, r3
  405e46:	6a3b      	ldr	r3, [r7, #32]
  405e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
  405e4c:	2301      	movs	r3, #1
  405e4e:	627b      	str	r3, [r7, #36]	; 0x24
  405e50:	e001      	b.n	405e56 <xQueueGiveFromISR+0x92>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
  405e52:	2300      	movs	r3, #0
  405e54:	627b      	str	r3, [r7, #36]	; 0x24
  405e56:	69fb      	ldr	r3, [r7, #28]
  405e58:	60bb      	str	r3, [r7, #8]
	__asm volatile
  405e5a:	68bb      	ldr	r3, [r7, #8]
  405e5c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
  405e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  405e62:	4618      	mov	r0, r3
  405e64:	3728      	adds	r7, #40	; 0x28
  405e66:	46bd      	mov	sp, r7
  405e68:	bd80      	pop	{r7, pc}
  405e6a:	bf00      	nop
  405e6c:	004067ed 	.word	0x004067ed

00405e70 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
  405e70:	b580      	push	{r7, lr}
  405e72:	b088      	sub	sp, #32
  405e74:	af00      	add	r7, sp, #0
  405e76:	6078      	str	r0, [r7, #4]
  405e78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
  405e7a:	2300      	movs	r3, #0
  405e7c:	61fb      	str	r3, [r7, #28]
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  405e7e:	687b      	ldr	r3, [r7, #4]
  405e80:	61bb      	str	r3, [r7, #24]
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
  405e82:	4b49      	ldr	r3, [pc, #292]	; (405fa8 <xQueueSemaphoreTake+0x138>)
  405e84:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  405e86:	69bb      	ldr	r3, [r7, #24]
  405e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405e8a:	617b      	str	r3, [r7, #20]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  405e8c:	697b      	ldr	r3, [r7, #20]
  405e8e:	2b00      	cmp	r3, #0
  405e90:	d01b      	beq.n	405eca <xQueueSemaphoreTake+0x5a>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  405e92:	697b      	ldr	r3, [r7, #20]
  405e94:	1e5a      	subs	r2, r3, #1
  405e96:	69bb      	ldr	r3, [r7, #24]
  405e98:	639a      	str	r2, [r3, #56]	; 0x38
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  405e9a:	69bb      	ldr	r3, [r7, #24]
  405e9c:	691b      	ldr	r3, [r3, #16]
  405e9e:	2b00      	cmp	r3, #0
  405ea0:	d00f      	beq.n	405ec2 <xQueueSemaphoreTake+0x52>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  405ea2:	69bb      	ldr	r3, [r7, #24]
  405ea4:	3310      	adds	r3, #16
  405ea6:	4618      	mov	r0, r3
  405ea8:	4b40      	ldr	r3, [pc, #256]	; (405fac <xQueueSemaphoreTake+0x13c>)
  405eaa:	4798      	blx	r3
  405eac:	4603      	mov	r3, r0
  405eae:	2b00      	cmp	r3, #0
  405eb0:	d007      	beq.n	405ec2 <xQueueSemaphoreTake+0x52>
					{
						queueYIELD_IF_USING_PREEMPTION();
  405eb2:	4b3f      	ldr	r3, [pc, #252]	; (405fb0 <xQueueSemaphoreTake+0x140>)
  405eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  405eb8:	601a      	str	r2, [r3, #0]
  405eba:	f3bf 8f4f 	dsb	sy
  405ebe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
  405ec2:	4b3c      	ldr	r3, [pc, #240]	; (405fb4 <xQueueSemaphoreTake+0x144>)
  405ec4:	4798      	blx	r3
				return pdPASS;
  405ec6:	2301      	movs	r3, #1
  405ec8:	e069      	b.n	405f9e <xQueueSemaphoreTake+0x12e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
  405eca:	683b      	ldr	r3, [r7, #0]
  405ecc:	2b00      	cmp	r3, #0
  405ece:	d103      	bne.n	405ed8 <xQueueSemaphoreTake+0x68>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
  405ed0:	4b38      	ldr	r3, [pc, #224]	; (405fb4 <xQueueSemaphoreTake+0x144>)
  405ed2:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
  405ed4:	2300      	movs	r3, #0
  405ed6:	e062      	b.n	405f9e <xQueueSemaphoreTake+0x12e>
				}
				else if( xEntryTimeSet == pdFALSE )
  405ed8:	69fb      	ldr	r3, [r7, #28]
  405eda:	2b00      	cmp	r3, #0
  405edc:	d106      	bne.n	405eec <xQueueSemaphoreTake+0x7c>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
  405ede:	f107 030c 	add.w	r3, r7, #12
  405ee2:	4618      	mov	r0, r3
  405ee4:	4b34      	ldr	r3, [pc, #208]	; (405fb8 <xQueueSemaphoreTake+0x148>)
  405ee6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  405ee8:	2301      	movs	r3, #1
  405eea:	61fb      	str	r3, [r7, #28]
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
  405eec:	4b31      	ldr	r3, [pc, #196]	; (405fb4 <xQueueSemaphoreTake+0x144>)
  405eee:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
  405ef0:	4b32      	ldr	r3, [pc, #200]	; (405fbc <xQueueSemaphoreTake+0x14c>)
  405ef2:	4798      	blx	r3
		prvLockQueue( pxQueue );
  405ef4:	4b2c      	ldr	r3, [pc, #176]	; (405fa8 <xQueueSemaphoreTake+0x138>)
  405ef6:	4798      	blx	r3
  405ef8:	69bb      	ldr	r3, [r7, #24]
  405efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  405efe:	b25b      	sxtb	r3, r3
  405f00:	f1b3 3fff 	cmp.w	r3, #4294967295
  405f04:	d103      	bne.n	405f0e <xQueueSemaphoreTake+0x9e>
  405f06:	69bb      	ldr	r3, [r7, #24]
  405f08:	2200      	movs	r2, #0
  405f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  405f0e:	69bb      	ldr	r3, [r7, #24]
  405f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  405f14:	b25b      	sxtb	r3, r3
  405f16:	f1b3 3fff 	cmp.w	r3, #4294967295
  405f1a:	d103      	bne.n	405f24 <xQueueSemaphoreTake+0xb4>
  405f1c:	69bb      	ldr	r3, [r7, #24]
  405f1e:	2200      	movs	r2, #0
  405f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  405f24:	4b23      	ldr	r3, [pc, #140]	; (405fb4 <xQueueSemaphoreTake+0x144>)
  405f26:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  405f28:	463a      	mov	r2, r7
  405f2a:	f107 030c 	add.w	r3, r7, #12
  405f2e:	4611      	mov	r1, r2
  405f30:	4618      	mov	r0, r3
  405f32:	4b23      	ldr	r3, [pc, #140]	; (405fc0 <xQueueSemaphoreTake+0x150>)
  405f34:	4798      	blx	r3
  405f36:	4603      	mov	r3, r0
  405f38:	2b00      	cmp	r3, #0
  405f3a:	d123      	bne.n	405f84 <xQueueSemaphoreTake+0x114>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  405f3c:	69b8      	ldr	r0, [r7, #24]
  405f3e:	4b21      	ldr	r3, [pc, #132]	; (405fc4 <xQueueSemaphoreTake+0x154>)
  405f40:	4798      	blx	r3
  405f42:	4603      	mov	r3, r0
  405f44:	2b00      	cmp	r3, #0
  405f46:	d017      	beq.n	405f78 <xQueueSemaphoreTake+0x108>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  405f48:	69bb      	ldr	r3, [r7, #24]
  405f4a:	3324      	adds	r3, #36	; 0x24
  405f4c:	683a      	ldr	r2, [r7, #0]
  405f4e:	4611      	mov	r1, r2
  405f50:	4618      	mov	r0, r3
  405f52:	4b1d      	ldr	r3, [pc, #116]	; (405fc8 <xQueueSemaphoreTake+0x158>)
  405f54:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  405f56:	69b8      	ldr	r0, [r7, #24]
  405f58:	4b1c      	ldr	r3, [pc, #112]	; (405fcc <xQueueSemaphoreTake+0x15c>)
  405f5a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  405f5c:	4b1c      	ldr	r3, [pc, #112]	; (405fd0 <xQueueSemaphoreTake+0x160>)
  405f5e:	4798      	blx	r3
  405f60:	4603      	mov	r3, r0
  405f62:	2b00      	cmp	r3, #0
  405f64:	d18d      	bne.n	405e82 <xQueueSemaphoreTake+0x12>
				{
					portYIELD_WITHIN_API();
  405f66:	4b12      	ldr	r3, [pc, #72]	; (405fb0 <xQueueSemaphoreTake+0x140>)
  405f68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  405f6c:	601a      	str	r2, [r3, #0]
  405f6e:	f3bf 8f4f 	dsb	sy
  405f72:	f3bf 8f6f 	isb	sy
  405f76:	e784      	b.n	405e82 <xQueueSemaphoreTake+0x12>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
  405f78:	69b8      	ldr	r0, [r7, #24]
  405f7a:	4b14      	ldr	r3, [pc, #80]	; (405fcc <xQueueSemaphoreTake+0x15c>)
  405f7c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  405f7e:	4b14      	ldr	r3, [pc, #80]	; (405fd0 <xQueueSemaphoreTake+0x160>)
  405f80:	4798      	blx	r3
  405f82:	e77e      	b.n	405e82 <xQueueSemaphoreTake+0x12>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
  405f84:	69b8      	ldr	r0, [r7, #24]
  405f86:	4b11      	ldr	r3, [pc, #68]	; (405fcc <xQueueSemaphoreTake+0x15c>)
  405f88:	4798      	blx	r3
			( void ) xTaskResumeAll();
  405f8a:	4b11      	ldr	r3, [pc, #68]	; (405fd0 <xQueueSemaphoreTake+0x160>)
  405f8c:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  405f8e:	69b8      	ldr	r0, [r7, #24]
  405f90:	4b0c      	ldr	r3, [pc, #48]	; (405fc4 <xQueueSemaphoreTake+0x154>)
  405f92:	4798      	blx	r3
  405f94:	4603      	mov	r3, r0
  405f96:	2b00      	cmp	r3, #0
  405f98:	f43f af73 	beq.w	405e82 <xQueueSemaphoreTake+0x12>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
  405f9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
  405f9e:	4618      	mov	r0, r3
  405fa0:	3720      	adds	r7, #32
  405fa2:	46bd      	mov	sp, r7
  405fa4:	bd80      	pop	{r7, pc}
  405fa6:	bf00      	nop
  405fa8:	00405909 	.word	0x00405909
  405fac:	004067ed 	.word	0x004067ed
  405fb0:	e000ed04 	.word	0xe000ed04
  405fb4:	0040593d 	.word	0x0040593d
  405fb8:	0040689d 	.word	0x0040689d
  405fbc:	00406479 	.word	0x00406479
  405fc0:	004068c9 	.word	0x004068c9
  405fc4:	00406145 	.word	0x00406145
  405fc8:	004067b9 	.word	0x004067b9
  405fcc:	00406091 	.word	0x00406091
  405fd0:	00406495 	.word	0x00406495

00405fd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  405fd4:	b580      	push	{r7, lr}
  405fd6:	b086      	sub	sp, #24
  405fd8:	af00      	add	r7, sp, #0
  405fda:	60f8      	str	r0, [r7, #12]
  405fdc:	60b9      	str	r1, [r7, #8]
  405fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
  405fe0:	2300      	movs	r3, #0
  405fe2:	613b      	str	r3, [r7, #16]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  405fe4:	68fb      	ldr	r3, [r7, #12]
  405fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  405fe8:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  405fea:	68fb      	ldr	r3, [r7, #12]
  405fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  405fee:	2b00      	cmp	r3, #0
  405ff0:	d043      	beq.n	40607a <prvCopyDataToQueue+0xa6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
  405ff2:	687b      	ldr	r3, [r7, #4]
  405ff4:	2b00      	cmp	r3, #0
  405ff6:	d119      	bne.n	40602c <prvCopyDataToQueue+0x58>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  405ff8:	68fb      	ldr	r3, [r7, #12]
  405ffa:	6898      	ldr	r0, [r3, #8]
  405ffc:	68fb      	ldr	r3, [r7, #12]
  405ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406000:	461a      	mov	r2, r3
  406002:	68b9      	ldr	r1, [r7, #8]
  406004:	4b21      	ldr	r3, [pc, #132]	; (40608c <prvCopyDataToQueue+0xb8>)
  406006:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  406008:	68fb      	ldr	r3, [r7, #12]
  40600a:	689a      	ldr	r2, [r3, #8]
  40600c:	68fb      	ldr	r3, [r7, #12]
  40600e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406010:	441a      	add	r2, r3
  406012:	68fb      	ldr	r3, [r7, #12]
  406014:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  406016:	68fb      	ldr	r3, [r7, #12]
  406018:	689a      	ldr	r2, [r3, #8]
  40601a:	68fb      	ldr	r3, [r7, #12]
  40601c:	685b      	ldr	r3, [r3, #4]
  40601e:	429a      	cmp	r2, r3
  406020:	d32b      	bcc.n	40607a <prvCopyDataToQueue+0xa6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
  406022:	68fb      	ldr	r3, [r7, #12]
  406024:	681a      	ldr	r2, [r3, #0]
  406026:	68fb      	ldr	r3, [r7, #12]
  406028:	609a      	str	r2, [r3, #8]
  40602a:	e026      	b.n	40607a <prvCopyDataToQueue+0xa6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40602c:	68fb      	ldr	r3, [r7, #12]
  40602e:	68d8      	ldr	r0, [r3, #12]
  406030:	68fb      	ldr	r3, [r7, #12]
  406032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406034:	461a      	mov	r2, r3
  406036:	68b9      	ldr	r1, [r7, #8]
  406038:	4b14      	ldr	r3, [pc, #80]	; (40608c <prvCopyDataToQueue+0xb8>)
  40603a:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  40603c:	68fb      	ldr	r3, [r7, #12]
  40603e:	68da      	ldr	r2, [r3, #12]
  406040:	68fb      	ldr	r3, [r7, #12]
  406042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406044:	425b      	negs	r3, r3
  406046:	441a      	add	r2, r3
  406048:	68fb      	ldr	r3, [r7, #12]
  40604a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40604c:	68fb      	ldr	r3, [r7, #12]
  40604e:	68da      	ldr	r2, [r3, #12]
  406050:	68fb      	ldr	r3, [r7, #12]
  406052:	681b      	ldr	r3, [r3, #0]
  406054:	429a      	cmp	r2, r3
  406056:	d207      	bcs.n	406068 <prvCopyDataToQueue+0x94>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  406058:	68fb      	ldr	r3, [r7, #12]
  40605a:	685a      	ldr	r2, [r3, #4]
  40605c:	68fb      	ldr	r3, [r7, #12]
  40605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  406060:	425b      	negs	r3, r3
  406062:	441a      	add	r2, r3
  406064:	68fb      	ldr	r3, [r7, #12]
  406066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
  406068:	687b      	ldr	r3, [r7, #4]
  40606a:	2b02      	cmp	r3, #2
  40606c:	d105      	bne.n	40607a <prvCopyDataToQueue+0xa6>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  40606e:	697b      	ldr	r3, [r7, #20]
  406070:	2b00      	cmp	r3, #0
  406072:	d002      	beq.n	40607a <prvCopyDataToQueue+0xa6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
  406074:	697b      	ldr	r3, [r7, #20]
  406076:	3b01      	subs	r3, #1
  406078:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  40607a:	697b      	ldr	r3, [r7, #20]
  40607c:	1c5a      	adds	r2, r3, #1
  40607e:	68fb      	ldr	r3, [r7, #12]
  406080:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
  406082:	693b      	ldr	r3, [r7, #16]
}
  406084:	4618      	mov	r0, r3
  406086:	3718      	adds	r7, #24
  406088:	46bd      	mov	sp, r7
  40608a:	bd80      	pop	{r7, pc}
  40608c:	00406e91 	.word	0x00406e91

00406090 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
  406090:	b580      	push	{r7, lr}
  406092:	b084      	sub	sp, #16
  406094:	af00      	add	r7, sp, #0
  406096:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
  406098:	4b26      	ldr	r3, [pc, #152]	; (406134 <prvUnlockQueue+0xa4>)
  40609a:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
  40609c:	687b      	ldr	r3, [r7, #4]
  40609e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
  4060a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4060a4:	e011      	b.n	4060ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4060a6:	687b      	ldr	r3, [r7, #4]
  4060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4060aa:	2b00      	cmp	r3, #0
  4060ac:	d012      	beq.n	4060d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4060ae:	687b      	ldr	r3, [r7, #4]
  4060b0:	3324      	adds	r3, #36	; 0x24
  4060b2:	4618      	mov	r0, r3
  4060b4:	4b20      	ldr	r3, [pc, #128]	; (406138 <prvUnlockQueue+0xa8>)
  4060b6:	4798      	blx	r3
  4060b8:	4603      	mov	r3, r0
  4060ba:	2b00      	cmp	r3, #0
  4060bc:	d001      	beq.n	4060c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
  4060be:	4b1f      	ldr	r3, [pc, #124]	; (40613c <prvUnlockQueue+0xac>)
  4060c0:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
  4060c2:	7bfb      	ldrb	r3, [r7, #15]
  4060c4:	3b01      	subs	r3, #1
  4060c6:	b2db      	uxtb	r3, r3
  4060c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4060ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
  4060ce:	2b00      	cmp	r3, #0
  4060d0:	dce9      	bgt.n	4060a6 <prvUnlockQueue+0x16>
  4060d2:	e000      	b.n	4060d6 <prvUnlockQueue+0x46>
					break;
  4060d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
  4060d6:	687b      	ldr	r3, [r7, #4]
  4060d8:	22ff      	movs	r2, #255	; 0xff
  4060da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
  4060de:	4b18      	ldr	r3, [pc, #96]	; (406140 <prvUnlockQueue+0xb0>)
  4060e0:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
  4060e2:	4b14      	ldr	r3, [pc, #80]	; (406134 <prvUnlockQueue+0xa4>)
  4060e4:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
  4060e6:	687b      	ldr	r3, [r7, #4]
  4060e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
  4060ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
  4060ee:	e011      	b.n	406114 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4060f0:	687b      	ldr	r3, [r7, #4]
  4060f2:	691b      	ldr	r3, [r3, #16]
  4060f4:	2b00      	cmp	r3, #0
  4060f6:	d012      	beq.n	40611e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4060f8:	687b      	ldr	r3, [r7, #4]
  4060fa:	3310      	adds	r3, #16
  4060fc:	4618      	mov	r0, r3
  4060fe:	4b0e      	ldr	r3, [pc, #56]	; (406138 <prvUnlockQueue+0xa8>)
  406100:	4798      	blx	r3
  406102:	4603      	mov	r3, r0
  406104:	2b00      	cmp	r3, #0
  406106:	d001      	beq.n	40610c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
  406108:	4b0c      	ldr	r3, [pc, #48]	; (40613c <prvUnlockQueue+0xac>)
  40610a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
  40610c:	7bbb      	ldrb	r3, [r7, #14]
  40610e:	3b01      	subs	r3, #1
  406110:	b2db      	uxtb	r3, r3
  406112:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
  406114:	f997 300e 	ldrsb.w	r3, [r7, #14]
  406118:	2b00      	cmp	r3, #0
  40611a:	dce9      	bgt.n	4060f0 <prvUnlockQueue+0x60>
  40611c:	e000      	b.n	406120 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
  40611e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
  406120:	687b      	ldr	r3, [r7, #4]
  406122:	22ff      	movs	r2, #255	; 0xff
  406124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
  406128:	4b05      	ldr	r3, [pc, #20]	; (406140 <prvUnlockQueue+0xb0>)
  40612a:	4798      	blx	r3
}
  40612c:	bf00      	nop
  40612e:	3710      	adds	r7, #16
  406130:	46bd      	mov	sp, r7
  406132:	bd80      	pop	{r7, pc}
  406134:	00405909 	.word	0x00405909
  406138:	004067ed 	.word	0x004067ed
  40613c:	00406961 	.word	0x00406961
  406140:	0040593d 	.word	0x0040593d

00406144 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  406144:	b580      	push	{r7, lr}
  406146:	b084      	sub	sp, #16
  406148:	af00      	add	r7, sp, #0
  40614a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
  40614c:	4b08      	ldr	r3, [pc, #32]	; (406170 <prvIsQueueEmpty+0x2c>)
  40614e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  406150:	687b      	ldr	r3, [r7, #4]
  406152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  406154:	2b00      	cmp	r3, #0
  406156:	d102      	bne.n	40615e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
  406158:	2301      	movs	r3, #1
  40615a:	60fb      	str	r3, [r7, #12]
  40615c:	e001      	b.n	406162 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
  40615e:	2300      	movs	r3, #0
  406160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  406162:	4b04      	ldr	r3, [pc, #16]	; (406174 <prvIsQueueEmpty+0x30>)
  406164:	4798      	blx	r3

	return xReturn;
  406166:	68fb      	ldr	r3, [r7, #12]
}
  406168:	4618      	mov	r0, r3
  40616a:	3710      	adds	r7, #16
  40616c:	46bd      	mov	sp, r7
  40616e:	bd80      	pop	{r7, pc}
  406170:	00405909 	.word	0x00405909
  406174:	0040593d 	.word	0x0040593d

00406178 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
  406178:	b580      	push	{r7, lr}
  40617a:	b084      	sub	sp, #16
  40617c:	af00      	add	r7, sp, #0
  40617e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
  406180:	4b09      	ldr	r3, [pc, #36]	; (4061a8 <prvIsQueueFull+0x30>)
  406182:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  406184:	687b      	ldr	r3, [r7, #4]
  406186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  406188:	687b      	ldr	r3, [r7, #4]
  40618a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  40618c:	429a      	cmp	r2, r3
  40618e:	d102      	bne.n	406196 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
  406190:	2301      	movs	r3, #1
  406192:	60fb      	str	r3, [r7, #12]
  406194:	e001      	b.n	40619a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
  406196:	2300      	movs	r3, #0
  406198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
  40619a:	4b04      	ldr	r3, [pc, #16]	; (4061ac <prvIsQueueFull+0x34>)
  40619c:	4798      	blx	r3

	return xReturn;
  40619e:	68fb      	ldr	r3, [r7, #12]
}
  4061a0:	4618      	mov	r0, r3
  4061a2:	3710      	adds	r7, #16
  4061a4:	46bd      	mov	sp, r7
  4061a6:	bd80      	pop	{r7, pc}
  4061a8:	00405909 	.word	0x00405909
  4061ac:	0040593d 	.word	0x0040593d

004061b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
  4061b0:	b590      	push	{r4, r7, lr}
  4061b2:	b08d      	sub	sp, #52	; 0x34
  4061b4:	af04      	add	r7, sp, #16
  4061b6:	60f8      	str	r0, [r7, #12]
  4061b8:	60b9      	str	r1, [r7, #8]
  4061ba:	603b      	str	r3, [r7, #0]
  4061bc:	4613      	mov	r3, r2
  4061be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4061c0:	88fb      	ldrh	r3, [r7, #6]
  4061c2:	009b      	lsls	r3, r3, #2
  4061c4:	4618      	mov	r0, r3
  4061c6:	4b1b      	ldr	r3, [pc, #108]	; (406234 <xTaskCreate+0x84>)
  4061c8:	4798      	blx	r3
  4061ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
  4061cc:	697b      	ldr	r3, [r7, #20]
  4061ce:	2b00      	cmp	r3, #0
  4061d0:	d00e      	beq.n	4061f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  4061d2:	2050      	movs	r0, #80	; 0x50
  4061d4:	4b17      	ldr	r3, [pc, #92]	; (406234 <xTaskCreate+0x84>)
  4061d6:	4798      	blx	r3
  4061d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
  4061da:	69fb      	ldr	r3, [r7, #28]
  4061dc:	2b00      	cmp	r3, #0
  4061de:	d003      	beq.n	4061e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
  4061e0:	69fb      	ldr	r3, [r7, #28]
  4061e2:	697a      	ldr	r2, [r7, #20]
  4061e4:	631a      	str	r2, [r3, #48]	; 0x30
  4061e6:	e005      	b.n	4061f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
  4061e8:	6978      	ldr	r0, [r7, #20]
  4061ea:	4b13      	ldr	r3, [pc, #76]	; (406238 <xTaskCreate+0x88>)
  4061ec:	4798      	blx	r3
  4061ee:	e001      	b.n	4061f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
  4061f0:	2300      	movs	r3, #0
  4061f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
  4061f4:	69fb      	ldr	r3, [r7, #28]
  4061f6:	2b00      	cmp	r3, #0
  4061f8:	d013      	beq.n	406222 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
  4061fa:	88fa      	ldrh	r2, [r7, #6]
  4061fc:	2300      	movs	r3, #0
  4061fe:	9303      	str	r3, [sp, #12]
  406200:	69fb      	ldr	r3, [r7, #28]
  406202:	9302      	str	r3, [sp, #8]
  406204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  406206:	9301      	str	r3, [sp, #4]
  406208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  40620a:	9300      	str	r3, [sp, #0]
  40620c:	683b      	ldr	r3, [r7, #0]
  40620e:	68b9      	ldr	r1, [r7, #8]
  406210:	68f8      	ldr	r0, [r7, #12]
  406212:	4c0a      	ldr	r4, [pc, #40]	; (40623c <xTaskCreate+0x8c>)
  406214:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
  406216:	69f8      	ldr	r0, [r7, #28]
  406218:	4b09      	ldr	r3, [pc, #36]	; (406240 <xTaskCreate+0x90>)
  40621a:	4798      	blx	r3
			xReturn = pdPASS;
  40621c:	2301      	movs	r3, #1
  40621e:	61bb      	str	r3, [r7, #24]
  406220:	e002      	b.n	406228 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  406222:	f04f 33ff 	mov.w	r3, #4294967295
  406226:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
  406228:	69bb      	ldr	r3, [r7, #24]
	}
  40622a:	4618      	mov	r0, r3
  40622c:	3724      	adds	r7, #36	; 0x24
  40622e:	46bd      	mov	sp, r7
  406230:	bd90      	pop	{r4, r7, pc}
  406232:	bf00      	nop
  406234:	00405a35 	.word	0x00405a35
  406238:	00405ac9 	.word	0x00405ac9
  40623c:	00406245 	.word	0x00406245
  406240:	00406321 	.word	0x00406321

00406244 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
  406244:	b580      	push	{r7, lr}
  406246:	b086      	sub	sp, #24
  406248:	af00      	add	r7, sp, #0
  40624a:	60f8      	str	r0, [r7, #12]
  40624c:	60b9      	str	r1, [r7, #8]
  40624e:	607a      	str	r2, [r7, #4]
  406250:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  406252:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  406256:	687b      	ldr	r3, [r7, #4]
  406258:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
  40625c:	3b01      	subs	r3, #1
  40625e:	009b      	lsls	r3, r3, #2
  406260:	4413      	add	r3, r2
  406262:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  406264:	693b      	ldr	r3, [r7, #16]
  406266:	f023 0307 	bic.w	r3, r3, #7
  40626a:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40626c:	2300      	movs	r3, #0
  40626e:	617b      	str	r3, [r7, #20]
  406270:	e012      	b.n	406298 <prvInitialiseNewTask+0x54>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  406272:	68ba      	ldr	r2, [r7, #8]
  406274:	697b      	ldr	r3, [r7, #20]
  406276:	4413      	add	r3, r2
  406278:	7819      	ldrb	r1, [r3, #0]
  40627a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40627c:	697b      	ldr	r3, [r7, #20]
  40627e:	4413      	add	r3, r2
  406280:	3334      	adds	r3, #52	; 0x34
  406282:	460a      	mov	r2, r1
  406284:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
  406286:	68ba      	ldr	r2, [r7, #8]
  406288:	697b      	ldr	r3, [r7, #20]
  40628a:	4413      	add	r3, r2
  40628c:	781b      	ldrb	r3, [r3, #0]
  40628e:	2b00      	cmp	r3, #0
  406290:	d006      	beq.n	4062a0 <prvInitialiseNewTask+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  406292:	697b      	ldr	r3, [r7, #20]
  406294:	3301      	adds	r3, #1
  406296:	617b      	str	r3, [r7, #20]
  406298:	697b      	ldr	r3, [r7, #20]
  40629a:	2b13      	cmp	r3, #19
  40629c:	d9e9      	bls.n	406272 <prvInitialiseNewTask+0x2e>
  40629e:	e000      	b.n	4062a2 <prvInitialiseNewTask+0x5e>
		{
			break;
  4062a0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  4062a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4062a4:	2200      	movs	r2, #0
  4062a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
  4062aa:	6a3b      	ldr	r3, [r7, #32]
  4062ac:	2b03      	cmp	r3, #3
  4062ae:	d901      	bls.n	4062b4 <prvInitialiseNewTask+0x70>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
  4062b0:	2303      	movs	r3, #3
  4062b2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
  4062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4062b6:	6a3a      	ldr	r2, [r7, #32]
  4062b8:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  4062ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4062bc:	3304      	adds	r3, #4
  4062be:	4618      	mov	r0, r3
  4062c0:	4b15      	ldr	r3, [pc, #84]	; (406318 <prvInitialiseNewTask+0xd4>)
  4062c2:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  4062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4062c6:	3318      	adds	r3, #24
  4062c8:	4618      	mov	r0, r3
  4062ca:	4b13      	ldr	r3, [pc, #76]	; (406318 <prvInitialiseNewTask+0xd4>)
  4062cc:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  4062ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4062d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4062d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4062d4:	6a3b      	ldr	r3, [r7, #32]
  4062d6:	f1c3 0204 	rsb	r2, r3, #4
  4062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4062dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  4062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4062e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
  4062e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
  4062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4062e6:	2200      	movs	r2, #0
  4062e8:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  4062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4062ec:	2200      	movs	r2, #0
  4062ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4062f2:	683a      	ldr	r2, [r7, #0]
  4062f4:	68f9      	ldr	r1, [r7, #12]
  4062f6:	6938      	ldr	r0, [r7, #16]
  4062f8:	4b08      	ldr	r3, [pc, #32]	; (40631c <prvInitialiseNewTask+0xd8>)
  4062fa:	4798      	blx	r3
  4062fc:	4602      	mov	r2, r0
  4062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  406300:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
  406302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  406304:	2b00      	cmp	r3, #0
  406306:	d002      	beq.n	40630e <prvInitialiseNewTask+0xca>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  406308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40630a:	6aba      	ldr	r2, [r7, #40]	; 0x28
  40630c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  40630e:	bf00      	nop
  406310:	3718      	adds	r7, #24
  406312:	46bd      	mov	sp, r7
  406314:	bd80      	pop	{r7, pc}
  406316:	bf00      	nop
  406318:	004056b5 	.word	0x004056b5
  40631c:	004057dd 	.word	0x004057dd

00406320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
  406320:	b580      	push	{r7, lr}
  406322:	b082      	sub	sp, #8
  406324:	af00      	add	r7, sp, #0
  406326:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
  406328:	4b2b      	ldr	r3, [pc, #172]	; (4063d8 <prvAddNewTaskToReadyList+0xb8>)
  40632a:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
  40632c:	4b2b      	ldr	r3, [pc, #172]	; (4063dc <prvAddNewTaskToReadyList+0xbc>)
  40632e:	681b      	ldr	r3, [r3, #0]
  406330:	3301      	adds	r3, #1
  406332:	4a2a      	ldr	r2, [pc, #168]	; (4063dc <prvAddNewTaskToReadyList+0xbc>)
  406334:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  406336:	4b2a      	ldr	r3, [pc, #168]	; (4063e0 <prvAddNewTaskToReadyList+0xc0>)
  406338:	681b      	ldr	r3, [r3, #0]
  40633a:	2b00      	cmp	r3, #0
  40633c:	d109      	bne.n	406352 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
  40633e:	4a28      	ldr	r2, [pc, #160]	; (4063e0 <prvAddNewTaskToReadyList+0xc0>)
  406340:	687b      	ldr	r3, [r7, #4]
  406342:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  406344:	4b25      	ldr	r3, [pc, #148]	; (4063dc <prvAddNewTaskToReadyList+0xbc>)
  406346:	681b      	ldr	r3, [r3, #0]
  406348:	2b01      	cmp	r3, #1
  40634a:	d110      	bne.n	40636e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
  40634c:	4b25      	ldr	r3, [pc, #148]	; (4063e4 <prvAddNewTaskToReadyList+0xc4>)
  40634e:	4798      	blx	r3
  406350:	e00d      	b.n	40636e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
  406352:	4b25      	ldr	r3, [pc, #148]	; (4063e8 <prvAddNewTaskToReadyList+0xc8>)
  406354:	681b      	ldr	r3, [r3, #0]
  406356:	2b00      	cmp	r3, #0
  406358:	d109      	bne.n	40636e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  40635a:	4b21      	ldr	r3, [pc, #132]	; (4063e0 <prvAddNewTaskToReadyList+0xc0>)
  40635c:	681b      	ldr	r3, [r3, #0]
  40635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406360:	687b      	ldr	r3, [r7, #4]
  406362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406364:	429a      	cmp	r2, r3
  406366:	d802      	bhi.n	40636e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
  406368:	4a1d      	ldr	r2, [pc, #116]	; (4063e0 <prvAddNewTaskToReadyList+0xc0>)
  40636a:	687b      	ldr	r3, [r7, #4]
  40636c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
  40636e:	4b1f      	ldr	r3, [pc, #124]	; (4063ec <prvAddNewTaskToReadyList+0xcc>)
  406370:	681b      	ldr	r3, [r3, #0]
  406372:	3301      	adds	r3, #1
  406374:	4a1d      	ldr	r2, [pc, #116]	; (4063ec <prvAddNewTaskToReadyList+0xcc>)
  406376:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
  406378:	687b      	ldr	r3, [r7, #4]
  40637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40637c:	2201      	movs	r2, #1
  40637e:	409a      	lsls	r2, r3
  406380:	4b1b      	ldr	r3, [pc, #108]	; (4063f0 <prvAddNewTaskToReadyList+0xd0>)
  406382:	681b      	ldr	r3, [r3, #0]
  406384:	4313      	orrs	r3, r2
  406386:	4a1a      	ldr	r2, [pc, #104]	; (4063f0 <prvAddNewTaskToReadyList+0xd0>)
  406388:	6013      	str	r3, [r2, #0]
  40638a:	687b      	ldr	r3, [r7, #4]
  40638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40638e:	4613      	mov	r3, r2
  406390:	009b      	lsls	r3, r3, #2
  406392:	4413      	add	r3, r2
  406394:	009b      	lsls	r3, r3, #2
  406396:	4a17      	ldr	r2, [pc, #92]	; (4063f4 <prvAddNewTaskToReadyList+0xd4>)
  406398:	441a      	add	r2, r3
  40639a:	687b      	ldr	r3, [r7, #4]
  40639c:	3304      	adds	r3, #4
  40639e:	4619      	mov	r1, r3
  4063a0:	4610      	mov	r0, r2
  4063a2:	4b15      	ldr	r3, [pc, #84]	; (4063f8 <prvAddNewTaskToReadyList+0xd8>)
  4063a4:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
  4063a6:	4b15      	ldr	r3, [pc, #84]	; (4063fc <prvAddNewTaskToReadyList+0xdc>)
  4063a8:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
  4063aa:	4b0f      	ldr	r3, [pc, #60]	; (4063e8 <prvAddNewTaskToReadyList+0xc8>)
  4063ac:	681b      	ldr	r3, [r3, #0]
  4063ae:	2b00      	cmp	r3, #0
  4063b0:	d00e      	beq.n	4063d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  4063b2:	4b0b      	ldr	r3, [pc, #44]	; (4063e0 <prvAddNewTaskToReadyList+0xc0>)
  4063b4:	681b      	ldr	r3, [r3, #0]
  4063b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4063b8:	687b      	ldr	r3, [r7, #4]
  4063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4063bc:	429a      	cmp	r2, r3
  4063be:	d207      	bcs.n	4063d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
  4063c0:	4b0f      	ldr	r3, [pc, #60]	; (406400 <prvAddNewTaskToReadyList+0xe0>)
  4063c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4063c6:	601a      	str	r2, [r3, #0]
  4063c8:	f3bf 8f4f 	dsb	sy
  4063cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
  4063d0:	bf00      	nop
  4063d2:	3708      	adds	r7, #8
  4063d4:	46bd      	mov	sp, r7
  4063d6:	bd80      	pop	{r7, pc}
  4063d8:	00405909 	.word	0x00405909
  4063dc:	2000a6fc 	.word	0x2000a6fc
  4063e0:	2000a650 	.word	0x2000a650
  4063e4:	004069b5 	.word	0x004069b5
  4063e8:	2000a708 	.word	0x2000a708
  4063ec:	2000a718 	.word	0x2000a718
  4063f0:	2000a704 	.word	0x2000a704
  4063f4:	2000a654 	.word	0x2000a654
  4063f8:	004056cf 	.word	0x004056cf
  4063fc:	0040593d 	.word	0x0040593d
  406400:	e000ed04 	.word	0xe000ed04

00406404 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
  406404:	b590      	push	{r4, r7, lr}
  406406:	b085      	sub	sp, #20
  406408:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
  40640a:	4b13      	ldr	r3, [pc, #76]	; (406458 <vTaskStartScheduler+0x54>)
  40640c:	9301      	str	r3, [sp, #4]
  40640e:	2300      	movs	r3, #0
  406410:	9300      	str	r3, [sp, #0]
  406412:	2300      	movs	r3, #0
  406414:	2280      	movs	r2, #128	; 0x80
  406416:	4911      	ldr	r1, [pc, #68]	; (40645c <vTaskStartScheduler+0x58>)
  406418:	4811      	ldr	r0, [pc, #68]	; (406460 <vTaskStartScheduler+0x5c>)
  40641a:	4c12      	ldr	r4, [pc, #72]	; (406464 <vTaskStartScheduler+0x60>)
  40641c:	47a0      	blx	r4
  40641e:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
  406420:	687b      	ldr	r3, [r7, #4]
  406422:	2b01      	cmp	r3, #1
  406424:	d114      	bne.n	406450 <vTaskStartScheduler+0x4c>
	__asm volatile
  406426:	f04f 0350 	mov.w	r3, #80	; 0x50
  40642a:	f383 8811 	msr	BASEPRI, r3
  40642e:	f3bf 8f6f 	isb	sy
  406432:	f3bf 8f4f 	dsb	sy
  406436:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
  406438:	4b0b      	ldr	r3, [pc, #44]	; (406468 <vTaskStartScheduler+0x64>)
  40643a:	f04f 32ff 	mov.w	r2, #4294967295
  40643e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  406440:	4b0a      	ldr	r3, [pc, #40]	; (40646c <vTaskStartScheduler+0x68>)
  406442:	2201      	movs	r2, #1
  406444:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  406446:	4b0a      	ldr	r3, [pc, #40]	; (406470 <vTaskStartScheduler+0x6c>)
  406448:	2200      	movs	r2, #0
  40644a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
  40644c:	4b09      	ldr	r3, [pc, #36]	; (406474 <vTaskStartScheduler+0x70>)
  40644e:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
  406450:	bf00      	nop
  406452:	370c      	adds	r7, #12
  406454:	46bd      	mov	sp, r7
  406456:	bd90      	pop	{r4, r7, pc}
  406458:	2000a720 	.word	0x2000a720
  40645c:	004071cc 	.word	0x004071cc
  406460:	00406979 	.word	0x00406979
  406464:	004061b1 	.word	0x004061b1
  406468:	2000a71c 	.word	0x2000a71c
  40646c:	2000a708 	.word	0x2000a708
  406470:	2000a700 	.word	0x2000a700
  406474:	004058b9 	.word	0x004058b9

00406478 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
  406478:	b480      	push	{r7}
  40647a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
  40647c:	4b04      	ldr	r3, [pc, #16]	; (406490 <vTaskSuspendAll+0x18>)
  40647e:	681b      	ldr	r3, [r3, #0]
  406480:	3301      	adds	r3, #1
  406482:	4a03      	ldr	r2, [pc, #12]	; (406490 <vTaskSuspendAll+0x18>)
  406484:	6013      	str	r3, [r2, #0]
}
  406486:	bf00      	nop
  406488:	46bd      	mov	sp, r7
  40648a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40648e:	4770      	bx	lr
  406490:	2000a724 	.word	0x2000a724

00406494 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
  406494:	b580      	push	{r7, lr}
  406496:	b084      	sub	sp, #16
  406498:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
  40649a:	2300      	movs	r3, #0
  40649c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
  40649e:	2300      	movs	r3, #0
  4064a0:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
  4064a2:	4b3a      	ldr	r3, [pc, #232]	; (40658c <xTaskResumeAll+0xf8>)
  4064a4:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
  4064a6:	4b3a      	ldr	r3, [pc, #232]	; (406590 <xTaskResumeAll+0xfc>)
  4064a8:	681b      	ldr	r3, [r3, #0]
  4064aa:	3b01      	subs	r3, #1
  4064ac:	4a38      	ldr	r2, [pc, #224]	; (406590 <xTaskResumeAll+0xfc>)
  4064ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4064b0:	4b37      	ldr	r3, [pc, #220]	; (406590 <xTaskResumeAll+0xfc>)
  4064b2:	681b      	ldr	r3, [r3, #0]
  4064b4:	2b00      	cmp	r3, #0
  4064b6:	d161      	bne.n	40657c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4064b8:	4b36      	ldr	r3, [pc, #216]	; (406594 <xTaskResumeAll+0x100>)
  4064ba:	681b      	ldr	r3, [r3, #0]
  4064bc:	2b00      	cmp	r3, #0
  4064be:	d05d      	beq.n	40657c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4064c0:	e02e      	b.n	406520 <xTaskResumeAll+0x8c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4064c2:	4b35      	ldr	r3, [pc, #212]	; (406598 <xTaskResumeAll+0x104>)
  4064c4:	68db      	ldr	r3, [r3, #12]
  4064c6:	68db      	ldr	r3, [r3, #12]
  4064c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4064ca:	68fb      	ldr	r3, [r7, #12]
  4064cc:	3318      	adds	r3, #24
  4064ce:	4618      	mov	r0, r3
  4064d0:	4b32      	ldr	r3, [pc, #200]	; (40659c <xTaskResumeAll+0x108>)
  4064d2:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4064d4:	68fb      	ldr	r3, [r7, #12]
  4064d6:	3304      	adds	r3, #4
  4064d8:	4618      	mov	r0, r3
  4064da:	4b30      	ldr	r3, [pc, #192]	; (40659c <xTaskResumeAll+0x108>)
  4064dc:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
  4064de:	68fb      	ldr	r3, [r7, #12]
  4064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4064e2:	2201      	movs	r2, #1
  4064e4:	409a      	lsls	r2, r3
  4064e6:	4b2e      	ldr	r3, [pc, #184]	; (4065a0 <xTaskResumeAll+0x10c>)
  4064e8:	681b      	ldr	r3, [r3, #0]
  4064ea:	4313      	orrs	r3, r2
  4064ec:	4a2c      	ldr	r2, [pc, #176]	; (4065a0 <xTaskResumeAll+0x10c>)
  4064ee:	6013      	str	r3, [r2, #0]
  4064f0:	68fb      	ldr	r3, [r7, #12]
  4064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4064f4:	4613      	mov	r3, r2
  4064f6:	009b      	lsls	r3, r3, #2
  4064f8:	4413      	add	r3, r2
  4064fa:	009b      	lsls	r3, r3, #2
  4064fc:	4a29      	ldr	r2, [pc, #164]	; (4065a4 <xTaskResumeAll+0x110>)
  4064fe:	441a      	add	r2, r3
  406500:	68fb      	ldr	r3, [r7, #12]
  406502:	3304      	adds	r3, #4
  406504:	4619      	mov	r1, r3
  406506:	4610      	mov	r0, r2
  406508:	4b27      	ldr	r3, [pc, #156]	; (4065a8 <xTaskResumeAll+0x114>)
  40650a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  40650c:	68fb      	ldr	r3, [r7, #12]
  40650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406510:	4b26      	ldr	r3, [pc, #152]	; (4065ac <xTaskResumeAll+0x118>)
  406512:	681b      	ldr	r3, [r3, #0]
  406514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406516:	429a      	cmp	r2, r3
  406518:	d302      	bcc.n	406520 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
  40651a:	4b25      	ldr	r3, [pc, #148]	; (4065b0 <xTaskResumeAll+0x11c>)
  40651c:	2201      	movs	r2, #1
  40651e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  406520:	4b1d      	ldr	r3, [pc, #116]	; (406598 <xTaskResumeAll+0x104>)
  406522:	681b      	ldr	r3, [r3, #0]
  406524:	2b00      	cmp	r3, #0
  406526:	d1cc      	bne.n	4064c2 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
  406528:	68fb      	ldr	r3, [r7, #12]
  40652a:	2b00      	cmp	r3, #0
  40652c:	d001      	beq.n	406532 <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
  40652e:	4b21      	ldr	r3, [pc, #132]	; (4065b4 <xTaskResumeAll+0x120>)
  406530:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  406532:	4b21      	ldr	r3, [pc, #132]	; (4065b8 <xTaskResumeAll+0x124>)
  406534:	681b      	ldr	r3, [r3, #0]
  406536:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
  406538:	687b      	ldr	r3, [r7, #4]
  40653a:	2b00      	cmp	r3, #0
  40653c:	d010      	beq.n	406560 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
  40653e:	4b1f      	ldr	r3, [pc, #124]	; (4065bc <xTaskResumeAll+0x128>)
  406540:	4798      	blx	r3
  406542:	4603      	mov	r3, r0
  406544:	2b00      	cmp	r3, #0
  406546:	d002      	beq.n	40654e <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
  406548:	4b19      	ldr	r3, [pc, #100]	; (4065b0 <xTaskResumeAll+0x11c>)
  40654a:	2201      	movs	r2, #1
  40654c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
  40654e:	687b      	ldr	r3, [r7, #4]
  406550:	3b01      	subs	r3, #1
  406552:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  406554:	687b      	ldr	r3, [r7, #4]
  406556:	2b00      	cmp	r3, #0
  406558:	d1f1      	bne.n	40653e <xTaskResumeAll+0xaa>

						uxPendedTicks = 0;
  40655a:	4b17      	ldr	r3, [pc, #92]	; (4065b8 <xTaskResumeAll+0x124>)
  40655c:	2200      	movs	r2, #0
  40655e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
  406560:	4b13      	ldr	r3, [pc, #76]	; (4065b0 <xTaskResumeAll+0x11c>)
  406562:	681b      	ldr	r3, [r3, #0]
  406564:	2b00      	cmp	r3, #0
  406566:	d009      	beq.n	40657c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
  406568:	2301      	movs	r3, #1
  40656a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
  40656c:	4b14      	ldr	r3, [pc, #80]	; (4065c0 <xTaskResumeAll+0x12c>)
  40656e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  406572:	601a      	str	r2, [r3, #0]
  406574:	f3bf 8f4f 	dsb	sy
  406578:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  40657c:	4b11      	ldr	r3, [pc, #68]	; (4065c4 <xTaskResumeAll+0x130>)
  40657e:	4798      	blx	r3

	return xAlreadyYielded;
  406580:	68bb      	ldr	r3, [r7, #8]
}
  406582:	4618      	mov	r0, r3
  406584:	3710      	adds	r7, #16
  406586:	46bd      	mov	sp, r7
  406588:	bd80      	pop	{r7, pc}
  40658a:	bf00      	nop
  40658c:	00405909 	.word	0x00405909
  406590:	2000a724 	.word	0x2000a724
  406594:	2000a6fc 	.word	0x2000a6fc
  406598:	2000a6d4 	.word	0x2000a6d4
  40659c:	00405789 	.word	0x00405789
  4065a0:	2000a704 	.word	0x2000a704
  4065a4:	2000a654 	.word	0x2000a654
  4065a8:	004056cf 	.word	0x004056cf
  4065ac:	2000a650 	.word	0x2000a650
  4065b0:	2000a710 	.word	0x2000a710
  4065b4:	00406a3d 	.word	0x00406a3d
  4065b8:	2000a70c 	.word	0x2000a70c
  4065bc:	004065c9 	.word	0x004065c9
  4065c0:	e000ed04 	.word	0xe000ed04
  4065c4:	0040593d 	.word	0x0040593d

004065c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
  4065c8:	b580      	push	{r7, lr}
  4065ca:	b086      	sub	sp, #24
  4065cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
  4065ce:	2300      	movs	r3, #0
  4065d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4065d2:	4b48      	ldr	r3, [pc, #288]	; (4066f4 <xTaskIncrementTick+0x12c>)
  4065d4:	681b      	ldr	r3, [r3, #0]
  4065d6:	2b00      	cmp	r3, #0
  4065d8:	d17c      	bne.n	4066d4 <xTaskIncrementTick+0x10c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  4065da:	4b47      	ldr	r3, [pc, #284]	; (4066f8 <xTaskIncrementTick+0x130>)
  4065dc:	681b      	ldr	r3, [r3, #0]
  4065de:	3301      	adds	r3, #1
  4065e0:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
  4065e2:	4a45      	ldr	r2, [pc, #276]	; (4066f8 <xTaskIncrementTick+0x130>)
  4065e4:	693b      	ldr	r3, [r7, #16]
  4065e6:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  4065e8:	693b      	ldr	r3, [r7, #16]
  4065ea:	2b00      	cmp	r3, #0
  4065ec:	d110      	bne.n	406610 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
  4065ee:	4b43      	ldr	r3, [pc, #268]	; (4066fc <xTaskIncrementTick+0x134>)
  4065f0:	681b      	ldr	r3, [r3, #0]
  4065f2:	60fb      	str	r3, [r7, #12]
  4065f4:	4b42      	ldr	r3, [pc, #264]	; (406700 <xTaskIncrementTick+0x138>)
  4065f6:	681b      	ldr	r3, [r3, #0]
  4065f8:	4a40      	ldr	r2, [pc, #256]	; (4066fc <xTaskIncrementTick+0x134>)
  4065fa:	6013      	str	r3, [r2, #0]
  4065fc:	4a40      	ldr	r2, [pc, #256]	; (406700 <xTaskIncrementTick+0x138>)
  4065fe:	68fb      	ldr	r3, [r7, #12]
  406600:	6013      	str	r3, [r2, #0]
  406602:	4b40      	ldr	r3, [pc, #256]	; (406704 <xTaskIncrementTick+0x13c>)
  406604:	681b      	ldr	r3, [r3, #0]
  406606:	3301      	adds	r3, #1
  406608:	4a3e      	ldr	r2, [pc, #248]	; (406704 <xTaskIncrementTick+0x13c>)
  40660a:	6013      	str	r3, [r2, #0]
  40660c:	4b3e      	ldr	r3, [pc, #248]	; (406708 <xTaskIncrementTick+0x140>)
  40660e:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
  406610:	4b3e      	ldr	r3, [pc, #248]	; (40670c <xTaskIncrementTick+0x144>)
  406612:	681b      	ldr	r3, [r3, #0]
  406614:	693a      	ldr	r2, [r7, #16]
  406616:	429a      	cmp	r2, r3
  406618:	d34d      	bcc.n	4066b6 <xTaskIncrementTick+0xee>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  40661a:	4b38      	ldr	r3, [pc, #224]	; (4066fc <xTaskIncrementTick+0x134>)
  40661c:	681b      	ldr	r3, [r3, #0]
  40661e:	681b      	ldr	r3, [r3, #0]
  406620:	2b00      	cmp	r3, #0
  406622:	d101      	bne.n	406628 <xTaskIncrementTick+0x60>
  406624:	2301      	movs	r3, #1
  406626:	e000      	b.n	40662a <xTaskIncrementTick+0x62>
  406628:	2300      	movs	r3, #0
  40662a:	2b00      	cmp	r3, #0
  40662c:	d004      	beq.n	406638 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40662e:	4b37      	ldr	r3, [pc, #220]	; (40670c <xTaskIncrementTick+0x144>)
  406630:	f04f 32ff 	mov.w	r2, #4294967295
  406634:	601a      	str	r2, [r3, #0]
					break;
  406636:	e03e      	b.n	4066b6 <xTaskIncrementTick+0xee>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  406638:	4b30      	ldr	r3, [pc, #192]	; (4066fc <xTaskIncrementTick+0x134>)
  40663a:	681b      	ldr	r3, [r3, #0]
  40663c:	68db      	ldr	r3, [r3, #12]
  40663e:	68db      	ldr	r3, [r3, #12]
  406640:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  406642:	68bb      	ldr	r3, [r7, #8]
  406644:	685b      	ldr	r3, [r3, #4]
  406646:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
  406648:	693a      	ldr	r2, [r7, #16]
  40664a:	687b      	ldr	r3, [r7, #4]
  40664c:	429a      	cmp	r2, r3
  40664e:	d203      	bcs.n	406658 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
  406650:	4a2e      	ldr	r2, [pc, #184]	; (40670c <xTaskIncrementTick+0x144>)
  406652:	687b      	ldr	r3, [r7, #4]
  406654:	6013      	str	r3, [r2, #0]
						break;
  406656:	e02e      	b.n	4066b6 <xTaskIncrementTick+0xee>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  406658:	68bb      	ldr	r3, [r7, #8]
  40665a:	3304      	adds	r3, #4
  40665c:	4618      	mov	r0, r3
  40665e:	4b2c      	ldr	r3, [pc, #176]	; (406710 <xTaskIncrementTick+0x148>)
  406660:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  406662:	68bb      	ldr	r3, [r7, #8]
  406664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  406666:	2b00      	cmp	r3, #0
  406668:	d004      	beq.n	406674 <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40666a:	68bb      	ldr	r3, [r7, #8]
  40666c:	3318      	adds	r3, #24
  40666e:	4618      	mov	r0, r3
  406670:	4b27      	ldr	r3, [pc, #156]	; (406710 <xTaskIncrementTick+0x148>)
  406672:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
  406674:	68bb      	ldr	r3, [r7, #8]
  406676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406678:	2201      	movs	r2, #1
  40667a:	409a      	lsls	r2, r3
  40667c:	4b25      	ldr	r3, [pc, #148]	; (406714 <xTaskIncrementTick+0x14c>)
  40667e:	681b      	ldr	r3, [r3, #0]
  406680:	4313      	orrs	r3, r2
  406682:	4a24      	ldr	r2, [pc, #144]	; (406714 <xTaskIncrementTick+0x14c>)
  406684:	6013      	str	r3, [r2, #0]
  406686:	68bb      	ldr	r3, [r7, #8]
  406688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40668a:	4613      	mov	r3, r2
  40668c:	009b      	lsls	r3, r3, #2
  40668e:	4413      	add	r3, r2
  406690:	009b      	lsls	r3, r3, #2
  406692:	4a21      	ldr	r2, [pc, #132]	; (406718 <xTaskIncrementTick+0x150>)
  406694:	441a      	add	r2, r3
  406696:	68bb      	ldr	r3, [r7, #8]
  406698:	3304      	adds	r3, #4
  40669a:	4619      	mov	r1, r3
  40669c:	4610      	mov	r0, r2
  40669e:	4b1f      	ldr	r3, [pc, #124]	; (40671c <xTaskIncrementTick+0x154>)
  4066a0:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4066a2:	68bb      	ldr	r3, [r7, #8]
  4066a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4066a6:	4b1e      	ldr	r3, [pc, #120]	; (406720 <xTaskIncrementTick+0x158>)
  4066a8:	681b      	ldr	r3, [r3, #0]
  4066aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4066ac:	429a      	cmp	r2, r3
  4066ae:	d3b4      	bcc.n	40661a <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
  4066b0:	2301      	movs	r3, #1
  4066b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4066b4:	e7b1      	b.n	40661a <xTaskIncrementTick+0x52>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4066b6:	4b1a      	ldr	r3, [pc, #104]	; (406720 <xTaskIncrementTick+0x158>)
  4066b8:	681b      	ldr	r3, [r3, #0]
  4066ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4066bc:	4916      	ldr	r1, [pc, #88]	; (406718 <xTaskIncrementTick+0x150>)
  4066be:	4613      	mov	r3, r2
  4066c0:	009b      	lsls	r3, r3, #2
  4066c2:	4413      	add	r3, r2
  4066c4:	009b      	lsls	r3, r3, #2
  4066c6:	440b      	add	r3, r1
  4066c8:	681b      	ldr	r3, [r3, #0]
  4066ca:	2b01      	cmp	r3, #1
  4066cc:	d907      	bls.n	4066de <xTaskIncrementTick+0x116>
			{
				xSwitchRequired = pdTRUE;
  4066ce:	2301      	movs	r3, #1
  4066d0:	617b      	str	r3, [r7, #20]
  4066d2:	e004      	b.n	4066de <xTaskIncrementTick+0x116>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
  4066d4:	4b13      	ldr	r3, [pc, #76]	; (406724 <xTaskIncrementTick+0x15c>)
  4066d6:	681b      	ldr	r3, [r3, #0]
  4066d8:	3301      	adds	r3, #1
  4066da:	4a12      	ldr	r2, [pc, #72]	; (406724 <xTaskIncrementTick+0x15c>)
  4066dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
  4066de:	4b12      	ldr	r3, [pc, #72]	; (406728 <xTaskIncrementTick+0x160>)
  4066e0:	681b      	ldr	r3, [r3, #0]
  4066e2:	2b00      	cmp	r3, #0
  4066e4:	d001      	beq.n	4066ea <xTaskIncrementTick+0x122>
		{
			xSwitchRequired = pdTRUE;
  4066e6:	2301      	movs	r3, #1
  4066e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
  4066ea:	697b      	ldr	r3, [r7, #20]
}
  4066ec:	4618      	mov	r0, r3
  4066ee:	3718      	adds	r7, #24
  4066f0:	46bd      	mov	sp, r7
  4066f2:	bd80      	pop	{r7, pc}
  4066f4:	2000a724 	.word	0x2000a724
  4066f8:	2000a700 	.word	0x2000a700
  4066fc:	2000a6cc 	.word	0x2000a6cc
  406700:	2000a6d0 	.word	0x2000a6d0
  406704:	2000a714 	.word	0x2000a714
  406708:	00406a3d 	.word	0x00406a3d
  40670c:	2000a71c 	.word	0x2000a71c
  406710:	00405789 	.word	0x00405789
  406714:	2000a704 	.word	0x2000a704
  406718:	2000a654 	.word	0x2000a654
  40671c:	004056cf 	.word	0x004056cf
  406720:	2000a650 	.word	0x2000a650
  406724:	2000a70c 	.word	0x2000a70c
  406728:	2000a710 	.word	0x2000a710

0040672c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
  40672c:	b480      	push	{r7}
  40672e:	b085      	sub	sp, #20
  406730:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  406732:	4b1c      	ldr	r3, [pc, #112]	; (4067a4 <vTaskSwitchContext+0x78>)
  406734:	681b      	ldr	r3, [r3, #0]
  406736:	2b00      	cmp	r3, #0
  406738:	d003      	beq.n	406742 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
  40673a:	4b1b      	ldr	r3, [pc, #108]	; (4067a8 <vTaskSwitchContext+0x7c>)
  40673c:	2201      	movs	r2, #1
  40673e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
  406740:	e02a      	b.n	406798 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
  406742:	4b19      	ldr	r3, [pc, #100]	; (4067a8 <vTaskSwitchContext+0x7c>)
  406744:	2200      	movs	r2, #0
  406746:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
  406748:	4b18      	ldr	r3, [pc, #96]	; (4067ac <vTaskSwitchContext+0x80>)
  40674a:	681b      	ldr	r3, [r3, #0]
  40674c:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  40674e:	687b      	ldr	r3, [r7, #4]
  406750:	fab3 f383 	clz	r3, r3
  406754:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
  406756:	78fb      	ldrb	r3, [r7, #3]
  406758:	f1c3 031f 	rsb	r3, r3, #31
  40675c:	60fb      	str	r3, [r7, #12]
  40675e:	68fa      	ldr	r2, [r7, #12]
  406760:	4613      	mov	r3, r2
  406762:	009b      	lsls	r3, r3, #2
  406764:	4413      	add	r3, r2
  406766:	009b      	lsls	r3, r3, #2
  406768:	4a11      	ldr	r2, [pc, #68]	; (4067b0 <vTaskSwitchContext+0x84>)
  40676a:	4413      	add	r3, r2
  40676c:	60bb      	str	r3, [r7, #8]
  40676e:	68bb      	ldr	r3, [r7, #8]
  406770:	685b      	ldr	r3, [r3, #4]
  406772:	685a      	ldr	r2, [r3, #4]
  406774:	68bb      	ldr	r3, [r7, #8]
  406776:	605a      	str	r2, [r3, #4]
  406778:	68bb      	ldr	r3, [r7, #8]
  40677a:	685a      	ldr	r2, [r3, #4]
  40677c:	68bb      	ldr	r3, [r7, #8]
  40677e:	3308      	adds	r3, #8
  406780:	429a      	cmp	r2, r3
  406782:	d104      	bne.n	40678e <vTaskSwitchContext+0x62>
  406784:	68bb      	ldr	r3, [r7, #8]
  406786:	685b      	ldr	r3, [r3, #4]
  406788:	685a      	ldr	r2, [r3, #4]
  40678a:	68bb      	ldr	r3, [r7, #8]
  40678c:	605a      	str	r2, [r3, #4]
  40678e:	68bb      	ldr	r3, [r7, #8]
  406790:	685b      	ldr	r3, [r3, #4]
  406792:	68db      	ldr	r3, [r3, #12]
  406794:	4a07      	ldr	r2, [pc, #28]	; (4067b4 <vTaskSwitchContext+0x88>)
  406796:	6013      	str	r3, [r2, #0]
}
  406798:	bf00      	nop
  40679a:	3714      	adds	r7, #20
  40679c:	46bd      	mov	sp, r7
  40679e:	f85d 7b04 	ldr.w	r7, [sp], #4
  4067a2:	4770      	bx	lr
  4067a4:	2000a724 	.word	0x2000a724
  4067a8:	2000a710 	.word	0x2000a710
  4067ac:	2000a704 	.word	0x2000a704
  4067b0:	2000a654 	.word	0x2000a654
  4067b4:	2000a650 	.word	0x2000a650

004067b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
  4067b8:	b580      	push	{r7, lr}
  4067ba:	b082      	sub	sp, #8
  4067bc:	af00      	add	r7, sp, #0
  4067be:	6078      	str	r0, [r7, #4]
  4067c0:	6039      	str	r1, [r7, #0]

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4067c2:	4b07      	ldr	r3, [pc, #28]	; (4067e0 <vTaskPlaceOnEventList+0x28>)
  4067c4:	681b      	ldr	r3, [r3, #0]
  4067c6:	3318      	adds	r3, #24
  4067c8:	4619      	mov	r1, r3
  4067ca:	6878      	ldr	r0, [r7, #4]
  4067cc:	4b05      	ldr	r3, [pc, #20]	; (4067e4 <vTaskPlaceOnEventList+0x2c>)
  4067ce:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  4067d0:	2101      	movs	r1, #1
  4067d2:	6838      	ldr	r0, [r7, #0]
  4067d4:	4b04      	ldr	r3, [pc, #16]	; (4067e8 <vTaskPlaceOnEventList+0x30>)
  4067d6:	4798      	blx	r3
}
  4067d8:	bf00      	nop
  4067da:	3708      	adds	r7, #8
  4067dc:	46bd      	mov	sp, r7
  4067de:	bd80      	pop	{r7, pc}
  4067e0:	2000a650 	.word	0x2000a650
  4067e4:	00405717 	.word	0x00405717
  4067e8:	00406a89 	.word	0x00406a89

004067ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
  4067ec:	b580      	push	{r7, lr}
  4067ee:	b084      	sub	sp, #16
  4067f0:	af00      	add	r7, sp, #0
  4067f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4067f4:	687b      	ldr	r3, [r7, #4]
  4067f6:	68db      	ldr	r3, [r3, #12]
  4067f8:	68db      	ldr	r3, [r3, #12]
  4067fa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4067fc:	68bb      	ldr	r3, [r7, #8]
  4067fe:	3318      	adds	r3, #24
  406800:	4618      	mov	r0, r3
  406802:	4b1e      	ldr	r3, [pc, #120]	; (40687c <xTaskRemoveFromEventList+0x90>)
  406804:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  406806:	4b1e      	ldr	r3, [pc, #120]	; (406880 <xTaskRemoveFromEventList+0x94>)
  406808:	681b      	ldr	r3, [r3, #0]
  40680a:	2b00      	cmp	r3, #0
  40680c:	d11c      	bne.n	406848 <xTaskRemoveFromEventList+0x5c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  40680e:	68bb      	ldr	r3, [r7, #8]
  406810:	3304      	adds	r3, #4
  406812:	4618      	mov	r0, r3
  406814:	4b19      	ldr	r3, [pc, #100]	; (40687c <xTaskRemoveFromEventList+0x90>)
  406816:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  406818:	68bb      	ldr	r3, [r7, #8]
  40681a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40681c:	2201      	movs	r2, #1
  40681e:	409a      	lsls	r2, r3
  406820:	4b18      	ldr	r3, [pc, #96]	; (406884 <xTaskRemoveFromEventList+0x98>)
  406822:	681b      	ldr	r3, [r3, #0]
  406824:	4313      	orrs	r3, r2
  406826:	4a17      	ldr	r2, [pc, #92]	; (406884 <xTaskRemoveFromEventList+0x98>)
  406828:	6013      	str	r3, [r2, #0]
  40682a:	68bb      	ldr	r3, [r7, #8]
  40682c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  40682e:	4613      	mov	r3, r2
  406830:	009b      	lsls	r3, r3, #2
  406832:	4413      	add	r3, r2
  406834:	009b      	lsls	r3, r3, #2
  406836:	4a14      	ldr	r2, [pc, #80]	; (406888 <xTaskRemoveFromEventList+0x9c>)
  406838:	441a      	add	r2, r3
  40683a:	68bb      	ldr	r3, [r7, #8]
  40683c:	3304      	adds	r3, #4
  40683e:	4619      	mov	r1, r3
  406840:	4610      	mov	r0, r2
  406842:	4b12      	ldr	r3, [pc, #72]	; (40688c <xTaskRemoveFromEventList+0xa0>)
  406844:	4798      	blx	r3
  406846:	e005      	b.n	406854 <xTaskRemoveFromEventList+0x68>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  406848:	68bb      	ldr	r3, [r7, #8]
  40684a:	3318      	adds	r3, #24
  40684c:	4619      	mov	r1, r3
  40684e:	4810      	ldr	r0, [pc, #64]	; (406890 <xTaskRemoveFromEventList+0xa4>)
  406850:	4b0e      	ldr	r3, [pc, #56]	; (40688c <xTaskRemoveFromEventList+0xa0>)
  406852:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  406854:	68bb      	ldr	r3, [r7, #8]
  406856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  406858:	4b0e      	ldr	r3, [pc, #56]	; (406894 <xTaskRemoveFromEventList+0xa8>)
  40685a:	681b      	ldr	r3, [r3, #0]
  40685c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40685e:	429a      	cmp	r2, r3
  406860:	d905      	bls.n	40686e <xTaskRemoveFromEventList+0x82>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
  406862:	2301      	movs	r3, #1
  406864:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
  406866:	4b0c      	ldr	r3, [pc, #48]	; (406898 <xTaskRemoveFromEventList+0xac>)
  406868:	2201      	movs	r2, #1
  40686a:	601a      	str	r2, [r3, #0]
  40686c:	e001      	b.n	406872 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		xReturn = pdFALSE;
  40686e:	2300      	movs	r3, #0
  406870:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
  406872:	68fb      	ldr	r3, [r7, #12]
}
  406874:	4618      	mov	r0, r3
  406876:	3710      	adds	r7, #16
  406878:	46bd      	mov	sp, r7
  40687a:	bd80      	pop	{r7, pc}
  40687c:	00405789 	.word	0x00405789
  406880:	2000a724 	.word	0x2000a724
  406884:	2000a704 	.word	0x2000a704
  406888:	2000a654 	.word	0x2000a654
  40688c:	004056cf 	.word	0x004056cf
  406890:	2000a6d4 	.word	0x2000a6d4
  406894:	2000a650 	.word	0x2000a650
  406898:	2000a710 	.word	0x2000a710

0040689c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
  40689c:	b480      	push	{r7}
  40689e:	b083      	sub	sp, #12
  4068a0:	af00      	add	r7, sp, #0
  4068a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4068a4:	4b06      	ldr	r3, [pc, #24]	; (4068c0 <vTaskInternalSetTimeOutState+0x24>)
  4068a6:	681a      	ldr	r2, [r3, #0]
  4068a8:	687b      	ldr	r3, [r7, #4]
  4068aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4068ac:	4b05      	ldr	r3, [pc, #20]	; (4068c4 <vTaskInternalSetTimeOutState+0x28>)
  4068ae:	681a      	ldr	r2, [r3, #0]
  4068b0:	687b      	ldr	r3, [r7, #4]
  4068b2:	605a      	str	r2, [r3, #4]
}
  4068b4:	bf00      	nop
  4068b6:	370c      	adds	r7, #12
  4068b8:	46bd      	mov	sp, r7
  4068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
  4068be:	4770      	bx	lr
  4068c0:	2000a714 	.word	0x2000a714
  4068c4:	2000a700 	.word	0x2000a700

004068c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
  4068c8:	b580      	push	{r7, lr}
  4068ca:	b086      	sub	sp, #24
  4068cc:	af00      	add	r7, sp, #0
  4068ce:	6078      	str	r0, [r7, #4]
  4068d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
  4068d2:	4b1e      	ldr	r3, [pc, #120]	; (40694c <xTaskCheckForTimeOut+0x84>)
  4068d4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
  4068d6:	4b1e      	ldr	r3, [pc, #120]	; (406950 <xTaskCheckForTimeOut+0x88>)
  4068d8:	681b      	ldr	r3, [r3, #0]
  4068da:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4068dc:	687b      	ldr	r3, [r7, #4]
  4068de:	685b      	ldr	r3, [r3, #4]
  4068e0:	693a      	ldr	r2, [r7, #16]
  4068e2:	1ad3      	subs	r3, r2, r3
  4068e4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
  4068e6:	683b      	ldr	r3, [r7, #0]
  4068e8:	681b      	ldr	r3, [r3, #0]
  4068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4068ee:	d102      	bne.n	4068f6 <xTaskCheckForTimeOut+0x2e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
  4068f0:	2300      	movs	r3, #0
  4068f2:	617b      	str	r3, [r7, #20]
  4068f4:	e023      	b.n	40693e <xTaskCheckForTimeOut+0x76>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4068f6:	687b      	ldr	r3, [r7, #4]
  4068f8:	681a      	ldr	r2, [r3, #0]
  4068fa:	4b16      	ldr	r3, [pc, #88]	; (406954 <xTaskCheckForTimeOut+0x8c>)
  4068fc:	681b      	ldr	r3, [r3, #0]
  4068fe:	429a      	cmp	r2, r3
  406900:	d007      	beq.n	406912 <xTaskCheckForTimeOut+0x4a>
  406902:	687b      	ldr	r3, [r7, #4]
  406904:	685a      	ldr	r2, [r3, #4]
  406906:	693b      	ldr	r3, [r7, #16]
  406908:	429a      	cmp	r2, r3
  40690a:	d802      	bhi.n	406912 <xTaskCheckForTimeOut+0x4a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
  40690c:	2301      	movs	r3, #1
  40690e:	617b      	str	r3, [r7, #20]
  406910:	e015      	b.n	40693e <xTaskCheckForTimeOut+0x76>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  406912:	683b      	ldr	r3, [r7, #0]
  406914:	681a      	ldr	r2, [r3, #0]
  406916:	68fb      	ldr	r3, [r7, #12]
  406918:	429a      	cmp	r2, r3
  40691a:	d90b      	bls.n	406934 <xTaskCheckForTimeOut+0x6c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
  40691c:	683b      	ldr	r3, [r7, #0]
  40691e:	681a      	ldr	r2, [r3, #0]
  406920:	68fb      	ldr	r3, [r7, #12]
  406922:	1ad2      	subs	r2, r2, r3
  406924:	683b      	ldr	r3, [r7, #0]
  406926:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  406928:	6878      	ldr	r0, [r7, #4]
  40692a:	4b0b      	ldr	r3, [pc, #44]	; (406958 <xTaskCheckForTimeOut+0x90>)
  40692c:	4798      	blx	r3
			xReturn = pdFALSE;
  40692e:	2300      	movs	r3, #0
  406930:	617b      	str	r3, [r7, #20]
  406932:	e004      	b.n	40693e <xTaskCheckForTimeOut+0x76>
		}
		else
		{
			*pxTicksToWait = 0;
  406934:	683b      	ldr	r3, [r7, #0]
  406936:	2200      	movs	r2, #0
  406938:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
  40693a:	2301      	movs	r3, #1
  40693c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
  40693e:	4b07      	ldr	r3, [pc, #28]	; (40695c <xTaskCheckForTimeOut+0x94>)
  406940:	4798      	blx	r3

	return xReturn;
  406942:	697b      	ldr	r3, [r7, #20]
}
  406944:	4618      	mov	r0, r3
  406946:	3718      	adds	r7, #24
  406948:	46bd      	mov	sp, r7
  40694a:	bd80      	pop	{r7, pc}
  40694c:	00405909 	.word	0x00405909
  406950:	2000a700 	.word	0x2000a700
  406954:	2000a714 	.word	0x2000a714
  406958:	0040689d 	.word	0x0040689d
  40695c:	0040593d 	.word	0x0040593d

00406960 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
  406960:	b480      	push	{r7}
  406962:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
  406964:	4b03      	ldr	r3, [pc, #12]	; (406974 <vTaskMissedYield+0x14>)
  406966:	2201      	movs	r2, #1
  406968:	601a      	str	r2, [r3, #0]
}
  40696a:	bf00      	nop
  40696c:	46bd      	mov	sp, r7
  40696e:	f85d 7b04 	ldr.w	r7, [sp], #4
  406972:	4770      	bx	lr
  406974:	2000a710 	.word	0x2000a710

00406978 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
  406978:	b580      	push	{r7, lr}
  40697a:	b082      	sub	sp, #8
  40697c:	af00      	add	r7, sp, #0
  40697e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
  406980:	4b08      	ldr	r3, [pc, #32]	; (4069a4 <prvIdleTask+0x2c>)
  406982:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  406984:	4b08      	ldr	r3, [pc, #32]	; (4069a8 <prvIdleTask+0x30>)
  406986:	681b      	ldr	r3, [r3, #0]
  406988:	2b01      	cmp	r3, #1
  40698a:	d907      	bls.n	40699c <prvIdleTask+0x24>
			{
				taskYIELD();
  40698c:	4b07      	ldr	r3, [pc, #28]	; (4069ac <prvIdleTask+0x34>)
  40698e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  406992:	601a      	str	r2, [r3, #0]
  406994:	f3bf 8f4f 	dsb	sy
  406998:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
  40699c:	4b04      	ldr	r3, [pc, #16]	; (4069b0 <prvIdleTask+0x38>)
  40699e:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
  4069a0:	e7ee      	b.n	406980 <prvIdleTask+0x8>
  4069a2:	bf00      	nop
  4069a4:	00406a2d 	.word	0x00406a2d
  4069a8:	2000a654 	.word	0x2000a654
  4069ac:	e000ed04 	.word	0xe000ed04
  4069b0:	00406d21 	.word	0x00406d21

004069b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
  4069b4:	b580      	push	{r7, lr}
  4069b6:	b082      	sub	sp, #8
  4069b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4069ba:	2300      	movs	r3, #0
  4069bc:	607b      	str	r3, [r7, #4]
  4069be:	e00c      	b.n	4069da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4069c0:	687a      	ldr	r2, [r7, #4]
  4069c2:	4613      	mov	r3, r2
  4069c4:	009b      	lsls	r3, r3, #2
  4069c6:	4413      	add	r3, r2
  4069c8:	009b      	lsls	r3, r3, #2
  4069ca:	4a10      	ldr	r2, [pc, #64]	; (406a0c <prvInitialiseTaskLists+0x58>)
  4069cc:	4413      	add	r3, r2
  4069ce:	4618      	mov	r0, r3
  4069d0:	4b0f      	ldr	r3, [pc, #60]	; (406a10 <prvInitialiseTaskLists+0x5c>)
  4069d2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4069d4:	687b      	ldr	r3, [r7, #4]
  4069d6:	3301      	adds	r3, #1
  4069d8:	607b      	str	r3, [r7, #4]
  4069da:	687b      	ldr	r3, [r7, #4]
  4069dc:	2b03      	cmp	r3, #3
  4069de:	d9ef      	bls.n	4069c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
  4069e0:	480c      	ldr	r0, [pc, #48]	; (406a14 <prvInitialiseTaskLists+0x60>)
  4069e2:	4b0b      	ldr	r3, [pc, #44]	; (406a10 <prvInitialiseTaskLists+0x5c>)
  4069e4:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
  4069e6:	480c      	ldr	r0, [pc, #48]	; (406a18 <prvInitialiseTaskLists+0x64>)
  4069e8:	4b09      	ldr	r3, [pc, #36]	; (406a10 <prvInitialiseTaskLists+0x5c>)
  4069ea:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
  4069ec:	480b      	ldr	r0, [pc, #44]	; (406a1c <prvInitialiseTaskLists+0x68>)
  4069ee:	4b08      	ldr	r3, [pc, #32]	; (406a10 <prvInitialiseTaskLists+0x5c>)
  4069f0:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
  4069f2:	480b      	ldr	r0, [pc, #44]	; (406a20 <prvInitialiseTaskLists+0x6c>)
  4069f4:	4b06      	ldr	r3, [pc, #24]	; (406a10 <prvInitialiseTaskLists+0x5c>)
  4069f6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
  4069f8:	4b0a      	ldr	r3, [pc, #40]	; (406a24 <prvInitialiseTaskLists+0x70>)
  4069fa:	4a06      	ldr	r2, [pc, #24]	; (406a14 <prvInitialiseTaskLists+0x60>)
  4069fc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4069fe:	4b0a      	ldr	r3, [pc, #40]	; (406a28 <prvInitialiseTaskLists+0x74>)
  406a00:	4a05      	ldr	r2, [pc, #20]	; (406a18 <prvInitialiseTaskLists+0x64>)
  406a02:	601a      	str	r2, [r3, #0]
}
  406a04:	bf00      	nop
  406a06:	3708      	adds	r7, #8
  406a08:	46bd      	mov	sp, r7
  406a0a:	bd80      	pop	{r7, pc}
  406a0c:	2000a654 	.word	0x2000a654
  406a10:	00405675 	.word	0x00405675
  406a14:	2000a6a4 	.word	0x2000a6a4
  406a18:	2000a6b8 	.word	0x2000a6b8
  406a1c:	2000a6d4 	.word	0x2000a6d4
  406a20:	2000a6e8 	.word	0x2000a6e8
  406a24:	2000a6cc 	.word	0x2000a6cc
  406a28:	2000a6d0 	.word	0x2000a6d0

00406a2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
  406a2c:	b480      	push	{r7}
  406a2e:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
  406a30:	bf00      	nop
  406a32:	46bd      	mov	sp, r7
  406a34:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a38:	4770      	bx	lr
	...

00406a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
  406a3c:	b480      	push	{r7}
  406a3e:	b083      	sub	sp, #12
  406a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  406a42:	4b0f      	ldr	r3, [pc, #60]	; (406a80 <prvResetNextTaskUnblockTime+0x44>)
  406a44:	681b      	ldr	r3, [r3, #0]
  406a46:	681b      	ldr	r3, [r3, #0]
  406a48:	2b00      	cmp	r3, #0
  406a4a:	d101      	bne.n	406a50 <prvResetNextTaskUnblockTime+0x14>
  406a4c:	2301      	movs	r3, #1
  406a4e:	e000      	b.n	406a52 <prvResetNextTaskUnblockTime+0x16>
  406a50:	2300      	movs	r3, #0
  406a52:	2b00      	cmp	r3, #0
  406a54:	d004      	beq.n	406a60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
  406a56:	4b0b      	ldr	r3, [pc, #44]	; (406a84 <prvResetNextTaskUnblockTime+0x48>)
  406a58:	f04f 32ff 	mov.w	r2, #4294967295
  406a5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
  406a5e:	e008      	b.n	406a72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  406a60:	4b07      	ldr	r3, [pc, #28]	; (406a80 <prvResetNextTaskUnblockTime+0x44>)
  406a62:	681b      	ldr	r3, [r3, #0]
  406a64:	68db      	ldr	r3, [r3, #12]
  406a66:	68db      	ldr	r3, [r3, #12]
  406a68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  406a6a:	687b      	ldr	r3, [r7, #4]
  406a6c:	685b      	ldr	r3, [r3, #4]
  406a6e:	4a05      	ldr	r2, [pc, #20]	; (406a84 <prvResetNextTaskUnblockTime+0x48>)
  406a70:	6013      	str	r3, [r2, #0]
}
  406a72:	bf00      	nop
  406a74:	370c      	adds	r7, #12
  406a76:	46bd      	mov	sp, r7
  406a78:	f85d 7b04 	ldr.w	r7, [sp], #4
  406a7c:	4770      	bx	lr
  406a7e:	bf00      	nop
  406a80:	2000a6cc 	.word	0x2000a6cc
  406a84:	2000a71c 	.word	0x2000a71c

00406a88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  406a88:	b580      	push	{r7, lr}
  406a8a:	b084      	sub	sp, #16
  406a8c:	af00      	add	r7, sp, #0
  406a8e:	6078      	str	r0, [r7, #4]
  406a90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  406a92:	4b29      	ldr	r3, [pc, #164]	; (406b38 <prvAddCurrentTaskToDelayedList+0xb0>)
  406a94:	681b      	ldr	r3, [r3, #0]
  406a96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  406a98:	4b28      	ldr	r3, [pc, #160]	; (406b3c <prvAddCurrentTaskToDelayedList+0xb4>)
  406a9a:	681b      	ldr	r3, [r3, #0]
  406a9c:	3304      	adds	r3, #4
  406a9e:	4618      	mov	r0, r3
  406aa0:	4b27      	ldr	r3, [pc, #156]	; (406b40 <prvAddCurrentTaskToDelayedList+0xb8>)
  406aa2:	4798      	blx	r3
  406aa4:	4603      	mov	r3, r0
  406aa6:	2b00      	cmp	r3, #0
  406aa8:	d10b      	bne.n	406ac2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  406aaa:	4b24      	ldr	r3, [pc, #144]	; (406b3c <prvAddCurrentTaskToDelayedList+0xb4>)
  406aac:	681b      	ldr	r3, [r3, #0]
  406aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  406ab0:	2201      	movs	r2, #1
  406ab2:	fa02 f303 	lsl.w	r3, r2, r3
  406ab6:	43da      	mvns	r2, r3
  406ab8:	4b22      	ldr	r3, [pc, #136]	; (406b44 <prvAddCurrentTaskToDelayedList+0xbc>)
  406aba:	681b      	ldr	r3, [r3, #0]
  406abc:	4013      	ands	r3, r2
  406abe:	4a21      	ldr	r2, [pc, #132]	; (406b44 <prvAddCurrentTaskToDelayedList+0xbc>)
  406ac0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  406ac2:	687b      	ldr	r3, [r7, #4]
  406ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
  406ac8:	d10a      	bne.n	406ae0 <prvAddCurrentTaskToDelayedList+0x58>
  406aca:	683b      	ldr	r3, [r7, #0]
  406acc:	2b00      	cmp	r3, #0
  406ace:	d007      	beq.n	406ae0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  406ad0:	4b1a      	ldr	r3, [pc, #104]	; (406b3c <prvAddCurrentTaskToDelayedList+0xb4>)
  406ad2:	681b      	ldr	r3, [r3, #0]
  406ad4:	3304      	adds	r3, #4
  406ad6:	4619      	mov	r1, r3
  406ad8:	481b      	ldr	r0, [pc, #108]	; (406b48 <prvAddCurrentTaskToDelayedList+0xc0>)
  406ada:	4b1c      	ldr	r3, [pc, #112]	; (406b4c <prvAddCurrentTaskToDelayedList+0xc4>)
  406adc:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
  406ade:	e026      	b.n	406b2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
  406ae0:	68fa      	ldr	r2, [r7, #12]
  406ae2:	687b      	ldr	r3, [r7, #4]
  406ae4:	4413      	add	r3, r2
  406ae6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  406ae8:	4b14      	ldr	r3, [pc, #80]	; (406b3c <prvAddCurrentTaskToDelayedList+0xb4>)
  406aea:	681b      	ldr	r3, [r3, #0]
  406aec:	68ba      	ldr	r2, [r7, #8]
  406aee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
  406af0:	68ba      	ldr	r2, [r7, #8]
  406af2:	68fb      	ldr	r3, [r7, #12]
  406af4:	429a      	cmp	r2, r3
  406af6:	d209      	bcs.n	406b0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  406af8:	4b15      	ldr	r3, [pc, #84]	; (406b50 <prvAddCurrentTaskToDelayedList+0xc8>)
  406afa:	681a      	ldr	r2, [r3, #0]
  406afc:	4b0f      	ldr	r3, [pc, #60]	; (406b3c <prvAddCurrentTaskToDelayedList+0xb4>)
  406afe:	681b      	ldr	r3, [r3, #0]
  406b00:	3304      	adds	r3, #4
  406b02:	4619      	mov	r1, r3
  406b04:	4610      	mov	r0, r2
  406b06:	4b13      	ldr	r3, [pc, #76]	; (406b54 <prvAddCurrentTaskToDelayedList+0xcc>)
  406b08:	4798      	blx	r3
}
  406b0a:	e010      	b.n	406b2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  406b0c:	4b12      	ldr	r3, [pc, #72]	; (406b58 <prvAddCurrentTaskToDelayedList+0xd0>)
  406b0e:	681a      	ldr	r2, [r3, #0]
  406b10:	4b0a      	ldr	r3, [pc, #40]	; (406b3c <prvAddCurrentTaskToDelayedList+0xb4>)
  406b12:	681b      	ldr	r3, [r3, #0]
  406b14:	3304      	adds	r3, #4
  406b16:	4619      	mov	r1, r3
  406b18:	4610      	mov	r0, r2
  406b1a:	4b0e      	ldr	r3, [pc, #56]	; (406b54 <prvAddCurrentTaskToDelayedList+0xcc>)
  406b1c:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
  406b1e:	4b0f      	ldr	r3, [pc, #60]	; (406b5c <prvAddCurrentTaskToDelayedList+0xd4>)
  406b20:	681b      	ldr	r3, [r3, #0]
  406b22:	68ba      	ldr	r2, [r7, #8]
  406b24:	429a      	cmp	r2, r3
  406b26:	d202      	bcs.n	406b2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
  406b28:	4a0c      	ldr	r2, [pc, #48]	; (406b5c <prvAddCurrentTaskToDelayedList+0xd4>)
  406b2a:	68bb      	ldr	r3, [r7, #8]
  406b2c:	6013      	str	r3, [r2, #0]
}
  406b2e:	bf00      	nop
  406b30:	3710      	adds	r7, #16
  406b32:	46bd      	mov	sp, r7
  406b34:	bd80      	pop	{r7, pc}
  406b36:	bf00      	nop
  406b38:	2000a700 	.word	0x2000a700
  406b3c:	2000a650 	.word	0x2000a650
  406b40:	00405789 	.word	0x00405789
  406b44:	2000a704 	.word	0x2000a704
  406b48:	2000a6e8 	.word	0x2000a6e8
  406b4c:	004056cf 	.word	0x004056cf
  406b50:	2000a6d0 	.word	0x2000a6d0
  406b54:	00405717 	.word	0x00405717
  406b58:	2000a6cc 	.word	0x2000a6cc
  406b5c:	2000a71c 	.word	0x2000a71c

00406b60 <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
  406b60:	b580      	push	{r7, lr}
  406b62:	b082      	sub	sp, #8
  406b64:	af00      	add	r7, sp, #0
  406b66:	4603      	mov	r3, r0
  406b68:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
  406b6a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  406b6c:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
  406b70:	4b05      	ldr	r3, [pc, #20]	; (406b88 <sleepmgr_sleep+0x28>)
  406b72:	2200      	movs	r2, #0
  406b74:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
  406b76:	79fb      	ldrb	r3, [r7, #7]
  406b78:	4618      	mov	r0, r3
  406b7a:	4b04      	ldr	r3, [pc, #16]	; (406b8c <sleepmgr_sleep+0x2c>)
  406b7c:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
  406b7e:	bf00      	nop
  406b80:	3708      	adds	r7, #8
  406b82:	46bd      	mov	sp, r7
  406b84:	bd80      	pop	{r7, pc}
  406b86:	bf00      	nop
  406b88:	200000c2 	.word	0x200000c2
  406b8c:	00402d15 	.word	0x00402d15

00406b90 <sleepmgr_init>:
{
  406b90:	b480      	push	{r7}
  406b92:	b083      	sub	sp, #12
  406b94:	af00      	add	r7, sp, #0
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
  406b96:	2300      	movs	r3, #0
  406b98:	71fb      	strb	r3, [r7, #7]
  406b9a:	e006      	b.n	406baa <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
  406b9c:	79fb      	ldrb	r3, [r7, #7]
  406b9e:	4a09      	ldr	r2, [pc, #36]	; (406bc4 <sleepmgr_init+0x34>)
  406ba0:	2100      	movs	r1, #0
  406ba2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
  406ba4:	79fb      	ldrb	r3, [r7, #7]
  406ba6:	3301      	adds	r3, #1
  406ba8:	71fb      	strb	r3, [r7, #7]
  406baa:	79fb      	ldrb	r3, [r7, #7]
  406bac:	2b04      	cmp	r3, #4
  406bae:	d9f5      	bls.n	406b9c <sleepmgr_init+0xc>
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
  406bb0:	4b04      	ldr	r3, [pc, #16]	; (406bc4 <sleepmgr_init+0x34>)
  406bb2:	2201      	movs	r2, #1
  406bb4:	715a      	strb	r2, [r3, #5]
}
  406bb6:	bf00      	nop
  406bb8:	370c      	adds	r7, #12
  406bba:	46bd      	mov	sp, r7
  406bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
  406bc0:	4770      	bx	lr
  406bc2:	bf00      	nop
  406bc4:	2000a73c 	.word	0x2000a73c

00406bc8 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
  406bc8:	b480      	push	{r7}
  406bca:	b083      	sub	sp, #12
  406bcc:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
  406bce:	2300      	movs	r3, #0
  406bd0:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
  406bd2:	4b0a      	ldr	r3, [pc, #40]	; (406bfc <sleepmgr_get_sleep_mode+0x34>)
  406bd4:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
  406bd6:	e005      	b.n	406be4 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
  406bd8:	683b      	ldr	r3, [r7, #0]
  406bda:	3301      	adds	r3, #1
  406bdc:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
  406bde:	79fb      	ldrb	r3, [r7, #7]
  406be0:	3301      	adds	r3, #1
  406be2:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
  406be4:	683b      	ldr	r3, [r7, #0]
  406be6:	781b      	ldrb	r3, [r3, #0]
  406be8:	2b00      	cmp	r3, #0
  406bea:	d0f5      	beq.n	406bd8 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
  406bec:	79fb      	ldrb	r3, [r7, #7]
}
  406bee:	4618      	mov	r0, r3
  406bf0:	370c      	adds	r7, #12
  406bf2:	46bd      	mov	sp, r7
  406bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
  406bf8:	4770      	bx	lr
  406bfa:	bf00      	nop
  406bfc:	2000a73c 	.word	0x2000a73c

00406c00 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
  406c00:	b580      	push	{r7, lr}
  406c02:	b082      	sub	sp, #8
  406c04:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
  406c06:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  406c08:	f3bf 8f5f 	dmb	sy
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
  406c0c:	4b0b      	ldr	r3, [pc, #44]	; (406c3c <sleepmgr_enter_sleep+0x3c>)
  406c0e:	2200      	movs	r2, #0
  406c10:	701a      	strb	r2, [r3, #0]

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
  406c12:	4b0b      	ldr	r3, [pc, #44]	; (406c40 <sleepmgr_enter_sleep+0x40>)
  406c14:	4798      	blx	r3
  406c16:	4603      	mov	r3, r0
  406c18:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
  406c1a:	79fb      	ldrb	r3, [r7, #7]
  406c1c:	2b00      	cmp	r3, #0
  406c1e:	d106      	bne.n	406c2e <sleepmgr_enter_sleep+0x2e>
		cpu_irq_enable();
  406c20:	4b06      	ldr	r3, [pc, #24]	; (406c3c <sleepmgr_enter_sleep+0x3c>)
  406c22:	2201      	movs	r2, #1
  406c24:	701a      	strb	r2, [r3, #0]
  406c26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  406c2a:	b662      	cpsie	i
		return;
  406c2c:	e003      	b.n	406c36 <sleepmgr_enter_sleep+0x36>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
  406c2e:	79fb      	ldrb	r3, [r7, #7]
  406c30:	4618      	mov	r0, r3
  406c32:	4b04      	ldr	r3, [pc, #16]	; (406c44 <sleepmgr_enter_sleep+0x44>)
  406c34:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
  406c36:	3708      	adds	r7, #8
  406c38:	46bd      	mov	sp, r7
  406c3a:	bd80      	pop	{r7, pc}
  406c3c:	200000c2 	.word	0x200000c2
  406c40:	00406bc9 	.word	0x00406bc9
  406c44:	00406b61 	.word	0x00406b61

00406c48 <main>:
static xSemaphoreHandle main_trans_semphr = NULL;

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
  406c48:	b590      	push	{r4, r7, lr}
  406c4a:	b083      	sub	sp, #12
  406c4c:	af02      	add	r7, sp, #8
	irq_initialize_vectors();
	cpu_irq_enable();
  406c4e:	4b23      	ldr	r3, [pc, #140]	; (406cdc <main+0x94>)
  406c50:	2201      	movs	r2, #1
  406c52:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  406c54:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  406c58:	b662      	cpsie	i

	// Initialize the sleep manager
	sleepmgr_init();
  406c5a:	4b21      	ldr	r3, [pc, #132]	; (406ce0 <main+0x98>)
  406c5c:	4798      	blx	r3

	sysclk_init();
  406c5e:	4b21      	ldr	r3, [pc, #132]	; (406ce4 <main+0x9c>)
  406c60:	4798      	blx	r3
	board_init();
  406c62:	4b21      	ldr	r3, [pc, #132]	; (406ce8 <main+0xa0>)
  406c64:	4798      	blx	r3
	ui_init();
  406c66:	4b21      	ldr	r3, [pc, #132]	; (406cec <main+0xa4>)
  406c68:	4798      	blx	r3
	ui_powerdown();
  406c6a:	4b21      	ldr	r3, [pc, #132]	; (406cf0 <main+0xa8>)
  406c6c:	4798      	blx	r3

	ctrl_access_init(); // Required with FreeRTOS
  406c6e:	4b21      	ldr	r3, [pc, #132]	; (406cf4 <main+0xac>)
  406c70:	4798      	blx	r3
	memories_initialization();
  406c72:	4b21      	ldr	r3, [pc, #132]	; (406cf8 <main+0xb0>)
  406c74:	4798      	blx	r3

	// Create a semaphore to manage the memories data transfer
	vSemaphoreCreateBinary(main_trans_semphr);
  406c76:	2203      	movs	r2, #3
  406c78:	2100      	movs	r1, #0
  406c7a:	2001      	movs	r0, #1
  406c7c:	4b1f      	ldr	r3, [pc, #124]	; (406cfc <main+0xb4>)
  406c7e:	4798      	blx	r3
  406c80:	4602      	mov	r2, r0
  406c82:	4b1f      	ldr	r3, [pc, #124]	; (406d00 <main+0xb8>)
  406c84:	601a      	str	r2, [r3, #0]
  406c86:	4b1e      	ldr	r3, [pc, #120]	; (406d00 <main+0xb8>)
  406c88:	681b      	ldr	r3, [r3, #0]
  406c8a:	2b00      	cmp	r3, #0
  406c8c:	d006      	beq.n	406c9c <main+0x54>
  406c8e:	4b1c      	ldr	r3, [pc, #112]	; (406d00 <main+0xb8>)
  406c90:	6818      	ldr	r0, [r3, #0]
  406c92:	2300      	movs	r3, #0
  406c94:	2200      	movs	r2, #0
  406c96:	2100      	movs	r1, #0
  406c98:	4c1a      	ldr	r4, [pc, #104]	; (406d04 <main+0xbc>)
  406c9a:	47a0      	blx	r4
	Assert( main_trans_semphr != NULL );
	
	// Start USB stack to authorize VBus monitoring
	udc_start();
  406c9c:	4b1a      	ldr	r3, [pc, #104]	; (406d08 <main+0xc0>)
  406c9e:	4798      	blx	r3
	
	// Create a task to process data transfer
	xTaskCreate(Task1,
  406ca0:	2300      	movs	r3, #0
  406ca2:	9301      	str	r3, [sp, #4]
  406ca4:	2301      	movs	r3, #1
  406ca6:	9300      	str	r3, [sp, #0]
  406ca8:	2300      	movs	r3, #0
  406caa:	f44f 7280 	mov.w	r2, #256	; 0x100
  406cae:	4917      	ldr	r1, [pc, #92]	; (406d0c <main+0xc4>)
  406cb0:	4817      	ldr	r0, [pc, #92]	; (406d10 <main+0xc8>)
  406cb2:	4c18      	ldr	r4, [pc, #96]	; (406d14 <main+0xcc>)
  406cb4:	47a0      	blx	r4
#endif
			NULL,
			tskIDLE_PRIORITY + 1,
			NULL);
			
	xTaskCreate(Task2,
  406cb6:	2300      	movs	r3, #0
  406cb8:	9301      	str	r3, [sp, #4]
  406cba:	2301      	movs	r3, #1
  406cbc:	9300      	str	r3, [sp, #0]
  406cbe:	2300      	movs	r3, #0
  406cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
  406cc4:	4911      	ldr	r1, [pc, #68]	; (406d0c <main+0xc4>)
  406cc6:	4814      	ldr	r0, [pc, #80]	; (406d18 <main+0xd0>)
  406cc8:	4c12      	ldr	r4, [pc, #72]	; (406d14 <main+0xcc>)
  406cca:	47a0      	blx	r4
	// when USB cable is unplugged.
	//  IDLE is the sleep level required by the Timer counter used by FreeRTOS.
	// sleepmgr_lock_mode(SLEEPMGR_IDLE);

	// Start OS scheduler
	vTaskStartScheduler();
  406ccc:	4b13      	ldr	r3, [pc, #76]	; (406d1c <main+0xd4>)
  406cce:	4798      	blx	r3
	return 0;
  406cd0:	2300      	movs	r3, #0
}
  406cd2:	4618      	mov	r0, r3
  406cd4:	3704      	adds	r7, #4
  406cd6:	46bd      	mov	sp, r7
  406cd8:	bd90      	pop	{r4, r7, pc}
  406cda:	bf00      	nop
  406cdc:	200000c2 	.word	0x200000c2
  406ce0:	00406b91 	.word	0x00406b91
  406ce4:	004006b9 	.word	0x004006b9
  406ce8:	004026f1 	.word	0x004026f1
  406cec:	004001d1 	.word	0x004001d1
  406cf0:	004001e5 	.word	0x004001e5
  406cf4:	00400729 	.word	0x00400729
  406cf8:	00406e31 	.word	0x00406e31
  406cfc:	00405ba1 	.word	0x00405ba1
  406d00:	2000a72c 	.word	0x2000a72c
  406d04:	00405c45 	.word	0x00405c45
  406d08:	00401a59 	.word	0x00401a59
  406d0c:	004071d4 	.word	0x004071d4
  406d10:	00406d31 	.word	0x00406d31
  406d14:	004061b1 	.word	0x004061b1
  406d18:	00406d69 	.word	0x00406d69
  406d1c:	00406405 	.word	0x00406405

00406d20 <vApplicationIdleHook>:

void vApplicationIdleHook( void );
void vApplicationIdleHook( void )
{
  406d20:	b580      	push	{r7, lr}
  406d22:	af00      	add	r7, sp, #0
	// Management of sleep mode in Idle Hook from FreeRTOS
	sleepmgr_enter_sleep();
  406d24:	4b01      	ldr	r3, [pc, #4]	; (406d2c <vApplicationIdleHook+0xc>)
  406d26:	4798      	blx	r3
}
  406d28:	bf00      	nop
  406d2a:	bd80      	pop	{r7, pc}
  406d2c:	00406c01 	.word	0x00406c01

00406d30 <Task1>:

static void Task1(void *pvParameters)
{
  406d30:	b580      	push	{r7, lr}
  406d32:	b082      	sub	sp, #8
  406d34:	af00      	add	r7, sp, #0
  406d36:	6078      	str	r0, [r7, #4]
	static int count_tmp = 0;	
	UNUSED(pvParameters);
	while (true)
	{
		count_tmp++;
  406d38:	4b08      	ldr	r3, [pc, #32]	; (406d5c <Task1+0x2c>)
  406d3a:	681b      	ldr	r3, [r3, #0]
  406d3c:	3301      	adds	r3, #1
  406d3e:	4a07      	ldr	r2, [pc, #28]	; (406d5c <Task1+0x2c>)
  406d40:	6013      	str	r3, [r2, #0]
		if(count_tmp % 2)
  406d42:	4b06      	ldr	r3, [pc, #24]	; (406d5c <Task1+0x2c>)
  406d44:	681b      	ldr	r3, [r3, #0]
  406d46:	f003 0301 	and.w	r3, r3, #1
  406d4a:	2b00      	cmp	r3, #0
  406d4c:	d002      	beq.n	406d54 <Task1+0x24>
		{
			main_resume_action();
  406d4e:	4b04      	ldr	r3, [pc, #16]	; (406d60 <Task1+0x30>)
  406d50:	4798      	blx	r3
  406d52:	e7f1      	b.n	406d38 <Task1+0x8>
		}
		else
		{
			main_suspend_action();
  406d54:	4b03      	ldr	r3, [pc, #12]	; (406d64 <Task1+0x34>)
  406d56:	4798      	blx	r3
		count_tmp++;
  406d58:	e7ee      	b.n	406d38 <Task1+0x8>
  406d5a:	bf00      	nop
  406d5c:	2000a730 	.word	0x2000a730
  406d60:	00406db9 	.word	0x00406db9
  406d64:	00406da9 	.word	0x00406da9

00406d68 <Task2>:
	
	}
}

static void Task2(void *pvParameters)
{
  406d68:	b480      	push	{r7}
  406d6a:	b083      	sub	sp, #12
  406d6c:	af00      	add	r7, sp, #0
  406d6e:	6078      	str	r0, [r7, #4]
	static int count_tmp2 = 0;
	UNUSED(pvParameters);
	while (true)
	{
		count_tmp2++;
  406d70:	4b02      	ldr	r3, [pc, #8]	; (406d7c <Task2+0x14>)
  406d72:	681b      	ldr	r3, [r3, #0]
  406d74:	3301      	adds	r3, #1
  406d76:	4a01      	ldr	r2, [pc, #4]	; (406d7c <Task2+0x14>)
  406d78:	6013      	str	r3, [r2, #0]
  406d7a:	e7f9      	b.n	406d70 <Task2+0x8>
  406d7c:	2000a734 	.word	0x2000a734

00406d80 <main_msc_notify_trans>:
		}
	}
}

void main_msc_notify_trans(void)
{
  406d80:	b580      	push	{r7, lr}
  406d82:	af00      	add	r7, sp, #0
	static signed portBASE_TYPE xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
  406d84:	4b05      	ldr	r3, [pc, #20]	; (406d9c <main_msc_notify_trans+0x1c>)
  406d86:	2200      	movs	r2, #0
  406d88:	601a      	str	r2, [r3, #0]
	// One transfer is requested 
	// It is now time for main_memories_trans_task() to run
	xSemaphoreGiveFromISR( main_trans_semphr, &xHigherPriorityTaskWoken );
  406d8a:	4b05      	ldr	r3, [pc, #20]	; (406da0 <main_msc_notify_trans+0x20>)
  406d8c:	681b      	ldr	r3, [r3, #0]
  406d8e:	4903      	ldr	r1, [pc, #12]	; (406d9c <main_msc_notify_trans+0x1c>)
  406d90:	4618      	mov	r0, r3
  406d92:	4b04      	ldr	r3, [pc, #16]	; (406da4 <main_msc_notify_trans+0x24>)
  406d94:	4798      	blx	r3
}
  406d96:	bf00      	nop
  406d98:	bd80      	pop	{r7, pc}
  406d9a:	bf00      	nop
  406d9c:	2000a738 	.word	0x2000a738
  406da0:	2000a72c 	.word	0x2000a72c
  406da4:	00405dc5 	.word	0x00405dc5

00406da8 <main_suspend_action>:

void main_suspend_action(void)
{
  406da8:	b580      	push	{r7, lr}
  406daa:	af00      	add	r7, sp, #0
	ui_powerdown();
  406dac:	4b01      	ldr	r3, [pc, #4]	; (406db4 <main_suspend_action+0xc>)
  406dae:	4798      	blx	r3
}
  406db0:	bf00      	nop
  406db2:	bd80      	pop	{r7, pc}
  406db4:	004001e5 	.word	0x004001e5

00406db8 <main_resume_action>:

void main_resume_action(void)
{
  406db8:	b580      	push	{r7, lr}
  406dba:	af00      	add	r7, sp, #0
	ui_wakeup();
  406dbc:	4b01      	ldr	r3, [pc, #4]	; (406dc4 <main_resume_action+0xc>)
  406dbe:	4798      	blx	r3
}
  406dc0:	bf00      	nop
  406dc2:	bd80      	pop	{r7, pc}
  406dc4:	004001f9 	.word	0x004001f9

00406dc8 <main_sof_action>:

void main_sof_action(void)
{
  406dc8:	b580      	push	{r7, lr}
  406dca:	af00      	add	r7, sp, #0
	if (!main_b_msc_enable)
  406dcc:	4b08      	ldr	r3, [pc, #32]	; (406df0 <main_sof_action+0x28>)
  406dce:	781b      	ldrb	r3, [r3, #0]
  406dd0:	b2db      	uxtb	r3, r3
  406dd2:	f083 0301 	eor.w	r3, r3, #1
  406dd6:	b2db      	uxtb	r3, r3
  406dd8:	2b00      	cmp	r3, #0
  406dda:	d106      	bne.n	406dea <main_sof_action+0x22>
		return;
	ui_process(udd_get_frame_number());
  406ddc:	4b05      	ldr	r3, [pc, #20]	; (406df4 <main_sof_action+0x2c>)
  406dde:	4798      	blx	r3
  406de0:	4603      	mov	r3, r0
  406de2:	4618      	mov	r0, r3
  406de4:	4b04      	ldr	r3, [pc, #16]	; (406df8 <main_sof_action+0x30>)
  406de6:	4798      	blx	r3
  406de8:	e000      	b.n	406dec <main_sof_action+0x24>
		return;
  406dea:	bf00      	nop
}
  406dec:	bd80      	pop	{r7, pc}
  406dee:	bf00      	nop
  406df0:	2000a728 	.word	0x2000a728
  406df4:	00403641 	.word	0x00403641
  406df8:	0040020d 	.word	0x0040020d

00406dfc <main_msc_enable>:

bool main_msc_enable(void)
{
  406dfc:	b480      	push	{r7}
  406dfe:	af00      	add	r7, sp, #0
	main_b_msc_enable = true;
  406e00:	4b04      	ldr	r3, [pc, #16]	; (406e14 <main_msc_enable+0x18>)
  406e02:	2201      	movs	r2, #1
  406e04:	701a      	strb	r2, [r3, #0]
	return true;
  406e06:	2301      	movs	r3, #1
}
  406e08:	4618      	mov	r0, r3
  406e0a:	46bd      	mov	sp, r7
  406e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e10:	4770      	bx	lr
  406e12:	bf00      	nop
  406e14:	2000a728 	.word	0x2000a728

00406e18 <main_msc_disable>:

void main_msc_disable(void)
{
  406e18:	b480      	push	{r7}
  406e1a:	af00      	add	r7, sp, #0
	main_b_msc_enable = false;
  406e1c:	4b03      	ldr	r3, [pc, #12]	; (406e2c <main_msc_disable+0x14>)
  406e1e:	2200      	movs	r2, #0
  406e20:	701a      	strb	r2, [r3, #0]
}
  406e22:	bf00      	nop
  406e24:	46bd      	mov	sp, r7
  406e26:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e2a:	4770      	bx	lr
  406e2c:	2000a728 	.word	0x2000a728

00406e30 <memories_initialization>:
	pio_set_pin_low(PIN_EBI_NLB);
}
#endif

void memories_initialization(void)
{
  406e30:	b480      	push	{r7}
  406e32:	af00      	add	r7, sp, #0
	ext_sram_init();
#endif
#if defined CONF_BOARD_SD_MMC_HSMCI || defined CONF_BOARD_SD_MMC_SPI
	sd_mmc_init();
#endif
}
  406e34:	bf00      	nop
  406e36:	46bd      	mov	sp, r7
  406e38:	f85d 7b04 	ldr.w	r7, [sp], #4
  406e3c:	4770      	bx	lr
	...

00406e40 <__libc_init_array>:
  406e40:	b570      	push	{r4, r5, r6, lr}
  406e42:	4e0f      	ldr	r6, [pc, #60]	; (406e80 <__libc_init_array+0x40>)
  406e44:	4d0f      	ldr	r5, [pc, #60]	; (406e84 <__libc_init_array+0x44>)
  406e46:	1b76      	subs	r6, r6, r5
  406e48:	10b6      	asrs	r6, r6, #2
  406e4a:	bf18      	it	ne
  406e4c:	2400      	movne	r4, #0
  406e4e:	d005      	beq.n	406e5c <__libc_init_array+0x1c>
  406e50:	3401      	adds	r4, #1
  406e52:	f855 3b04 	ldr.w	r3, [r5], #4
  406e56:	4798      	blx	r3
  406e58:	42a6      	cmp	r6, r4
  406e5a:	d1f9      	bne.n	406e50 <__libc_init_array+0x10>
  406e5c:	4e0a      	ldr	r6, [pc, #40]	; (406e88 <__libc_init_array+0x48>)
  406e5e:	4d0b      	ldr	r5, [pc, #44]	; (406e8c <__libc_init_array+0x4c>)
  406e60:	1b76      	subs	r6, r6, r5
  406e62:	f000 f9c1 	bl	4071e8 <_init>
  406e66:	10b6      	asrs	r6, r6, #2
  406e68:	bf18      	it	ne
  406e6a:	2400      	movne	r4, #0
  406e6c:	d006      	beq.n	406e7c <__libc_init_array+0x3c>
  406e6e:	3401      	adds	r4, #1
  406e70:	f855 3b04 	ldr.w	r3, [r5], #4
  406e74:	4798      	blx	r3
  406e76:	42a6      	cmp	r6, r4
  406e78:	d1f9      	bne.n	406e6e <__libc_init_array+0x2e>
  406e7a:	bd70      	pop	{r4, r5, r6, pc}
  406e7c:	bd70      	pop	{r4, r5, r6, pc}
  406e7e:	bf00      	nop
  406e80:	004071f4 	.word	0x004071f4
  406e84:	004071f4 	.word	0x004071f4
  406e88:	004071fc 	.word	0x004071fc
  406e8c:	004071f4 	.word	0x004071f4

00406e90 <memcpy>:
  406e90:	4684      	mov	ip, r0
  406e92:	ea41 0300 	orr.w	r3, r1, r0
  406e96:	f013 0303 	ands.w	r3, r3, #3
  406e9a:	d16d      	bne.n	406f78 <memcpy+0xe8>
  406e9c:	3a40      	subs	r2, #64	; 0x40
  406e9e:	d341      	bcc.n	406f24 <memcpy+0x94>
  406ea0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ea4:	f840 3b04 	str.w	r3, [r0], #4
  406ea8:	f851 3b04 	ldr.w	r3, [r1], #4
  406eac:	f840 3b04 	str.w	r3, [r0], #4
  406eb0:	f851 3b04 	ldr.w	r3, [r1], #4
  406eb4:	f840 3b04 	str.w	r3, [r0], #4
  406eb8:	f851 3b04 	ldr.w	r3, [r1], #4
  406ebc:	f840 3b04 	str.w	r3, [r0], #4
  406ec0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ec4:	f840 3b04 	str.w	r3, [r0], #4
  406ec8:	f851 3b04 	ldr.w	r3, [r1], #4
  406ecc:	f840 3b04 	str.w	r3, [r0], #4
  406ed0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ed4:	f840 3b04 	str.w	r3, [r0], #4
  406ed8:	f851 3b04 	ldr.w	r3, [r1], #4
  406edc:	f840 3b04 	str.w	r3, [r0], #4
  406ee0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ee4:	f840 3b04 	str.w	r3, [r0], #4
  406ee8:	f851 3b04 	ldr.w	r3, [r1], #4
  406eec:	f840 3b04 	str.w	r3, [r0], #4
  406ef0:	f851 3b04 	ldr.w	r3, [r1], #4
  406ef4:	f840 3b04 	str.w	r3, [r0], #4
  406ef8:	f851 3b04 	ldr.w	r3, [r1], #4
  406efc:	f840 3b04 	str.w	r3, [r0], #4
  406f00:	f851 3b04 	ldr.w	r3, [r1], #4
  406f04:	f840 3b04 	str.w	r3, [r0], #4
  406f08:	f851 3b04 	ldr.w	r3, [r1], #4
  406f0c:	f840 3b04 	str.w	r3, [r0], #4
  406f10:	f851 3b04 	ldr.w	r3, [r1], #4
  406f14:	f840 3b04 	str.w	r3, [r0], #4
  406f18:	f851 3b04 	ldr.w	r3, [r1], #4
  406f1c:	f840 3b04 	str.w	r3, [r0], #4
  406f20:	3a40      	subs	r2, #64	; 0x40
  406f22:	d2bd      	bcs.n	406ea0 <memcpy+0x10>
  406f24:	3230      	adds	r2, #48	; 0x30
  406f26:	d311      	bcc.n	406f4c <memcpy+0xbc>
  406f28:	f851 3b04 	ldr.w	r3, [r1], #4
  406f2c:	f840 3b04 	str.w	r3, [r0], #4
  406f30:	f851 3b04 	ldr.w	r3, [r1], #4
  406f34:	f840 3b04 	str.w	r3, [r0], #4
  406f38:	f851 3b04 	ldr.w	r3, [r1], #4
  406f3c:	f840 3b04 	str.w	r3, [r0], #4
  406f40:	f851 3b04 	ldr.w	r3, [r1], #4
  406f44:	f840 3b04 	str.w	r3, [r0], #4
  406f48:	3a10      	subs	r2, #16
  406f4a:	d2ed      	bcs.n	406f28 <memcpy+0x98>
  406f4c:	320c      	adds	r2, #12
  406f4e:	d305      	bcc.n	406f5c <memcpy+0xcc>
  406f50:	f851 3b04 	ldr.w	r3, [r1], #4
  406f54:	f840 3b04 	str.w	r3, [r0], #4
  406f58:	3a04      	subs	r2, #4
  406f5a:	d2f9      	bcs.n	406f50 <memcpy+0xc0>
  406f5c:	3204      	adds	r2, #4
  406f5e:	d008      	beq.n	406f72 <memcpy+0xe2>
  406f60:	07d2      	lsls	r2, r2, #31
  406f62:	bf1c      	itt	ne
  406f64:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406f68:	f800 3b01 	strbne.w	r3, [r0], #1
  406f6c:	d301      	bcc.n	406f72 <memcpy+0xe2>
  406f6e:	880b      	ldrh	r3, [r1, #0]
  406f70:	8003      	strh	r3, [r0, #0]
  406f72:	4660      	mov	r0, ip
  406f74:	4770      	bx	lr
  406f76:	bf00      	nop
  406f78:	2a08      	cmp	r2, #8
  406f7a:	d313      	bcc.n	406fa4 <memcpy+0x114>
  406f7c:	078b      	lsls	r3, r1, #30
  406f7e:	d08d      	beq.n	406e9c <memcpy+0xc>
  406f80:	f010 0303 	ands.w	r3, r0, #3
  406f84:	d08a      	beq.n	406e9c <memcpy+0xc>
  406f86:	f1c3 0304 	rsb	r3, r3, #4
  406f8a:	1ad2      	subs	r2, r2, r3
  406f8c:	07db      	lsls	r3, r3, #31
  406f8e:	bf1c      	itt	ne
  406f90:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406f94:	f800 3b01 	strbne.w	r3, [r0], #1
  406f98:	d380      	bcc.n	406e9c <memcpy+0xc>
  406f9a:	f831 3b02 	ldrh.w	r3, [r1], #2
  406f9e:	f820 3b02 	strh.w	r3, [r0], #2
  406fa2:	e77b      	b.n	406e9c <memcpy+0xc>
  406fa4:	3a04      	subs	r2, #4
  406fa6:	d3d9      	bcc.n	406f5c <memcpy+0xcc>
  406fa8:	3a01      	subs	r2, #1
  406faa:	f811 3b01 	ldrb.w	r3, [r1], #1
  406fae:	f800 3b01 	strb.w	r3, [r0], #1
  406fb2:	d2f9      	bcs.n	406fa8 <memcpy+0x118>
  406fb4:	780b      	ldrb	r3, [r1, #0]
  406fb6:	7003      	strb	r3, [r0, #0]
  406fb8:	784b      	ldrb	r3, [r1, #1]
  406fba:	7043      	strb	r3, [r0, #1]
  406fbc:	788b      	ldrb	r3, [r1, #2]
  406fbe:	7083      	strb	r3, [r0, #2]
  406fc0:	4660      	mov	r0, ip
  406fc2:	4770      	bx	lr

00406fc4 <memset>:
  406fc4:	b470      	push	{r4, r5, r6}
  406fc6:	0786      	lsls	r6, r0, #30
  406fc8:	d046      	beq.n	407058 <memset+0x94>
  406fca:	1e54      	subs	r4, r2, #1
  406fcc:	2a00      	cmp	r2, #0
  406fce:	d041      	beq.n	407054 <memset+0x90>
  406fd0:	b2ca      	uxtb	r2, r1
  406fd2:	4603      	mov	r3, r0
  406fd4:	e002      	b.n	406fdc <memset+0x18>
  406fd6:	f114 34ff 	adds.w	r4, r4, #4294967295
  406fda:	d33b      	bcc.n	407054 <memset+0x90>
  406fdc:	f803 2b01 	strb.w	r2, [r3], #1
  406fe0:	079d      	lsls	r5, r3, #30
  406fe2:	d1f8      	bne.n	406fd6 <memset+0x12>
  406fe4:	2c03      	cmp	r4, #3
  406fe6:	d92e      	bls.n	407046 <memset+0x82>
  406fe8:	b2cd      	uxtb	r5, r1
  406fea:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  406fee:	2c0f      	cmp	r4, #15
  406ff0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  406ff4:	d919      	bls.n	40702a <memset+0x66>
  406ff6:	f103 0210 	add.w	r2, r3, #16
  406ffa:	4626      	mov	r6, r4
  406ffc:	3e10      	subs	r6, #16
  406ffe:	2e0f      	cmp	r6, #15
  407000:	f842 5c10 	str.w	r5, [r2, #-16]
  407004:	f842 5c0c 	str.w	r5, [r2, #-12]
  407008:	f842 5c08 	str.w	r5, [r2, #-8]
  40700c:	f842 5c04 	str.w	r5, [r2, #-4]
  407010:	f102 0210 	add.w	r2, r2, #16
  407014:	d8f2      	bhi.n	406ffc <memset+0x38>
  407016:	f1a4 0210 	sub.w	r2, r4, #16
  40701a:	f022 020f 	bic.w	r2, r2, #15
  40701e:	f004 040f 	and.w	r4, r4, #15
  407022:	3210      	adds	r2, #16
  407024:	2c03      	cmp	r4, #3
  407026:	4413      	add	r3, r2
  407028:	d90d      	bls.n	407046 <memset+0x82>
  40702a:	461e      	mov	r6, r3
  40702c:	4622      	mov	r2, r4
  40702e:	3a04      	subs	r2, #4
  407030:	2a03      	cmp	r2, #3
  407032:	f846 5b04 	str.w	r5, [r6], #4
  407036:	d8fa      	bhi.n	40702e <memset+0x6a>
  407038:	1f22      	subs	r2, r4, #4
  40703a:	f022 0203 	bic.w	r2, r2, #3
  40703e:	3204      	adds	r2, #4
  407040:	4413      	add	r3, r2
  407042:	f004 0403 	and.w	r4, r4, #3
  407046:	b12c      	cbz	r4, 407054 <memset+0x90>
  407048:	b2c9      	uxtb	r1, r1
  40704a:	441c      	add	r4, r3
  40704c:	f803 1b01 	strb.w	r1, [r3], #1
  407050:	429c      	cmp	r4, r3
  407052:	d1fb      	bne.n	40704c <memset+0x88>
  407054:	bc70      	pop	{r4, r5, r6}
  407056:	4770      	bx	lr
  407058:	4614      	mov	r4, r2
  40705a:	4603      	mov	r3, r0
  40705c:	e7c2      	b.n	406fe4 <memset+0x20>
  40705e:	bf00      	nop

00407060 <register_fini>:
  407060:	4b02      	ldr	r3, [pc, #8]	; (40706c <register_fini+0xc>)
  407062:	b113      	cbz	r3, 40706a <register_fini+0xa>
  407064:	4802      	ldr	r0, [pc, #8]	; (407070 <register_fini+0x10>)
  407066:	f000 b805 	b.w	407074 <atexit>
  40706a:	4770      	bx	lr
  40706c:	00000000 	.word	0x00000000
  407070:	00407081 	.word	0x00407081

00407074 <atexit>:
  407074:	2300      	movs	r3, #0
  407076:	4601      	mov	r1, r0
  407078:	461a      	mov	r2, r3
  40707a:	4618      	mov	r0, r3
  40707c:	f000 b81e 	b.w	4070bc <__register_exitproc>

00407080 <__libc_fini_array>:
  407080:	b538      	push	{r3, r4, r5, lr}
  407082:	4c0a      	ldr	r4, [pc, #40]	; (4070ac <__libc_fini_array+0x2c>)
  407084:	4d0a      	ldr	r5, [pc, #40]	; (4070b0 <__libc_fini_array+0x30>)
  407086:	1b64      	subs	r4, r4, r5
  407088:	10a4      	asrs	r4, r4, #2
  40708a:	d00a      	beq.n	4070a2 <__libc_fini_array+0x22>
  40708c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407090:	3b01      	subs	r3, #1
  407092:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  407096:	3c01      	subs	r4, #1
  407098:	f855 3904 	ldr.w	r3, [r5], #-4
  40709c:	4798      	blx	r3
  40709e:	2c00      	cmp	r4, #0
  4070a0:	d1f9      	bne.n	407096 <__libc_fini_array+0x16>
  4070a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4070a6:	f000 b8a9 	b.w	4071fc <_fini>
  4070aa:	bf00      	nop
  4070ac:	0040720c 	.word	0x0040720c
  4070b0:	00407208 	.word	0x00407208

004070b4 <__retarget_lock_acquire_recursive>:
  4070b4:	4770      	bx	lr
  4070b6:	bf00      	nop

004070b8 <__retarget_lock_release_recursive>:
  4070b8:	4770      	bx	lr
  4070ba:	bf00      	nop

004070bc <__register_exitproc>:
  4070bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4070c0:	4d2c      	ldr	r5, [pc, #176]	; (407174 <__register_exitproc+0xb8>)
  4070c2:	4606      	mov	r6, r0
  4070c4:	6828      	ldr	r0, [r5, #0]
  4070c6:	4698      	mov	r8, r3
  4070c8:	460f      	mov	r7, r1
  4070ca:	4691      	mov	r9, r2
  4070cc:	f7ff fff2 	bl	4070b4 <__retarget_lock_acquire_recursive>
  4070d0:	4b29      	ldr	r3, [pc, #164]	; (407178 <__register_exitproc+0xbc>)
  4070d2:	681c      	ldr	r4, [r3, #0]
  4070d4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4070d8:	2b00      	cmp	r3, #0
  4070da:	d03e      	beq.n	40715a <__register_exitproc+0x9e>
  4070dc:	685a      	ldr	r2, [r3, #4]
  4070de:	2a1f      	cmp	r2, #31
  4070e0:	dc1c      	bgt.n	40711c <__register_exitproc+0x60>
  4070e2:	f102 0e01 	add.w	lr, r2, #1
  4070e6:	b176      	cbz	r6, 407106 <__register_exitproc+0x4a>
  4070e8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4070ec:	2401      	movs	r4, #1
  4070ee:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4070f2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4070f6:	4094      	lsls	r4, r2
  4070f8:	4320      	orrs	r0, r4
  4070fa:	2e02      	cmp	r6, #2
  4070fc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  407100:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  407104:	d023      	beq.n	40714e <__register_exitproc+0x92>
  407106:	3202      	adds	r2, #2
  407108:	f8c3 e004 	str.w	lr, [r3, #4]
  40710c:	6828      	ldr	r0, [r5, #0]
  40710e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  407112:	f7ff ffd1 	bl	4070b8 <__retarget_lock_release_recursive>
  407116:	2000      	movs	r0, #0
  407118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40711c:	4b17      	ldr	r3, [pc, #92]	; (40717c <__register_exitproc+0xc0>)
  40711e:	b30b      	cbz	r3, 407164 <__register_exitproc+0xa8>
  407120:	f44f 70c8 	mov.w	r0, #400	; 0x190
  407124:	f3af 8000 	nop.w
  407128:	4603      	mov	r3, r0
  40712a:	b1d8      	cbz	r0, 407164 <__register_exitproc+0xa8>
  40712c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  407130:	6002      	str	r2, [r0, #0]
  407132:	2100      	movs	r1, #0
  407134:	6041      	str	r1, [r0, #4]
  407136:	460a      	mov	r2, r1
  407138:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40713c:	f04f 0e01 	mov.w	lr, #1
  407140:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  407144:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  407148:	2e00      	cmp	r6, #0
  40714a:	d0dc      	beq.n	407106 <__register_exitproc+0x4a>
  40714c:	e7cc      	b.n	4070e8 <__register_exitproc+0x2c>
  40714e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  407152:	430c      	orrs	r4, r1
  407154:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  407158:	e7d5      	b.n	407106 <__register_exitproc+0x4a>
  40715a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40715e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  407162:	e7bb      	b.n	4070dc <__register_exitproc+0x20>
  407164:	6828      	ldr	r0, [r5, #0]
  407166:	f7ff ffa7 	bl	4070b8 <__retarget_lock_release_recursive>
  40716a:	f04f 30ff 	mov.w	r0, #4294967295
  40716e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  407172:	bf00      	nop
  407174:	200004f8 	.word	0x200004f8
  407178:	004071e4 	.word	0x004071e4
  40717c:	00000000 	.word	0x00000000
  407180:	2d6e4f22 	.word	0x2d6e4f22
  407184:	70696843 	.word	0x70696843
  407188:	72695620 	.word	0x72695620
  40718c:	6c617574 	.word	0x6c617574
  407190:	6d654d20 	.word	0x6d654d20
  407194:	2279726f 	.word	0x2279726f
  407198:	00000000 	.word	0x00000000

0040719c <lun_desc>:
  40719c:	00400241 00400261 004002ad 0040028d     A.@.a.@...@...@.
  4071ac:	0040029d 00400355 0040037d 00407180     ..@.U.@.}.@..q@.
  4071bc:	31333231 32313332 33323133 00000000     123123123123....
  4071cc:	454c4449 00000000 41544144 41525420     IDLE....DATA TRA
  4071dc:	4546534e 00000052                       NSFER...

004071e4 <_global_impure_ptr>:
  4071e4:	200000d0                                ... 

004071e8 <_init>:
  4071e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4071ea:	bf00      	nop
  4071ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4071ee:	bc08      	pop	{r3}
  4071f0:	469e      	mov	lr, r3
  4071f2:	4770      	bx	lr

004071f4 <__init_array_start>:
  4071f4:	00407061 	.word	0x00407061

004071f8 <__frame_dummy_init_array_entry>:
  4071f8:	0040011d                                ..@.

004071fc <_fini>:
  4071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4071fe:	bf00      	nop
  407200:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407202:	bc08      	pop	{r3}
  407204:	469e      	mov	lr, r3
  407206:	4770      	bx	lr

00407208 <__fini_array_start>:
  407208:	004000f9 	.word	0x004000f9
